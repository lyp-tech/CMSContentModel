import { DropdownListElement } from "../../base/dropdown-list-element";
import { SgdsFormControl } from "../../utils/formSubmitController";
import { SgdsBadge } from "../Badge/sgds-badge";
import SgdsIcon from "../Icon/sgds-icon";
import { ComboBoxItem } from "./combo-box-item";
/**
 * Each item in the ComboBox has a label to display
 * and a value (the actual data / ID).
 */
interface SgdsComboBoxItemData {
    label: string;
    value: string;
}
declare const SgdsComboBox_base: (new (...args: any[]) => import("../../utils/validatorMixin").ToBeValidatedElementInterface) & typeof DropdownListElement;
/**
 * @summary ComboBox component is used for users to make one or more selections from a list.
 *
 * @slot icon - slot for form control icon to be displayed on the right of the input box.
 *
 * @event sgds-select - Emitted when the combo box's selected value changes.
 * @event sgds-input -  Emitted when user input is received and its value changes.
 */
export declare class SgdsComboBox extends SgdsComboBox_base implements SgdsFormControl {
    static styles: import("lit").CSSResult[];
    /** @internal */
    static dependencies: {
        "sgds-combo-box-item": typeof ComboBoxItem;
        "sgds-icon": typeof SgdsIcon;
        "sgds-badge": typeof SgdsBadge;
    };
    constructor();
    /** The input's label  */
    label: string;
    /** The input's hint text below the label */
    hintText: string;
    /** The input's name attribute */
    name: string;
    /** The input's placeholder text. */
    placeholder: string;
    /** Autofocus the input */
    autofocus: boolean;
    /** Disables the input. */
    disabled: boolean;
    /** Makes the input a required field. */
    required: boolean;
    /** Makes the input readonly. */
    readonly: boolean;
    /**
     * IMPORTANT:
     * We still expose `.value` externally, but this is now the underlying ID or data
     * (e.g. 1, 2, 'abc', ...), not the label that appears in the input box.
     */
    value: string;
    private displayValue;
    /** @internal Gets or sets the default value used to reset this element. */
    defaultValue: string;
    /** Allows invalidFeedback, invalid and valid styles to be visible with the input */
    hasFeedback: boolean;
    /** Feedback text for error state when validated */
    invalidFeedback: string;
    /** Marks the component as invalid. Replace the pseudo :invalid selector. */
    invalid: boolean;
    /** The list of items to display in the dropdown.
     * `interface SgdsComboBoxItemData {
     * label: string;
     * value: string;
     * }`
     */
    menuList: SgdsComboBoxItemData[];
    /** If true, renders multiple checkbox selection items. If false, single-select. */
    multiSelect: boolean;
    /** The function used to filter the menu list, given the user's input value. */
    filterFunction: (inputValue: string, item: SgdsComboBoxItemData) => boolean;
    /** @internal Managed filtered menu on the fly with input change*/
    private filteredMenuList;
    /** @internal Managed menu to render depending on the activity. On input change, show filteredMenu, on selections and initial state show full menu list. */
    private _renderedMenu;
    /** Track selected items (even for single-select, but it will have at most one). */
    private selectedItems;
    private _isTouched;
    private _sgdsInput;
    private _multiSelectInput;
    connectedCallback(): void;
    firstUpdated(): Promise<void>;
    _handleValueChange(): Promise<void>;
    private _handleInputChange;
    /**
     * Called whenever an <sgds-combo-box-item> dispatches sgds-select"
     */
    private _handleItemSelected;
    private _handleItemUnselect;
    private _handleBadgeDismissed;
    private _handleMultiSelectKeyDown;
    private _handleInputBlur;
    /**
     * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
     * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
     */
    reportValidity(): boolean;
    /**
     * Checks for validity without any native error popup message
     */
    checkValidity(): boolean;
    /**
     * Returns the ValidityState object
     */
    get validity(): ValidityState;
    /**
     * Returns the validation message based on the ValidityState
     */
    get validationMessage(): string;
    protected _controlId: string;
    protected _renderFeedback(): import("lit-html").TemplateResult<1>;
    protected _renderHintText(): import("lit-html").TemplateResult<1>;
    /** For form reset  */
    private _mixinResetFormControl;
    private _menu;
    private _handleClick;
    protected _labelId: string;
    protected _renderLabel(): import("lit-html").TemplateResult<1>;
    protected _renderInput(): import("lit-html").TemplateResult<1>;
    render(): import("lit-html").TemplateResult<1>;
}
export default SgdsComboBox;
