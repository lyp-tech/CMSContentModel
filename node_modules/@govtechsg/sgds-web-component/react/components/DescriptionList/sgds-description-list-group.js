'use client';
import { __decorate } from 'tslib';
import { html, nothing } from 'lit';
import { property, queryAssignedElements } from 'lit/decorators.js';
import SgdsElement from '../../base/sgds-element.js';
import css_248z from './description-list-group.js';
import { HasSlotController } from '../../utils/slot.js';

/**
 * @summary Description List Group organizes multiple description lists.
 *
 * @slot default - The slot for `description-list` components
 * @slot title - Slot for the title content
 * @slot description - Slot for the description content
 *
 */
class SgdsDescriptionListGroup extends SgdsElement {
    constructor() {
        super(...arguments);
        /** When true, adds a border around the entire group. */
        this.bordered = false;
        /** When true, the description lists are displayed in a stacked layout. */
        this.stacked = false;
        /** @internal */
        this.hasSlotController = new HasSlotController(this, "title", "description");
    }
    connectedCallback() {
        super.connectedCallback();
        this.setAttribute("role", "list");
        this.updateComplete.then(() => {
            this._updateDescriptionLists();
        });
    }
    _updateDescriptionLists() {
        if (!this._descriptionLists)
            return;
        this._descriptionLists.forEach((descriptionList, index) => {
            if (this.stacked) {
                descriptionList.setAttribute("stacked", "");
            }
            else {
                descriptionList.removeAttribute("stacked");
            }
            if (this.bordered) {
                descriptionList.setAttribute("bordered", "");
            }
            else {
                descriptionList.removeAttribute("bordered");
            }
            if (index === this._descriptionLists.length - 1) {
                descriptionList.setAttribute("isLastChild", "");
            }
        });
    }
    updated(_changedProperties) {
        if (_changedProperties.has("stacked")) {
            this._updateDescriptionLists();
        }
        if (_changedProperties.has("bordered")) {
            this._updateDescriptionLists();
        }
    }
    render() {
        const hasTitleSlot = this.hasSlotController.test("title");
        const hasDescriptionSlot = this.hasSlotController.test("description");
        return html `
      <div class="container" part="base">
        ${hasTitleSlot || hasDescriptionSlot
            ? html `
              <div class="header">
                ${hasTitleSlot
                ? html ` <div class="title">
                      <slot name="title"></slot>
                    </div>`
                : nothing}
                ${hasDescriptionSlot
                ? html `
                      <div class="description">
                        <slot name="description"></slot>
                      </div>
                    `
                : nothing}
              </div>
            `
            : nothing}
        <div>
          <slot></slot>
        </div>
      </div>
    `;
    }
}
SgdsDescriptionListGroup.styles = [...SgdsElement.styles, css_248z];
__decorate([
    property({ type: Boolean, reflect: true })
], SgdsDescriptionListGroup.prototype, "bordered", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], SgdsDescriptionListGroup.prototype, "stacked", void 0);
__decorate([
    queryAssignedElements({ flatten: true })
], SgdsDescriptionListGroup.prototype, "_descriptionLists", void 0);

export { SgdsDescriptionListGroup, SgdsDescriptionListGroup as default };
//# sourceMappingURL=sgds-description-list-group.js.map
