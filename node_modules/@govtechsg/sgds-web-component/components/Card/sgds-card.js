import { __decorate } from 'tslib';
import { literal, html } from 'lit/static-html.js';
import { query, queryAssignedNodes, property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { CardElement } from '../../base/card-element.js';
import css_248z from './card.js';

/**
 * @summary Cards can be used for headers and footers, a wide variety of content, contain contextual background colors and images.
 * @slot image - Accepts an image or svg element of the card. Only a single element is allowed to be passed in.
 * @slot icon - Accepts an icon element to visually represent the card. Only a single element is allowed to be passed in.
 * @slot subtitle - The subtitle of the card
 * @slot title - The title of the card
 * @slot description - The paragrapher text of the card
 * @slot link - Accepts an anchor element. Only a single element is allowed to be passed in.
 */
class SgdsCard extends CardElement {
    constructor() {
        super(...arguments);
        /** Extends the link passed in slot[name="link"] to the entire card */
        this.stretchedLink = false;
        /** Disables the card  */
        this.disabled = false;
        /** Sets the orientation of the card. Available options: `vertical`, `horizontal` */
        this.orientation = "vertical";
        /** Sets the image position of the card. Available options: `before`, `after` */
        this.imagePosition = "before";
        /** Controls how the image is sized and aligned within the card. Available options: `default`, `padding around`, `aspect ratio` */
        this.imageAdjustment = "default";
    }
    firstUpdated() {
        if (this._imageNode.length === 0) {
            const icon = this.shadowRoot.querySelector(".card-image");
            icon.style.display = "none";
        }
        if (this._iconNode.length === 0) {
            const icon = this.shadowRoot.querySelector(".card-icon");
            icon.style.display = "none";
        }
        if (this.disabled && this._linkNode.length > 0) {
            const hyperlink = this._linkNode[0].querySelector("a");
            hyperlink.setAttribute("disabled", "true");
            hyperlink.removeAttribute("href");
        }
    }
    handleTitleSlotChange(e) {
        const childNodes = e.target.assignedNodes({ flatten: true });
        if (this.stretchedLink && childNodes[0] instanceof HTMLAnchorElement) {
            const hyperlink = childNodes[0].querySelector("a") || childNodes[0];
            hyperlink.removeAttribute("href");
        }
        return;
    }
    handleLinkSlotChange(e) {
        const childNodes = e.target.assignedNodes({ flatten: true });
        if (childNodes.length > 1) {
            return console.error("Multiple elements passed into SgdsCard's link slot");
        }
        if (this.stretchedLink && childNodes[0] instanceof HTMLAnchorElement) {
            const hyperlink = childNodes[0].querySelector("a") || childNodes[0];
            this.card.setAttribute("href", hyperlink.href);
            const linkSlot = this.shadowRoot.querySelector("slot[name='link']");
            linkSlot.style.display = "none";
        }
        return;
    }
    handleImgSlotChange(e) {
        const childNodes = e.target.assignedNodes({ flatten: true });
        if (childNodes.length > 1) {
            return console.error("Multiple elements passed into SgdsCard's image slot");
        }
    }
    render() {
        const tag = this.stretchedLink ? literal `a` : literal `div`;
        const cardTabIndex = !this.stretchedLink || this.disabled ? -1 : 0;
        return html `
      <${tag} 
        class="card ${classMap({
            disabled: this.disabled
        })}"
        tabindex=${cardTabIndex}
      >
        <div class="card-image">
          <slot name="image" @slotchange=${this.handleImgSlotChange}></slot>
        </div>
        <div class="card-icon">
          <slot name="icon"></slot>
        </div>
        <div class="card-body">
          <div class="card-header">
            <slot name="subtitle"></slot>
            <h3 class="card-title"><slot name="title" @slotchange=${this.handleTitleSlotChange}></slot></h3>
          </div>
          <p class="card-text">
            <slot name="description"></slot>
          </p>
          <slot name="link" @slotchange=${this.handleLinkSlotChange}></slot>
        </div>
      </${tag}>
    `;
    }
}
SgdsCard.styles = [...CardElement.styles, css_248z];
__decorate([
    query("a.card")
], SgdsCard.prototype, "card", void 0);
__decorate([
    queryAssignedNodes({ slot: "image", flatten: true })
], SgdsCard.prototype, "_imageNode", void 0);
__decorate([
    queryAssignedNodes({ slot: "icon", flatten: true })
], SgdsCard.prototype, "_iconNode", void 0);
__decorate([
    queryAssignedNodes({ slot: "link", flatten: true })
], SgdsCard.prototype, "_linkNode", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], SgdsCard.prototype, "stretchedLink", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], SgdsCard.prototype, "disabled", void 0);
__decorate([
    property({ type: String, reflect: true })
], SgdsCard.prototype, "orientation", void 0);
__decorate([
    property({ type: String, reflect: true })
], SgdsCard.prototype, "imagePosition", void 0);
__decorate([
    property({ type: String, reflect: true })
], SgdsCard.prototype, "imageAdjustment", void 0);

export { SgdsCard, SgdsCard as default };
//# sourceMappingURL=sgds-card.js.map
