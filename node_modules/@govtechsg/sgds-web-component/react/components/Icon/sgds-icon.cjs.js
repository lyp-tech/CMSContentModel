'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var sgdsElement = require('../../base/sgds-element.cjs.js');
var staticHtml_js = require('lit/static-html.js');
var decorators_js = require('lit/decorators.js');
var unsafeSvg_js = require('lit/directives/unsafe-svg.js');
var icon = require('./icon.cjs.js');

/**
 * @summary Icons offer a form of visual shorthand that we are all familiar with. They can label, inform and aid navigation quickly and effectively in minimal space. Icons must first and foremost communicate meaning. By default, the icon component renders icons from `SgdsIcon` library set
 */
class SgdsIcon extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        /** Specifies a small, medium or large icon, the size is medium by default. */
        this.size = "lg";
        /** @internal */
        this._svgContent = null;
    }
    async updated(changedProperties) {
        if (changedProperties.has("name")) {
            await this._loadSvg(this.name);
        }
    }
    async _loadSvg(name) {
        if (name) {
            const pascalName = name
                .split("-")
                .map(name => String(name).charAt(0).toUpperCase() + String(name).slice(1))
                .join("");
            try {
                const iconRegistry = await Promise.resolve().then(function () { return require('./icon-registry.cjs.js'); });
                const svg = iconRegistry[pascalName];
                if (svg) {
                    this._svgContent = svg;
                }
                else {
                    throw new Error("icon `name` not found");
                }
            }
            catch (error) {
                console.error(`Unable to load icon: ${name}.`, error);
            }
        }
    }
    render() {
        return staticHtml_js.html `${unsafeSvg_js.unsafeSVG(this._svgContent)}`;
    }
}
SgdsIcon.styles = [...sgdsElement["default"].styles, icon["default"]];
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsIcon.prototype, "name", void 0);
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsIcon.prototype, "size", void 0);
tslib.__decorate([
    decorators_js.state()
], SgdsIcon.prototype, "_svgContent", void 0);

exports.SgdsIcon = SgdsIcon;
exports["default"] = SgdsIcon;
//# sourceMappingURL=sgds-icon.cjs.js.map
