'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var lit = require('lit');
var decorators_js = require('lit/decorators.js');
var classMap_js = require('lit/directives/class-map.js');
var sgdsElement = require('../../base/sgds-element.cjs.js');
var skeleton = require('./skeleton.cjs.js');

/**
 * @summary A skeleton is a low-fidelity visual placeholder that represents the loading of interface elements
 * before they have displayed on the page.
 */
class SgdsSkeleton extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        /** Sets the width of skeleton. Pass value in string with length units like pixels or percentage. */
        this.width = "";
        /** Sets the height of skeleton. Pass value in string with length units like pixels or percentage. */
        this.height = "";
        /** Sets the border radius of skeleton. Pass value in string with length units like pixels and percentage
         * When `row` is defined, the borderRadius is forwarded down to the border radius of each skeleton row */
        this.borderRadius = "";
        /** Adds a sheening animated effect to the skeleton  */
        this.sheen = false;
    }
    firstUpdated() {
        this.width ? (this.skeleton.style.width = this.width) : null;
        this.height ? (this.skeleton.style.height = this.height) : null;
        this.borderRadius ? (this.skeleton.style.borderRadius = this.borderRadius) : null;
        if (this.rows > 0) {
            const skeletonRows = Array.from(this.skeleton.children);
            skeletonRows.forEach(row => (row.style.borderRadius = this.borderRadius));
        }
    }
    render() {
        return lit.html `
      <div
        class=${classMap_js.classMap({
            skeleton: true,
            "skeleton-paragraph": this.rows > 0,
            "auto-size-rows": this.rows > 0,
            sheen: this.sheen && !this.rows
        })}
      >
        ${this.rows > 0
            ? [...Array(this.rows).keys()].map(n => {
                const classes = { [`skeleton-row-${n}`]: true, sheen: this.sheen };
                return lit.html `<div class=${classMap_js.classMap(classes)}></div>`;
            })
            : lit.nothing}
      </div>
    `;
    }
}
SgdsSkeleton.styles = [skeleton["default"]];
tslib.__decorate([
    decorators_js.query(".skeleton")
], SgdsSkeleton.prototype, "skeleton", void 0);
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsSkeleton.prototype, "width", void 0);
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsSkeleton.prototype, "height", void 0);
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsSkeleton.prototype, "borderRadius", void 0);
tslib.__decorate([
    decorators_js.property({ type: Number, reflect: true })
], SgdsSkeleton.prototype, "rows", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsSkeleton.prototype, "sheen", void 0);
// Accessibility to add to Documentation:
// When user use a template of sgds-skeletons, add one visually hidden span to indicate Loading...
// Loading labels must be unique thats why its not advisible to handle the aria labelling for users inside sgds-skeleton

exports.SgdsSkeleton = SgdsSkeleton;
exports["default"] = SgdsSkeleton;
//# sourceMappingURL=sgds-skeleton.cjs.js.map
