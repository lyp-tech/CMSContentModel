'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var decorators_js = require('lit/decorators.js');
var classMap_js = require('lit/directives/class-map.js');
var ifDefined_js = require('lit/directives/if-defined.js');
var staticHtml_js = require('lit/static-html.js');
var buttonElement = require('../../base/button-element.cjs.js');
var sgdsIcon = require('../Icon/sgds-icon.cjs.js');
var iconButton = require('./icon-button.cjs.js');

/**
 * @summary An icon button is a user interface element that combines an icon and a button, serving as a clickable or tabbable component.
 *
 * @event sgds-blur - Emitted when the button is blurred.
 * @event sgds-focus - Emitted when the button is focused.
 */
class SgdsIconButton extends buttonElement["default"] {
    _assignIconSize(buttonSize) {
        if (buttonSize === "sm")
            return "md";
        if (buttonSize === "md")
            return "lg";
        if (buttonSize === "lg")
            return "xl";
    }
    render() {
        const isLink = this.href;
        const tag = isLink ? staticHtml_js.literal `a` : staticHtml_js.literal `button`;
        return staticHtml_js.html `
          <${tag}
            class="btn btn-icon${classMap_js.classMap({
            disabled: this.disabled,
            active: this.active,
            [`btn-${this.variant}`]: this.variant,
            [`btn-${this.size}`]: this.size
        })}"
            ?disabled=${ifDefined_js.ifDefined(isLink ? undefined : this.disabled)}
            type=${ifDefined_js.ifDefined(isLink ? undefined : "button")}
            href=${ifDefined_js.ifDefined(isLink ? this.href : undefined)}
            target=${ifDefined_js.ifDefined(isLink ? this.target : undefined)}
            download=${ifDefined_js.ifDefined(isLink ? this.download : undefined)}
            rel=${ifDefined_js.ifDefined(isLink && this.target === "_blank" ? "noreferrer noopener" : undefined)}
            role=${ifDefined_js.ifDefined(isLink ? "button" : undefined)}
            aria-disabled=${this.disabled ? "true" : "false"}
            tabindex=${this.disabled ? "-1" : "0"}
            @click=${this._handleClick}
            @focus=${this._handleFocus}
            @blur=${this._handleBlur}
            aria-label=${ifDefined_js.ifDefined(this.ariaLabel)}
          >
            <sgds-icon name=${ifDefined_js.ifDefined(this.name)} size=${ifDefined_js.ifDefined(this._assignIconSize(this.size))}></sgds-icon>
          </${tag}>
        `;
    }
}
SgdsIconButton.styles = [...buttonElement["default"].styles, iconButton["default"]];
/** @internal */
SgdsIconButton.dependencies = {
    "sgds-icon": sgdsIcon.SgdsIcon
};
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsIconButton.prototype, "name", void 0);

exports.SgdsIconButton = SgdsIconButton;
exports["default"] = SgdsIconButton;
//# sourceMappingURL=sgds-icon-button.cjs.js.map
