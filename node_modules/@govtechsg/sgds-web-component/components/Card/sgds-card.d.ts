import { CardElement } from "../../base/card-element";
export type CardImageAdjustment = "default" | "padding around" | "aspect ratio";
export type CardImagePosition = "before" | "after";
export type CardOrientation = "vertical" | "horizontal";
/**
 * @summary Cards can be used for headers and footers, a wide variety of content, contain contextual background colors and images.
 * @slot image - Accepts an image or svg element of the card. Only a single element is allowed to be passed in.
 * @slot icon - Accepts an icon element to visually represent the card. Only a single element is allowed to be passed in.
 * @slot subtitle - The subtitle of the card
 * @slot title - The title of the card
 * @slot description - The paragrapher text of the card
 * @slot link - Accepts an anchor element. Only a single element is allowed to be passed in.
 */
export declare class SgdsCard extends CardElement {
    static styles: import("lit").CSSResult[];
    /** @internal */
    card: HTMLAnchorElement;
    /** @internal */
    _imageNode: Array<Node>;
    /** @internal */
    _iconNode: Array<Node>;
    /** @internal */
    _linkNode: Array<Node>;
    /** Extends the link passed in slot[name="link"] to the entire card */
    stretchedLink: boolean;
    /** Disables the card  */
    disabled: boolean;
    /** Sets the orientation of the card. Available options: `vertical`, `horizontal` */
    orientation: CardOrientation;
    /** Sets the image position of the card. Available options: `before`, `after` */
    imagePosition: CardImagePosition;
    /** Controls how the image is sized and aligned within the card. Available options: `default`, `padding around`, `aspect ratio` */
    imageAdjustment: CardImageAdjustment;
    protected firstUpdated(): void;
    handleTitleSlotChange(e: Event): void;
    handleLinkSlotChange(e: Event): void;
    handleImgSlotChange(e: Event): void;
    render(): import("lit-html").TemplateResult;
}
export default SgdsCard;
