import { __decorate } from 'tslib';
import { property } from 'lit/decorators.js';
import { html } from 'lit/static-html.js';
import { classMap } from 'lit/directives/class-map.js';
import SgdsElement from '../../base/sgds-element.js';
import css_248z$1 from './spinner.js';
import css_248z from '../../styles/text-variants.js';
import { nothing } from 'lit';

/**
 * @summary Spinners notify the users that their request is being processed.
 *
 */
class SgdsSpinner extends SgdsElement {
    constructor() {
        super(...arguments);
        /** The variant of spinner */
        this.variant = "primary";
        /** Specifies a small, medium or large button, the size is medium by default. */
        this.size = "md";
    }
    render() {
        return html `
      <div class="spinner-wrapper">
        <div
          class="spinner ${classMap({
            [`spinner-${this.size}`]: this.size
        })}"
          role="status"
        >
          ${this.label ? nothing : html `<span class="sr-only">Loading...</span>`}
        </div>
        ${this.label ? html `<span class="spinner-label">${this.label}</span>` : nothing}
      </div>
    `;
    }
}
SgdsSpinner.styles = [...SgdsElement.styles, css_248z, css_248z$1];
__decorate([
    property({ type: String, reflect: true })
], SgdsSpinner.prototype, "variant", void 0);
__decorate([
    property({ reflect: true })
], SgdsSpinner.prototype, "size", void 0);
__decorate([
    property({ reflect: true, type: String })
], SgdsSpinner.prototype, "label", void 0);

export { SgdsSpinner, SgdsSpinner as default };
//# sourceMappingURL=sgds-spinner.js.map
