import type { StrictModifiers } from "@popperjs/core";
import * as Popper from "@popperjs/core";
import type { Dropdown as BsDropdown } from "bootstrap";
import { Ref } from "lit/directives/ref.js";
import SgdsElement from "./sgds-element";
export type DropDirection = "left" | "right" | "up" | "down";
/**
 * @event sgds-show - Emitted event when show instance is called
 * @event sgds-after-show - Emitted event when dropdown has been made visible to the user and CSS transitions have completed
 * @event sgds-hide - Emitted event when hide instance is called
 * @event sgds-after-hide - Emitted event when dropdown has hidden to the user and CSS transitions have completed
 */
export declare class DropdownElement extends SgdsElement {
    /** @internal */
    protected myDropdown: Ref<HTMLElement>;
    /** @internal */
    protected bsDropdown: BsDropdown;
    /** @internal Unique id generated for the dropdown menu */
    protected dropdownMenuId: string;
    /** @internal Controls auto-flipping of menu */
    protected noFlip: boolean;
    /** @internal When true, aligns right edge of menu with right edge of button */
    protected menuAlignRight: boolean;
    /** @internal The drop position of menu relative to the toggle button */
    protected drop: DropDirection;
    /**  Additional configuration to pass to Popper.js. See https://popper.js.org/ for config opts */
    popperOpts: {};
    /** @internal */
    dropdownConfig: Partial<Popper.Options>;
    /** @internal */
    protected modifierOpt: StrictModifiers[];
    /** When true, dropdown menu shows on first load */
    menuIsOpen: boolean;
    /** Controls the close behaviour of dropdown menu. By default menu auto-closes when SgdsDropdownItem or area outside dropdown is clicked */
    protected close: "outside" | "default" | "inside";
    /** Disables the dropdown toggle */
    disabled: boolean;
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): void;
    /** When invoked, opens the dropdown menu */
    showMenu(): void;
    /** When invoked, hides the dropdown menu */
    hideMenu(): void;
    toggleMenu(): void;
    protected _handleKeyboardMenuEvent(e: KeyboardEvent): void;
    private _handleClickOutOfElement;
}
