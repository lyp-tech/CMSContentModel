(function (factory) {
  typeof define === 'function' && define.amd ? define(factory) :
  factory();
})((function () { 'use strict';

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }

  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  /**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  const NODE_MODE$1 = false;
  // Allows minifiers to rename references to globalThis
  const global$4 = globalThis;
  /**
   * Whether the current browser supports `adoptedStyleSheets`.
   */
  const supportsAdoptingStyleSheets$1 = global$4.ShadowRoot &&
      (global$4.ShadyCSS === undefined || global$4.ShadyCSS.nativeShadow) &&
      'adoptedStyleSheets' in Document.prototype &&
      'replace' in CSSStyleSheet.prototype;
  const constructionToken$1 = Symbol();
  const cssTagCache$1 = new WeakMap();
  /**
   * A container for a string of CSS text, that may be used to create a CSSStyleSheet.
   *
   * CSSResult is the return value of `css`-tagged template literals and
   * `unsafeCSS()`. In order to ensure that CSSResults are only created via the
   * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.
   */
  class CSSResult$1 {
      constructor(cssText, strings, safeToken) {
          // This property needs to remain unminified.
          this['_$cssResult$'] = true;
          if (safeToken !== constructionToken$1) {
              throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
          }
          this.cssText = cssText;
          this._strings = strings;
      }
      // This is a getter so that it's lazy. In practice, this means stylesheets
      // are not created until the first element instance is made.
      get styleSheet() {
          // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is
          // constructable.
          let styleSheet = this._styleSheet;
          const strings = this._strings;
          if (supportsAdoptingStyleSheets$1 && styleSheet === undefined) {
              const cacheable = strings !== undefined && strings.length === 1;
              if (cacheable) {
                  styleSheet = cssTagCache$1.get(strings);
              }
              if (styleSheet === undefined) {
                  (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
                  if (cacheable) {
                      cssTagCache$1.set(strings, styleSheet);
                  }
              }
          }
          return styleSheet;
      }
      toString() {
          return this.cssText;
      }
  }
  /**
   * Wrap a value for interpolation in a {@linkcode css} tagged template literal.
   *
   * This is unsafe because untrusted CSS text can be used to phone home
   * or exfiltrate data to an attacker controlled site. Take care to only use
   * this with trusted input.
   */
  const unsafeCSS$1 = (value) => new CSSResult$1(typeof value === 'string' ? value : String(value), undefined, constructionToken$1);
  /**
   * Applies the given styles to a `shadowRoot`. When Shadow DOM is
   * available but `adoptedStyleSheets` is not, styles are appended to the
   * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
   * Note, when shimming is used, any styles that are subsequently placed into
   * the shadowRoot should be placed *before* any shimmed adopted styles. This
   * will match spec behavior that gives adopted sheets precedence over styles in
   * shadowRoot.
   */
  const adoptStyles$1 = (renderRoot, styles) => {
      if (supportsAdoptingStyleSheets$1) {
          renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
      }
      else {
          for (const s of styles) {
              const style = document.createElement('style');
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const nonce = global$4['litNonce'];
              if (nonce !== undefined) {
                  style.setAttribute('nonce', nonce);
              }
              style.textContent = s.cssText;
              renderRoot.appendChild(style);
          }
      }
  };
  const cssResultFromStyleSheet$1 = (sheet) => {
      let cssText = '';
      for (const rule of sheet.cssRules) {
          cssText += rule.cssText;
      }
      return unsafeCSS$1(cssText);
  };
  const getCompatibleStyle$1 = supportsAdoptingStyleSheets$1 ||
      (NODE_MODE$1 )
      ? (s) => s
      : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet$1(s) : s;

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  // TODO (justinfagnani): Add `hasOwn` here when we ship ES2022
  const { is: is$1, defineProperty: defineProperty$1, getOwnPropertyDescriptor: getOwnPropertyDescriptor$1, getOwnPropertyNames: getOwnPropertyNames$1, getOwnPropertySymbols: getOwnPropertySymbols$1, getPrototypeOf: getPrototypeOf$1, } = Object;
  // Lets a minifier replace globalThis references with a minified name
  const global$3 = globalThis;
  let issueWarning$5;
  const trustedTypes$2 = global$3
      .trustedTypes;
  // Temporary workaround for https://crbug.com/993268
  // Currently, any attribute starting with "on" is considered to be a
  // TrustedScript source. Such boolean attributes must be set to the equivalent
  // trusted emptyScript value.
  const emptyStringForBooleanAttribute$1 = trustedTypes$2
      ? trustedTypes$2.emptyScript
      : '';
  const polyfillSupport$3 = global$3.reactiveElementPolyfillSupportDevMode
      ;
  {
      // Ensure warnings are issued only 1x, even if multiple versions of Lit
      // are loaded.
      const issuedWarnings = (global$3.litIssuedWarnings ??=
          new Set());
      // Issue a warning, if we haven't already.
      issueWarning$5 = (code, warning) => {
          warning += ` See https://lit.dev/msg/${code} for more information.`;
          if (!issuedWarnings.has(warning)) {
              console.warn(warning);
              issuedWarnings.add(warning);
          }
      };
      issueWarning$5('dev-mode', `Lit is in dev mode. Not recommended for production!`);
      // Issue polyfill support warning.
      if (global$3.ShadyDOM?.inUse && polyfillSupport$3 === undefined) {
          issueWarning$5('polyfill-support-missing', `Shadow DOM is being polyfilled via \`ShadyDOM\` but ` +
              `the \`polyfill-support\` module has not been loaded.`);
      }
  }
  /**
   * Useful for visualizing and logging insights into what the Lit template system is doing.
   *
   * Compiled out of prod mode builds.
   */
  const debugLogEvent$2 = (event) => {
          const shouldEmit = global$3
              .emitLitDebugLogEvents;
          if (!shouldEmit) {
              return;
          }
          global$3.dispatchEvent(new CustomEvent('lit-debug', {
              detail: event,
          }));
      }
      ;
  /*
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
   * replaced at compile time by the munged name for object[property]. We cannot
   * alias this function, so we have to use a small shim that has the same
   * behavior when not compiling.
   */
  /*@__INLINE__*/
  const JSCompiler_renameProperty$2 = (prop, _obj) => prop;
  const defaultConverter$1 = {
      toAttribute(value, type) {
          switch (type) {
              case Boolean:
                  value = value ? emptyStringForBooleanAttribute$1 : null;
                  break;
              case Object:
              case Array:
                  // if the value is `null` or `undefined` pass this through
                  // to allow removing/no change behavior.
                  value = value == null ? value : JSON.stringify(value);
                  break;
          }
          return value;
      },
      fromAttribute(value, type) {
          let fromValue = value;
          switch (type) {
              case Boolean:
                  fromValue = value !== null;
                  break;
              case Number:
                  fromValue = value === null ? null : Number(value);
                  break;
              case Object:
              case Array:
                  // Do *not* generate exception when invalid JSON is set as elements
                  // don't normally complain on being mis-configured.
                  // TODO(sorvell): Do generate exception in *dev mode*.
                  try {
                      // Assert to adhere to Bazel's "must type assert JSON parse" rule.
                      fromValue = JSON.parse(value);
                  }
                  catch (e) {
                      fromValue = null;
                  }
                  break;
          }
          return fromValue;
      },
  };
  /**
   * Change function that returns true if `value` is different from `oldValue`.
   * This method is used as the default for a property's `hasChanged` function.
   */
  const notEqual$1 = (value, old) => !is$1(value, old);
  const defaultPropertyDeclaration$2 = {
      attribute: true,
      type: String,
      converter: defaultConverter$1,
      reflect: false,
      hasChanged: notEqual$1,
  };
  // Ensure metadata is enabled. TypeScript does not polyfill
  // Symbol.metadata, so we must ensure that it exists.
  Symbol.metadata ??= Symbol('metadata');
  // Map from a class's metadata object to property options
  // Note that we must use nullish-coalescing assignment so that we only use one
  // map even if we load multiple version of this module.
  global$3.litPropertyMetadata ??= new WeakMap();
  /**
   * Base element class which manages element properties and attributes. When
   * properties change, the `update` method is asynchronously called. This method
   * should be supplied by subclasses to render updates as desired.
   * @noInheritDoc
   */
  class ReactiveElement$1
  // In the Node build, this `extends` clause will be substituted with
  // `(globalThis.HTMLElement ?? HTMLElement)`.
  //
  // This way, we will first prefer any global `HTMLElement` polyfill that the
  // user has assigned, and then fall back to the `HTMLElement` shim which has
  // been imported (see note at the top of this file about how this import is
  // generated by Rollup). Note that the `HTMLElement` variable has been
  // shadowed by this import, so it no longer refers to the global.
   extends HTMLElement {
      /**
       * Adds an initializer function to the class that is called during instance
       * construction.
       *
       * This is useful for code that runs against a `ReactiveElement`
       * subclass, such as a decorator, that needs to do work for each
       * instance, such as setting up a `ReactiveController`.
       *
       * ```ts
       * const myDecorator = (target: typeof ReactiveElement, key: string) => {
       *   target.addInitializer((instance: ReactiveElement) => {
       *     // This is run during construction of the element
       *     new MyController(instance);
       *   });
       * }
       * ```
       *
       * Decorating a field will then cause each instance to run an initializer
       * that adds a controller:
       *
       * ```ts
       * class MyElement extends LitElement {
       *   @myDecorator foo;
       * }
       * ```
       *
       * Initializers are stored per-constructor. Adding an initializer to a
       * subclass does not add it to a superclass. Since initializers are run in
       * constructors, initializers will run in order of the class hierarchy,
       * starting with superclasses and progressing to the instance's class.
       *
       * @nocollapse
       */
      static addInitializer(initializer) {
          this.__prepare();
          (this._initializers ??= []).push(initializer);
      }
      /**
       * Returns a list of attributes corresponding to the registered properties.
       * @nocollapse
       * @category attributes
       */
      static get observedAttributes() {
          // Ensure we've created all properties
          this.finalize();
          // this.__attributeToPropertyMap is only undefined after finalize() in
          // ReactiveElement itself. ReactiveElement.observedAttributes is only
          // accessed with ReactiveElement as the receiver when a subclass or mixin
          // calls super.observedAttributes
          return (this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]);
      }
      /**
       * Creates a property accessor on the element prototype if one does not exist
       * and stores a {@linkcode PropertyDeclaration} for the property with the
       * given options. The property setter calls the property's `hasChanged`
       * property option or uses a strict identity check to determine whether or not
       * to request an update.
       *
       * This method may be overridden to customize properties; however,
       * when doing so, it's important to call `super.createProperty` to ensure
       * the property is setup correctly. This method calls
       * `getPropertyDescriptor` internally to get a descriptor to install.
       * To customize what properties do when they are get or set, override
       * `getPropertyDescriptor`. To customize the options for a property,
       * implement `createProperty` like this:
       *
       * ```ts
       * static createProperty(name, options) {
       *   options = Object.assign(options, {myOption: true});
       *   super.createProperty(name, options);
       * }
       * ```
       *
       * @nocollapse
       * @category properties
       */
      static createProperty(name, options = defaultPropertyDeclaration$2) {
          // If this is a state property, force the attribute to false.
          if (options.state) {
              options.attribute = false;
          }
          this.__prepare();
          this.elementProperties.set(name, options);
          if (!options.noAccessor) {
              const key = // Use Symbol.for in dev mode to make it easier to maintain state
                      // when doing HMR.
                      Symbol.for(`${String(name)} (@property() cache)`)
                  ;
              const descriptor = this.getPropertyDescriptor(name, key, options);
              if (descriptor !== undefined) {
                  defineProperty$1(this.prototype, name, descriptor);
              }
          }
      }
      /**
       * Returns a property descriptor to be defined on the given named property.
       * If no descriptor is returned, the property will not become an accessor.
       * For example,
       *
       * ```ts
       * class MyElement extends LitElement {
       *   static getPropertyDescriptor(name, key, options) {
       *     const defaultDescriptor =
       *         super.getPropertyDescriptor(name, key, options);
       *     const setter = defaultDescriptor.set;
       *     return {
       *       get: defaultDescriptor.get,
       *       set(value) {
       *         setter.call(this, value);
       *         // custom action.
       *       },
       *       configurable: true,
       *       enumerable: true
       *     }
       *   }
       * }
       * ```
       *
       * @nocollapse
       * @category properties
       */
      static getPropertyDescriptor(name, key, options) {
          const { get, set } = getOwnPropertyDescriptor$1(this.prototype, name) ?? {
              get() {
                  return this[key];
              },
              set(v) {
                  this[key] = v;
              },
          };
          if (get == null) {
              if ('value' in (getOwnPropertyDescriptor$1(this.prototype, name) ?? {})) {
                  throw new Error(`Field ${JSON.stringify(String(name))} on ` +
                      `${this.name} was declared as a reactive property ` +
                      `but it's actually declared as a value on the prototype. ` +
                      `Usually this is due to using @property or @state on a method.`);
              }
              issueWarning$5('reactive-property-without-getter', `Field ${JSON.stringify(String(name))} on ` +
                  `${this.name} was declared as a reactive property ` +
                  `but it does not have a getter. This will be an error in a ` +
                  `future version of Lit.`);
          }
          return {
              get() {
                  return get?.call(this);
              },
              set(value) {
                  const oldValue = get?.call(this);
                  set.call(this, value);
                  this.requestUpdate(name, oldValue, options);
              },
              configurable: true,
              enumerable: true,
          };
      }
      /**
       * Returns the property options associated with the given property.
       * These options are defined with a `PropertyDeclaration` via the `properties`
       * object or the `@property` decorator and are registered in
       * `createProperty(...)`.
       *
       * Note, this method should be considered "final" and not overridden. To
       * customize the options for a given property, override
       * {@linkcode createProperty}.
       *
       * @nocollapse
       * @final
       * @category properties
       */
      static getPropertyOptions(name) {
          return this.elementProperties.get(name) ?? defaultPropertyDeclaration$2;
      }
      /**
       * Initializes static own properties of the class used in bookkeeping
       * for element properties, initializers, etc.
       *
       * Can be called multiple times by code that needs to ensure these
       * properties exist before using them.
       *
       * This method ensures the superclass is finalized so that inherited
       * property metadata can be copied down.
       * @nocollapse
       */
      static __prepare() {
          if (this.hasOwnProperty(JSCompiler_renameProperty$2('elementProperties'))) {
              // Already prepared
              return;
          }
          // Finalize any superclasses
          const superCtor = getPrototypeOf$1(this);
          superCtor.finalize();
          // Create own set of initializers for this class if any exist on the
          // superclass and copy them down. Note, for a small perf boost, avoid
          // creating initializers unless needed.
          if (superCtor._initializers !== undefined) {
              this._initializers = [...superCtor._initializers];
          }
          // Initialize elementProperties from the superclass
          this.elementProperties = new Map(superCtor.elementProperties);
      }
      /**
       * Finishes setting up the class so that it's ready to be registered
       * as a custom element and instantiated.
       *
       * This method is called by the ReactiveElement.observedAttributes getter.
       * If you override the observedAttributes getter, you must either call
       * super.observedAttributes to trigger finalization, or call finalize()
       * yourself.
       *
       * @nocollapse
       */
      static finalize() {
          if (this.hasOwnProperty(JSCompiler_renameProperty$2('finalized'))) {
              return;
          }
          this.finalized = true;
          this.__prepare();
          // Create properties from the static properties block:
          if (this.hasOwnProperty(JSCompiler_renameProperty$2('properties'))) {
              const props = this.properties;
              const propKeys = [
                  ...getOwnPropertyNames$1(props),
                  ...getOwnPropertySymbols$1(props),
              ];
              for (const p of propKeys) {
                  this.createProperty(p, props[p]);
              }
          }
          // Create properties from standard decorator metadata:
          const metadata = this[Symbol.metadata];
          if (metadata !== null) {
              const properties = litPropertyMetadata.get(metadata);
              if (properties !== undefined) {
                  for (const [p, options] of properties) {
                      this.elementProperties.set(p, options);
                  }
              }
          }
          // Create the attribute-to-property map
          this.__attributeToPropertyMap = new Map();
          for (const [p, options] of this.elementProperties) {
              const attr = this.__attributeNameForProperty(p, options);
              if (attr !== undefined) {
                  this.__attributeToPropertyMap.set(attr, p);
              }
          }
          this.elementStyles = this.finalizeStyles(this.styles);
          {
              if (this.hasOwnProperty('createProperty')) {
                  issueWarning$5('no-override-create-property', 'Overriding ReactiveElement.createProperty() is deprecated. ' +
                      'The override will not be called with standard decorators');
              }
              if (this.hasOwnProperty('getPropertyDescriptor')) {
                  issueWarning$5('no-override-get-property-descriptor', 'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +
                      'The override will not be called with standard decorators');
              }
          }
      }
      /**
       * Takes the styles the user supplied via the `static styles` property and
       * returns the array of styles to apply to the element.
       * Override this method to integrate into a style management system.
       *
       * Styles are deduplicated preserving the _last_ instance in the list. This
       * is a performance optimization to avoid duplicated styles that can occur
       * especially when composing via subclassing. The last item is kept to try
       * to preserve the cascade order with the assumption that it's most important
       * that last added styles override previous styles.
       *
       * @nocollapse
       * @category styles
       */
      static finalizeStyles(styles) {
          const elementStyles = [];
          if (Array.isArray(styles)) {
              // Dedupe the flattened array in reverse order to preserve the last items.
              // Casting to Array<unknown> works around TS error that
              // appears to come from trying to flatten a type CSSResultArray.
              const set = new Set(styles.flat(Infinity).reverse());
              // Then preserve original order by adding the set items in reverse order.
              for (const s of set) {
                  elementStyles.unshift(getCompatibleStyle$1(s));
              }
          }
          else if (styles !== undefined) {
              elementStyles.push(getCompatibleStyle$1(styles));
          }
          return elementStyles;
      }
      /**
       * Returns the property name for the given attribute `name`.
       * @nocollapse
       */
      static __attributeNameForProperty(name, options) {
          const attribute = options.attribute;
          return attribute === false
              ? undefined
              : typeof attribute === 'string'
                  ? attribute
                  : typeof name === 'string'
                      ? name.toLowerCase()
                      : undefined;
      }
      constructor() {
          super();
          this.__instanceProperties = undefined;
          /**
           * True if there is a pending update as a result of calling `requestUpdate()`.
           * Should only be read.
           * @category updates
           */
          this.isUpdatePending = false;
          /**
           * Is set to `true` after the first update. The element code cannot assume
           * that `renderRoot` exists before the element `hasUpdated`.
           * @category updates
           */
          this.hasUpdated = false;
          /**
           * Name of currently reflecting property
           */
          this.__reflectingProperty = null;
          this.__initialize();
      }
      /**
       * Internal only override point for customizing work done when elements
       * are constructed.
       */
      __initialize() {
          this.__updatePromise = new Promise((res) => (this.enableUpdating = res));
          this._$changedProperties = new Map();
          // This enqueues a microtask that ust run before the first update, so it
          // must be called before requestUpdate()
          this.__saveInstanceProperties();
          // ensures first update will be caught by an early access of
          // `updateComplete`
          this.requestUpdate();
          this.constructor._initializers?.forEach((i) => i(this));
      }
      /**
       * Registers a `ReactiveController` to participate in the element's reactive
       * update cycle. The element automatically calls into any registered
       * controllers during its lifecycle callbacks.
       *
       * If the element is connected when `addController()` is called, the
       * controller's `hostConnected()` callback will be immediately called.
       * @category controllers
       */
      addController(controller) {
          (this.__controllers ??= new Set()).add(controller);
          // If a controller is added after the element has been connected,
          // call hostConnected. Note, re-using existence of `renderRoot` here
          // (which is set in connectedCallback) to avoid the need to track a
          // first connected state.
          if (this.renderRoot !== undefined && this.isConnected) {
              controller.hostConnected?.();
          }
      }
      /**
       * Removes a `ReactiveController` from the element.
       * @category controllers
       */
      removeController(controller) {
          this.__controllers?.delete(controller);
      }
      /**
       * Fixes any properties set on the instance before upgrade time.
       * Otherwise these would shadow the accessor and break these properties.
       * The properties are stored in a Map which is played back after the
       * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
       * (<=41), properties created for native platform properties like (`id` or
       * `name`) may not have default values set in the element constructor. On
       * these browsers native properties appear on instances and therefore their
       * default value will overwrite any element default (e.g. if the element sets
       * this.id = 'id' in the constructor, the 'id' will become '' since this is
       * the native platform default).
       */
      __saveInstanceProperties() {
          const instanceProperties = new Map();
          const elementProperties = this.constructor
              .elementProperties;
          for (const p of elementProperties.keys()) {
              if (this.hasOwnProperty(p)) {
                  instanceProperties.set(p, this[p]);
                  delete this[p];
              }
          }
          if (instanceProperties.size > 0) {
              this.__instanceProperties = instanceProperties;
          }
      }
      /**
       * Returns the node into which the element should render and by default
       * creates and returns an open shadowRoot. Implement to customize where the
       * element's DOM is rendered. For example, to render into the element's
       * childNodes, return `this`.
       *
       * @return Returns a node into which to render.
       * @category rendering
       */
      createRenderRoot() {
          const renderRoot = this.shadowRoot ??
              this.attachShadow(this.constructor.shadowRootOptions);
          adoptStyles$1(renderRoot, this.constructor.elementStyles);
          return renderRoot;
      }
      /**
       * On first connection, creates the element's renderRoot, sets up
       * element styling, and enables updating.
       * @category lifecycle
       */
      connectedCallback() {
          // Create renderRoot before controllers `hostConnected`
          this.renderRoot ??=
              this.createRenderRoot();
          this.enableUpdating(true);
          this.__controllers?.forEach((c) => c.hostConnected?.());
      }
      /**
       * Note, this method should be considered final and not overridden. It is
       * overridden on the element instance with a function that triggers the first
       * update.
       * @category updates
       */
      enableUpdating(_requestedUpdate) { }
      /**
       * Allows for `super.disconnectedCallback()` in extensions while
       * reserving the possibility of making non-breaking feature additions
       * when disconnecting at some point in the future.
       * @category lifecycle
       */
      disconnectedCallback() {
          this.__controllers?.forEach((c) => c.hostDisconnected?.());
      }
      /**
       * Synchronizes property values when attributes change.
       *
       * Specifically, when an attribute is set, the corresponding property is set.
       * You should rarely need to implement this callback. If this method is
       * overridden, `super.attributeChangedCallback(name, _old, value)` must be
       * called.
       *
       * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
       * on MDN for more information about the `attributeChangedCallback`.
       * @category attributes
       */
      attributeChangedCallback(name, _old, value) {
          this._$attributeToProperty(name, value);
      }
      __propertyToAttribute(name, value) {
          const elemProperties = this.constructor.elementProperties;
          const options = elemProperties.get(name);
          const attr = this.constructor.__attributeNameForProperty(name, options);
          if (attr !== undefined && options.reflect === true) {
              const converter = options.converter?.toAttribute !==
                  undefined
                  ? options.converter
                  : defaultConverter$1;
              const attrValue = converter.toAttribute(value, options.type);
              if (this.constructor.enabledWarnings.includes('migration') &&
                  attrValue === undefined) {
                  issueWarning$5('undefined-attribute-value', `The attribute value for the ${name} property is ` +
                      `undefined on element ${this.localName}. The attribute will be ` +
                      `removed, but in the previous version of \`ReactiveElement\`, ` +
                      `the attribute would not have changed.`);
              }
              // Track if the property is being reflected to avoid
              // setting the property again via `attributeChangedCallback`. Note:
              // 1. this takes advantage of the fact that the callback is synchronous.
              // 2. will behave incorrectly if multiple attributes are in the reaction
              // stack at time of calling. However, since we process attributes
              // in `update` this should not be possible (or an extreme corner case
              // that we'd like to discover).
              // mark state reflecting
              this.__reflectingProperty = name;
              if (attrValue == null) {
                  this.removeAttribute(attr);
              }
              else {
                  this.setAttribute(attr, attrValue);
              }
              // mark state not reflecting
              this.__reflectingProperty = null;
          }
      }
      /** @internal */
      _$attributeToProperty(name, value) {
          const ctor = this.constructor;
          // Note, hint this as an `AttributeMap` so closure clearly understands
          // the type; it has issues with tracking types through statics
          const propName = ctor.__attributeToPropertyMap.get(name);
          // Use tracking info to avoid reflecting a property value to an attribute
          // if it was just set because the attribute changed.
          if (propName !== undefined && this.__reflectingProperty !== propName) {
              const options = ctor.getPropertyOptions(propName);
              const converter = typeof options.converter === 'function'
                  ? { fromAttribute: options.converter }
                  : options.converter?.fromAttribute !== undefined
                      ? options.converter
                      : defaultConverter$1;
              // mark state reflecting
              this.__reflectingProperty = propName;
              this[propName] = converter.fromAttribute(value, options.type
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              );
              // mark state not reflecting
              this.__reflectingProperty = null;
          }
      }
      /**
       * Requests an update which is processed asynchronously. This should be called
       * when an element should update based on some state not triggered by setting
       * a reactive property. In this case, pass no arguments. It should also be
       * called when manually implementing a property setter. In this case, pass the
       * property `name` and `oldValue` to ensure that any configured property
       * options are honored.
       *
       * @param name name of requesting property
       * @param oldValue old value of requesting property
       * @param options property options to use instead of the previously
       *     configured options
       * @category updates
       */
      requestUpdate(name, oldValue, options) {
          // If we have a property key, perform property update steps.
          if (name !== undefined) {
              if (name instanceof Event) {
                  issueWarning$5(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);
              }
              options ??= this.constructor.getPropertyOptions(name);
              const hasChanged = options.hasChanged ?? notEqual$1;
              const newValue = this[name];
              if (hasChanged(newValue, oldValue)) {
                  this._$changeProperty(name, oldValue, options);
              }
              else {
                  // Abort the request if the property should not be considered changed.
                  return;
              }
          }
          if (this.isUpdatePending === false) {
              this.__updatePromise = this.__enqueueUpdate();
          }
      }
      /**
       * @internal
       */
      _$changeProperty(name, oldValue, options) {
          // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(
          // vs just Map.set()
          if (!this._$changedProperties.has(name)) {
              this._$changedProperties.set(name, oldValue);
          }
          // Add to reflecting properties set.
          // Note, it's important that every change has a chance to add the
          // property to `__reflectingProperties`. This ensures setting
          // attribute + property reflects correctly.
          if (options.reflect === true && this.__reflectingProperty !== name) {
              (this.__reflectingProperties ??= new Set()).add(name);
          }
      }
      /**
       * Sets up the element to asynchronously update.
       */
      async __enqueueUpdate() {
          this.isUpdatePending = true;
          try {
              // Ensure any previous update has resolved before updating.
              // This `await` also ensures that property changes are batched.
              await this.__updatePromise;
          }
          catch (e) {
              // Refire any previous errors async so they do not disrupt the update
              // cycle. Errors are refired so developers have a chance to observe
              // them, and this can be done by implementing
              // `window.onunhandledrejection`.
              Promise.reject(e);
          }
          const result = this.scheduleUpdate();
          // If `scheduleUpdate` returns a Promise, we await it. This is done to
          // enable coordinating updates with a scheduler. Note, the result is
          // checked to avoid delaying an additional microtask unless we need to.
          if (result != null) {
              await result;
          }
          return !this.isUpdatePending;
      }
      /**
       * Schedules an element update. You can override this method to change the
       * timing of updates by returning a Promise. The update will await the
       * returned Promise, and you should resolve the Promise to allow the update
       * to proceed. If this method is overridden, `super.scheduleUpdate()`
       * must be called.
       *
       * For instance, to schedule updates to occur just before the next frame:
       *
       * ```ts
       * override protected async scheduleUpdate(): Promise<unknown> {
       *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
       *   super.scheduleUpdate();
       * }
       * ```
       * @category updates
       */
      scheduleUpdate() {
          const result = this.performUpdate();
          if (this.constructor.enabledWarnings.includes('async-perform-update') &&
              typeof result?.then ===
                  'function') {
              issueWarning$5('async-perform-update', `Element ${this.localName} returned a Promise from performUpdate(). ` +
                  `This behavior is deprecated and will be removed in a future ` +
                  `version of ReactiveElement.`);
          }
          return result;
      }
      /**
       * Performs an element update. Note, if an exception is thrown during the
       * update, `firstUpdated` and `updated` will not be called.
       *
       * Call `performUpdate()` to immediately process a pending update. This should
       * generally not be needed, but it can be done in rare cases when you need to
       * update synchronously.
       *
       * @category updates
       */
      performUpdate() {
          // Abort any update if one is not pending when this is called.
          // This can happen if `performUpdate` is called early to "flush"
          // the update.
          if (!this.isUpdatePending) {
              return;
          }
          debugLogEvent$2?.({ kind: 'update' });
          if (!this.hasUpdated) {
              // Create renderRoot before first update. This occurs in `connectedCallback`
              // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.
              this.renderRoot ??=
                  this.createRenderRoot();
              {
                  // Produce warning if any reactive properties on the prototype are
                  // shadowed by class fields. Instance fields set before upgrade are
                  // deleted by this point, so any own property is caused by class field
                  // initialization in the constructor.
                  const ctor = this.constructor;
                  const shadowedProperties = [...ctor.elementProperties.keys()].filter((p) => this.hasOwnProperty(p) && p in getPrototypeOf$1(this));
                  if (shadowedProperties.length) {
                      throw new Error(`The following properties on element ${this.localName} will not ` +
                          `trigger updates as expected because they are set using class ` +
                          `fields: ${shadowedProperties.join(', ')}. ` +
                          `Native class fields and some compiled output will overwrite ` +
                          `accessors used for detecting changes. See ` +
                          `https://lit.dev/msg/class-field-shadowing ` +
                          `for more information.`);
                  }
              }
              // Mixin instance properties once, if they exist.
              if (this.__instanceProperties) {
                  // TODO (justinfagnani): should we use the stored value? Could a new value
                  // have been set since we stored the own property value?
                  for (const [p, value] of this.__instanceProperties) {
                      this[p] = value;
                  }
                  this.__instanceProperties = undefined;
              }
              // Trigger initial value reflection and populate the initial
              // changedProperties map, but only for the case of experimental
              // decorators on accessors, which will not have already populated the
              // changedProperties map. We can't know if these accessors had
              // initializers, so we just set them anyway - a difference from
              // experimental decorators on fields and standard decorators on
              // auto-accessors.
              // For context why experimentalDecorators with auto accessors are handled
              // specifically also see:
              // https://github.com/lit/lit/pull/4183#issuecomment-1711959635
              const elementProperties = this.constructor
                  .elementProperties;
              if (elementProperties.size > 0) {
                  for (const [p, options] of elementProperties) {
                      if (options.wrapped === true &&
                          !this._$changedProperties.has(p) &&
                          this[p] !== undefined) {
                          this._$changeProperty(p, this[p], options);
                      }
                  }
              }
          }
          let shouldUpdate = false;
          const changedProperties = this._$changedProperties;
          try {
              shouldUpdate = this.shouldUpdate(changedProperties);
              if (shouldUpdate) {
                  this.willUpdate(changedProperties);
                  this.__controllers?.forEach((c) => c.hostUpdate?.());
                  this.update(changedProperties);
              }
              else {
                  this.__markUpdated();
              }
          }
          catch (e) {
              // Prevent `firstUpdated` and `updated` from running when there's an
              // update exception.
              shouldUpdate = false;
              // Ensure element can accept additional updates after an exception.
              this.__markUpdated();
              throw e;
          }
          // The update is no longer considered pending and further updates are now allowed.
          if (shouldUpdate) {
              this._$didUpdate(changedProperties);
          }
      }
      /**
       * Invoked before `update()` to compute values needed during the update.
       *
       * Implement `willUpdate` to compute property values that depend on other
       * properties and are used in the rest of the update process.
       *
       * ```ts
       * willUpdate(changedProperties) {
       *   // only need to check changed properties for an expensive computation.
       *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
       *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
       *   }
       * }
       *
       * render() {
       *   return html`SHA: ${this.sha}`;
       * }
       * ```
       *
       * @category updates
       */
      willUpdate(_changedProperties) { }
      // Note, this is an override point for polyfill-support.
      // @internal
      _$didUpdate(changedProperties) {
          this.__controllers?.forEach((c) => c.hostUpdated?.());
          if (!this.hasUpdated) {
              this.hasUpdated = true;
              this.firstUpdated(changedProperties);
          }
          this.updated(changedProperties);
          if (this.isUpdatePending &&
              this.constructor.enabledWarnings.includes('change-in-update')) {
              issueWarning$5('change-in-update', `Element ${this.localName} scheduled an update ` +
                  `(generally because a property was set) ` +
                  `after an update completed, causing a new update to be scheduled. ` +
                  `This is inefficient and should be avoided unless the next update ` +
                  `can only be scheduled as a side effect of the previous update.`);
          }
      }
      __markUpdated() {
          this._$changedProperties = new Map();
          this.isUpdatePending = false;
      }
      /**
       * Returns a Promise that resolves when the element has completed updating.
       * The Promise value is a boolean that is `true` if the element completed the
       * update without triggering another update. The Promise result is `false` if
       * a property was set inside `updated()`. If the Promise is rejected, an
       * exception was thrown during the update.
       *
       * To await additional asynchronous work, override the `getUpdateComplete`
       * method. For example, it is sometimes useful to await a rendered element
       * before fulfilling this Promise. To do this, first await
       * `super.getUpdateComplete()`, then any subsequent state.
       *
       * @return A promise of a boolean that resolves to true if the update completed
       *     without triggering another update.
       * @category updates
       */
      get updateComplete() {
          return this.getUpdateComplete();
      }
      /**
       * Override point for the `updateComplete` promise.
       *
       * It is not safe to override the `updateComplete` getter directly due to a
       * limitation in TypeScript which means it is not possible to call a
       * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
       * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
       * This method should be overridden instead. For example:
       *
       * ```ts
       * class MyElement extends LitElement {
       *   override async getUpdateComplete() {
       *     const result = await super.getUpdateComplete();
       *     await this._myChild.updateComplete;
       *     return result;
       *   }
       * }
       * ```
       *
       * @return A promise of a boolean that resolves to true if the update completed
       *     without triggering another update.
       * @category updates
       */
      getUpdateComplete() {
          return this.__updatePromise;
      }
      /**
       * Controls whether or not `update()` should be called when the element requests
       * an update. By default, this method always returns `true`, but this can be
       * customized to control when to update.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      shouldUpdate(_changedProperties) {
          return true;
      }
      /**
       * Updates the element. This method reflects property values to attributes.
       * It can be overridden to render and keep updated element DOM.
       * Setting properties inside this method will *not* trigger
       * another update.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      update(_changedProperties) {
          // The forEach() expression will only run when when __reflectingProperties is
          // defined, and it returns undefined, setting __reflectingProperties to
          // undefined
          this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) => this.__propertyToAttribute(p, this[p]));
          this.__markUpdated();
      }
      /**
       * Invoked whenever the element is updated. Implement to perform
       * post-updating tasks via DOM APIs, for example, focusing an element.
       *
       * Setting properties inside this method will trigger the element to update
       * again after this update cycle completes.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      updated(_changedProperties) { }
      /**
       * Invoked when the element is first updated. Implement to perform one time
       * work on the element after update.
       *
       * ```ts
       * firstUpdated() {
       *   this.renderRoot.getElementById('my-text-area').focus();
       * }
       * ```
       *
       * Setting properties inside this method will trigger the element to update
       * again after this update cycle completes.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      firstUpdated(_changedProperties) { }
  }
  /**
   * Memoized list of all element styles.
   * Created lazily on user subclasses when finalizing the class.
   * @nocollapse
   * @category styles
   */
  ReactiveElement$1.elementStyles = [];
  /**
   * Options used when calling `attachShadow`. Set this property to customize
   * the options for the shadowRoot; for example, to create a closed
   * shadowRoot: `{mode: 'closed'}`.
   *
   * Note, these options are used in `createRenderRoot`. If this method
   * is customized, options should be respected if possible.
   * @nocollapse
   * @category rendering
   */
  ReactiveElement$1.shadowRootOptions = { mode: 'open' };
  // Assigned here to work around a jscompiler bug with static fields
  // when compiling to ES5.
  // https://github.com/google/closure-compiler/issues/3177
  ReactiveElement$1[JSCompiler_renameProperty$2('elementProperties')] = new Map();
  ReactiveElement$1[JSCompiler_renameProperty$2('finalized')] = new Map();
  // Apply polyfills if available
  polyfillSupport$3?.({ ReactiveElement: ReactiveElement$1 });
  // Dev mode warnings...
  {
      // Default warning set.
      ReactiveElement$1.enabledWarnings = [
          'change-in-update',
          'async-perform-update',
      ];
      const ensureOwnWarnings = function (ctor) {
          if (!ctor.hasOwnProperty(JSCompiler_renameProperty$2('enabledWarnings'))) {
              ctor.enabledWarnings = ctor.enabledWarnings.slice();
          }
      };
      ReactiveElement$1.enableWarning = function (warning) {
          ensureOwnWarnings(this);
          if (!this.enabledWarnings.includes(warning)) {
              this.enabledWarnings.push(warning);
          }
      };
      ReactiveElement$1.disableWarning = function (warning) {
          ensureOwnWarnings(this);
          const i = this.enabledWarnings.indexOf(warning);
          if (i >= 0) {
              this.enabledWarnings.splice(i, 1);
          }
      };
  }
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for ReactiveElement usage.
  (global$3.reactiveElementVersions ??= []).push('2.0.4');
  if (global$3.reactiveElementVersions.length > 1) {
      issueWarning$5('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
          `is not recommended.`);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  // Allows minifiers to rename references to globalThis
  const global$2 = globalThis;
  /**
   * Useful for visualizing and logging insights into what the Lit template system is doing.
   *
   * Compiled out of prod mode builds.
   */
  const debugLogEvent$1 = (event) => {
          const shouldEmit = global$2
              .emitLitDebugLogEvents;
          if (!shouldEmit) {
              return;
          }
          global$2.dispatchEvent(new CustomEvent('lit-debug', {
              detail: event,
          }));
      }
      ;
  // Used for connecting beginRender and endRender events when there are nested
  // renders when errors are thrown preventing an endRender event from being
  // called.
  let debugLogRenderId = 0;
  let issueWarning$4;
  {
      global$2.litIssuedWarnings ??= new Set();
      // Issue a warning, if we haven't already.
      issueWarning$4 = (code, warning) => {
          warning += code
              ? ` See https://lit.dev/msg/${code} for more information.`
              : '';
          if (!global$2.litIssuedWarnings.has(warning)) {
              console.warn(warning);
              global$2.litIssuedWarnings.add(warning);
          }
      };
      issueWarning$4('dev-mode', `Lit is in dev mode. Not recommended for production!`);
  }
  const wrap = global$2.ShadyDOM?.inUse &&
      global$2.ShadyDOM?.noPatch === true
      ? global$2.ShadyDOM.wrap
      : (node) => node;
  const trustedTypes$1 = global$2.trustedTypes;
  /**
   * Our TrustedTypePolicy for HTML which is declared using the html template
   * tag function.
   *
   * That HTML is a developer-authored constant, and is parsed with innerHTML
   * before any untrusted expressions have been mixed in. Therefor it is
   * considered safe by construction.
   */
  const policy = trustedTypes$1
      ? trustedTypes$1.createPolicy('lit-html', {
          createHTML: (s) => s,
      })
      : undefined;
  const identityFunction = (value) => value;
  const noopSanitizer = (_node, _name, _type) => identityFunction;
  /** Sets the global sanitizer factory. */
  const setSanitizer = (newSanitizer) => {
      if (sanitizerFactoryInternal !== noopSanitizer) {
          throw new Error(`Attempted to overwrite existing lit-html security policy.` +
              ` setSanitizeDOMValueFactory should be called at most once.`);
      }
      sanitizerFactoryInternal = newSanitizer;
  };
  /**
   * Only used in internal tests, not a part of the public API.
   */
  const _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
      sanitizerFactoryInternal = noopSanitizer;
  };
  const createSanitizer = (node, name, type) => {
      return sanitizerFactoryInternal(node, name, type);
  };
  // Added to an attribute name to mark the attribute as bound so we can find
  // it easily.
  const boundAttributeSuffix = '$lit$';
  // This marker is used in many syntactic positions in HTML, so it must be
  // a valid element name and attribute name. We don't support dynamic names (yet)
  // but this at least ensures that the parse tree is closer to the template
  // intention.
  const marker = `lit$${Math.random().toFixed(9).slice(2)}$`;
  // String used to tell if a comment is a marker comment
  const markerMatch = '?' + marker;
  // Text used to insert a comment marker node. We use processing instruction
  // syntax because it's slightly smaller, but parses as a comment node.
  const nodeMarker = `<${markerMatch}>`;
  const d = document;
  // Creates a dynamic marker. We never have to search for these in the DOM.
  const createMarker = () => d.createComment('');
  const isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');
  const isArray = Array.isArray;
  const isIterable = (value) => isArray(value) ||
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      typeof value?.[Symbol.iterator] === 'function';
  const SPACE_CHAR = `[ \t\n\f\r]`;
  const ATTR_VALUE_CHAR = `[^ \t\n\f\r"'\`<>=]`;
  const NAME_CHAR = `[^\\s"'>=/]`;
  // These regexes represent the five parsing states that we care about in the
  // Template's HTML scanner. They match the *end* of the state they're named
  // after.
  // Depending on the match, we transition to a new state. If there's no match,
  // we stay in the same state.
  // Note that the regexes are stateful. We utilize lastIndex and sync it
  // across the multiple regexes used. In addition to the five regexes below
  // we also dynamically create a regex to find the matching end tags for raw
  // text elements.
  /**
   * End of text is: `<` followed by:
   *   (comment start) or (tag) or (dynamic tag binding)
   */
  const textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
  const COMMENT_START = 1;
  const TAG_NAME = 2;
  const DYNAMIC_TAG_NAME = 3;
  const commentEndRegex = /-->/g;
  /**
   * Comments not started with <!--, like </{, can be ended by a single `>`
   */
  const comment2EndRegex = />/g;
  /**
   * The tagEnd regex matches the end of the "inside an opening" tag syntax
   * position. It either matches a `>`, an attribute-like sequence, or the end
   * of the string after a space (attribute-name position ending).
   *
   * See attributes in the HTML spec:
   * https://www.w3.org/TR/html5/syntax.html#elements-attributes
   *
   * " \t\n\f\r" are HTML space characters:
   * https://infra.spec.whatwg.org/#ascii-whitespace
   *
   * So an attribute is:
   *  * The name: any character except a whitespace character, ("), ('), ">",
   *    "=", or "/". Note: this is different from the HTML spec which also excludes control characters.
   *  * Followed by zero or more space characters
   *  * Followed by "="
   *  * Followed by zero or more space characters
   *  * Followed by:
   *    * Any character except space, ('), ("), "<", ">", "=", (`), or
   *    * (") then any non-("), or
   *    * (') then any non-(')
   */
  const tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, 'g');
  const ENTIRE_MATCH = 0;
  const ATTRIBUTE_NAME = 1;
  const SPACES_AND_EQUALS = 2;
  const QUOTE_CHAR = 3;
  const singleQuoteAttrEndRegex = /'/g;
  const doubleQuoteAttrEndRegex = /"/g;
  /**
   * Matches the raw text elements.
   *
   * Comments are not parsed within raw text elements, so we need to search their
   * text content for marker strings.
   */
  const rawTextElement = /^(?:script|style|textarea|title)$/i;
  /** TemplateResult types */
  const HTML_RESULT$1 = 1;
  const SVG_RESULT$1 = 2;
  const MATHML_RESULT = 3;
  // TemplatePart types
  // IMPORTANT: these must match the values in PartType
  const ATTRIBUTE_PART = 1;
  const CHILD_PART = 2;
  const PROPERTY_PART = 3;
  const BOOLEAN_ATTRIBUTE_PART = 4;
  const EVENT_PART = 5;
  const ELEMENT_PART = 6;
  const COMMENT_PART = 7;
  /**
   * Generates a template literal tag function that returns a TemplateResult with
   * the given result type.
   */
  const tag = (type) => (strings, ...values) => {
      // Warn against templates octal escape sequences
      // We do this here rather than in render so that the warning is closer to the
      // template definition.
      if (strings.some((s) => s === undefined)) {
          console.warn('Some template strings are undefined.\n' +
              'This is probably caused by illegal octal escape sequences.');
      }
      {
          // Import static-html.js results in a circular dependency which g3 doesn't
          // handle. Instead we know that static values must have the field
          // `_$litStatic$`.
          if (values.some((val) => val?.['_$litStatic$'])) {
              issueWarning$4('', `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\n` +
                  `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`);
          }
      }
      return {
          // This property needs to remain unminified.
          ['_$litType$']: type,
          strings,
          values,
      };
  };
  /**
   * Interprets a template literal as an HTML template that can efficiently
   * render to and update a container.
   *
   * ```ts
   * const header = (title: string) => html`<h1>${title}</h1>`;
   * ```
   *
   * The `html` tag returns a description of the DOM to render as a value. It is
   * lazy, meaning no work is done until the template is rendered. When rendering,
   * if a template comes from the same expression as a previously rendered result,
   * it's efficiently updated instead of replaced.
   */
  const html$1 = tag(HTML_RESULT$1);
  /**
   * A sentinel value that signals that a value was handled by a directive and
   * should not be written to the DOM.
   */
  const noChange = Symbol.for('lit-noChange');
  /**
   * A sentinel value that signals a ChildPart to fully clear its content.
   *
   * ```ts
   * const button = html`${
   *  user.isAdmin
   *    ? html`<button>DELETE</button>`
   *    : nothing
   * }`;
   * ```
   *
   * Prefer using `nothing` over other falsy values as it provides a consistent
   * behavior between various expression binding contexts.
   *
   * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the
   * same and render no nodes. In attribute expressions, `nothing` _removes_ the
   * attribute, while `undefined` and `null` will render an empty string. In
   * property expressions `nothing` becomes `undefined`.
   */
  const nothing = Symbol.for('lit-nothing');
  /**
   * The cache of prepared templates, keyed by the tagged TemplateStringsArray
   * and _not_ accounting for the specific template tag used. This means that
   * template tags cannot be dynamic - they must statically be one of html, svg,
   * or attr. This restriction simplifies the cache lookup, which is on the hot
   * path for rendering.
   */
  const templateCache = new WeakMap();
  const walker = d.createTreeWalker(d, 129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */);
  let sanitizerFactoryInternal = noopSanitizer;
  function trustFromTemplateString(tsa, stringFromTSA) {
      // A security check to prevent spoofing of Lit template results.
      // In the future, we may be able to replace this with Array.isTemplateObject,
      // though we might need to make that check inside of the html and svg
      // functions, because precompiled templates don't come in as
      // TemplateStringArray objects.
      if (!isArray(tsa) || !tsa.hasOwnProperty('raw')) {
          let message = 'invalid template strings array';
          {
              message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `
                  .trim()
                  .replace(/\n */g, '\n');
          }
          throw new Error(message);
      }
      return policy !== undefined
          ? policy.createHTML(stringFromTSA)
          : stringFromTSA;
  }
  /**
   * Returns an HTML string for the given TemplateStringsArray and result type
   * (HTML or SVG), along with the case-sensitive bound attribute names in
   * template order. The HTML contains comment markers denoting the `ChildPart`s
   * and suffixes on bound attributes denoting the `AttributeParts`.
   *
   * @param strings template strings array
   * @param type HTML or SVG
   * @return Array containing `[html, attrNames]` (array returned for terseness,
   *     to avoid object fields since this code is shared with non-minified SSR
   *     code)
   */
  const getTemplateHtml = (strings, type) => {
      // Insert makers into the template HTML to represent the position of
      // bindings. The following code scans the template strings to determine the
      // syntactic position of the bindings. They can be in text position, where
      // we insert an HTML comment, attribute value position, where we insert a
      // sentinel string and re-write the attribute name, or inside a tag where
      // we insert the sentinel string.
      const l = strings.length - 1;
      // Stores the case-sensitive bound attribute names in the order of their
      // parts. ElementParts are also reflected in this array as undefined
      // rather than a string, to disambiguate from attribute bindings.
      const attrNames = [];
      let html = type === SVG_RESULT$1 ? '<svg>' : type === MATHML_RESULT ? '<math>' : '';
      // When we're inside a raw text tag (not it's text content), the regex
      // will still be tagRegex so we can find attributes, but will switch to
      // this regex when the tag ends.
      let rawTextEndRegex;
      // The current parsing state, represented as a reference to one of the
      // regexes
      let regex = textEndRegex;
      for (let i = 0; i < l; i++) {
          const s = strings[i];
          // The index of the end of the last attribute name. When this is
          // positive at end of a string, it means we're in an attribute value
          // position and need to rewrite the attribute name.
          // We also use a special value of -2 to indicate that we encountered
          // the end of a string in attribute name position.
          let attrNameEndIndex = -1;
          let attrName;
          let lastIndex = 0;
          let match;
          // The conditions in this loop handle the current parse state, and the
          // assignments to the `regex` variable are the state transitions.
          while (lastIndex < s.length) {
              // Make sure we start searching from where we previously left off
              regex.lastIndex = lastIndex;
              match = regex.exec(s);
              if (match === null) {
                  break;
              }
              lastIndex = regex.lastIndex;
              if (regex === textEndRegex) {
                  if (match[COMMENT_START] === '!--') {
                      regex = commentEndRegex;
                  }
                  else if (match[COMMENT_START] !== undefined) {
                      // We started a weird comment, like </{
                      regex = comment2EndRegex;
                  }
                  else if (match[TAG_NAME] !== undefined) {
                      if (rawTextElement.test(match[TAG_NAME])) {
                          // Record if we encounter a raw-text element. We'll switch to
                          // this regex at the end of the tag.
                          rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');
                      }
                      regex = tagEndRegex;
                  }
                  else if (match[DYNAMIC_TAG_NAME] !== undefined) {
                      {
                          throw new Error('Bindings in tag names are not supported. Please use static templates instead. ' +
                              'See https://lit.dev/docs/templates/expressions/#static-expressions');
                      }
                  }
              }
              else if (regex === tagEndRegex) {
                  if (match[ENTIRE_MATCH] === '>') {
                      // End of a tag. If we had started a raw-text element, use that
                      // regex
                      regex = rawTextEndRegex ?? textEndRegex;
                      // We may be ending an unquoted attribute value, so make sure we
                      // clear any pending attrNameEndIndex
                      attrNameEndIndex = -1;
                  }
                  else if (match[ATTRIBUTE_NAME] === undefined) {
                      // Attribute name position
                      attrNameEndIndex = -2;
                  }
                  else {
                      attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
                      attrName = match[ATTRIBUTE_NAME];
                      regex =
                          match[QUOTE_CHAR] === undefined
                              ? tagEndRegex
                              : match[QUOTE_CHAR] === '"'
                                  ? doubleQuoteAttrEndRegex
                                  : singleQuoteAttrEndRegex;
                  }
              }
              else if (regex === doubleQuoteAttrEndRegex ||
                  regex === singleQuoteAttrEndRegex) {
                  regex = tagEndRegex;
              }
              else if (regex === commentEndRegex || regex === comment2EndRegex) {
                  regex = textEndRegex;
              }
              else {
                  // Not one of the five state regexes, so it must be the dynamically
                  // created raw text regex and we're at the close of that element.
                  regex = tagEndRegex;
                  rawTextEndRegex = undefined;
              }
          }
          {
              // If we have a attrNameEndIndex, which indicates that we should
              // rewrite the attribute name, assert that we're in a valid attribute
              // position - either in a tag, or a quoted attribute value.
              console.assert(attrNameEndIndex === -1 ||
                  regex === tagEndRegex ||
                  regex === singleQuoteAttrEndRegex ||
                  regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');
          }
          // We have four cases:
          //  1. We're in text position, and not in a raw text element
          //     (regex === textEndRegex): insert a comment marker.
          //  2. We have a non-negative attrNameEndIndex which means we need to
          //     rewrite the attribute name to add a bound attribute suffix.
          //  3. We're at the non-first binding in a multi-binding attribute, use a
          //     plain marker.
          //  4. We're somewhere else inside the tag. If we're in attribute name
          //     position (attrNameEndIndex === -2), add a sequential suffix to
          //     generate a unique attribute name.
          // Detect a binding next to self-closing tag end and insert a space to
          // separate the marker from the tag end:
          const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';
          html +=
              regex === textEndRegex
                  ? s + nodeMarker
                  : attrNameEndIndex >= 0
                      ? (attrNames.push(attrName),
                          s.slice(0, attrNameEndIndex) +
                              boundAttributeSuffix +
                              s.slice(attrNameEndIndex)) +
                          marker +
                          end
                      : s + marker + (attrNameEndIndex === -2 ? i : end);
      }
      const htmlResult = html +
          (strings[l] || '<?>') +
          (type === SVG_RESULT$1 ? '</svg>' : type === MATHML_RESULT ? '</math>' : '');
      // Returned as an array for terseness
      return [trustFromTemplateString(strings, htmlResult), attrNames];
  };
  class Template {
      constructor(
      // This property needs to remain unminified.
      { strings, ['_$litType$']: type }, options) {
          this.parts = [];
          let node;
          let nodeIndex = 0;
          let attrNameIndex = 0;
          const partCount = strings.length - 1;
          const parts = this.parts;
          // Create template element
          const [html, attrNames] = getTemplateHtml(strings, type);
          this.el = Template.createElement(html, options);
          walker.currentNode = this.el.content;
          // Re-parent SVG or MathML nodes into template root
          if (type === SVG_RESULT$1 || type === MATHML_RESULT) {
              const wrapper = this.el.content.firstChild;
              wrapper.replaceWith(...wrapper.childNodes);
          }
          // Walk the template to find binding markers and create TemplateParts
          while ((node = walker.nextNode()) !== null && parts.length < partCount) {
              if (node.nodeType === 1) {
                  {
                      const tag = node.localName;
                      // Warn if `textarea` includes an expression and throw if `template`
                      // does since these are not supported. We do this by checking
                      // innerHTML for anything that looks like a marker. This catches
                      // cases like bindings in textarea there markers turn into text nodes.
                      if (/^(?:textarea|template)$/i.test(tag) &&
                          node.innerHTML.includes(marker)) {
                          const m = `Expressions are not supported inside \`${tag}\` ` +
                              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +
                              `information.`;
                          if (tag === 'template') {
                              throw new Error(m);
                          }
                          else
                              issueWarning$4('', m);
                      }
                  }
                  // TODO (justinfagnani): for attempted dynamic tag names, we don't
                  // increment the bindingIndex, and it'll be off by 1 in the element
                  // and off by two after it.
                  if (node.hasAttributes()) {
                      for (const name of node.getAttributeNames()) {
                          if (name.endsWith(boundAttributeSuffix)) {
                              const realName = attrNames[attrNameIndex++];
                              const value = node.getAttribute(name);
                              const statics = value.split(marker);
                              const m = /([.?@])?(.*)/.exec(realName);
                              parts.push({
                                  type: ATTRIBUTE_PART,
                                  index: nodeIndex,
                                  name: m[2],
                                  strings: statics,
                                  ctor: m[1] === '.'
                                      ? PropertyPart
                                      : m[1] === '?'
                                          ? BooleanAttributePart
                                          : m[1] === '@'
                                              ? EventPart
                                              : AttributePart,
                              });
                              node.removeAttribute(name);
                          }
                          else if (name.startsWith(marker)) {
                              parts.push({
                                  type: ELEMENT_PART,
                                  index: nodeIndex,
                              });
                              node.removeAttribute(name);
                          }
                      }
                  }
                  // TODO (justinfagnani): benchmark the regex against testing for each
                  // of the 3 raw text element names.
                  if (rawTextElement.test(node.tagName)) {
                      // For raw text elements we need to split the text content on
                      // markers, create a Text node for each segment, and create
                      // a TemplatePart for each marker.
                      const strings = node.textContent.split(marker);
                      const lastIndex = strings.length - 1;
                      if (lastIndex > 0) {
                          node.textContent = trustedTypes$1
                              ? trustedTypes$1.emptyScript
                              : '';
                          // Generate a new text node for each literal section
                          // These nodes are also used as the markers for node parts
                          // We can't use empty text nodes as markers because they're
                          // normalized when cloning in IE (could simplify when
                          // IE is no longer supported)
                          for (let i = 0; i < lastIndex; i++) {
                              node.append(strings[i], createMarker());
                              // Walk past the marker node we just added
                              walker.nextNode();
                              parts.push({ type: CHILD_PART, index: ++nodeIndex });
                          }
                          // Note because this marker is added after the walker's current
                          // node, it will be walked to in the outer loop (and ignored), so
                          // we don't need to adjust nodeIndex here
                          node.append(strings[lastIndex], createMarker());
                      }
                  }
              }
              else if (node.nodeType === 8) {
                  const data = node.data;
                  if (data === markerMatch) {
                      parts.push({ type: CHILD_PART, index: nodeIndex });
                  }
                  else {
                      let i = -1;
                      while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                          // Comment node has a binding marker inside, make an inactive part
                          // The binding won't work, but subsequent bindings will
                          parts.push({ type: COMMENT_PART, index: nodeIndex });
                          // Move to the end of the match
                          i += marker.length - 1;
                      }
                  }
              }
              nodeIndex++;
          }
          {
              // If there was a duplicate attribute on a tag, then when the tag is
              // parsed into an element the attribute gets de-duplicated. We can detect
              // this mismatch if we haven't precisely consumed every attribute name
              // when preparing the template. This works because `attrNames` is built
              // from the template string and `attrNameIndex` comes from processing the
              // resulting DOM.
              if (attrNames.length !== attrNameIndex) {
                  throw new Error(`Detected duplicate attribute bindings. This occurs if your template ` +
                      `has duplicate attributes on an element tag. For example ` +
                      `"<input ?disabled=\${true} ?disabled=\${false}>" contains a ` +
                      `duplicate "disabled" attribute. The error was detected in ` +
                      `the following template: \n` +
                      '`' +
                      strings.join('${...}') +
                      '`');
              }
          }
          // We could set walker.currentNode to another node here to prevent a memory
          // leak, but every time we prepare a template, we immediately render it
          // and re-use the walker in new TemplateInstance._clone().
          debugLogEvent$1 &&
              debugLogEvent$1({
                  kind: 'template prep',
                  template: this,
                  clonableTemplate: this.el,
                  parts: this.parts,
                  strings,
              });
      }
      // Overridden via `litHtmlPolyfillSupport` to provide platform support.
      /** @nocollapse */
      static createElement(html, _options) {
          const el = d.createElement('template');
          el.innerHTML = html;
          return el;
      }
  }
  function resolveDirective(part, value, parent = part, attributeIndex) {
      // Bail early if the value is explicitly noChange. Note, this means any
      // nested directive is still attached and is not run.
      if (value === noChange) {
          return value;
      }
      let currentDirective = attributeIndex !== undefined
          ? parent.__directives?.[attributeIndex]
          : parent.__directive;
      const nextDirectiveConstructor = isPrimitive(value)
          ? undefined
          : // This property needs to remain unminified.
              value['_$litDirective$'];
      if (currentDirective?.constructor !== nextDirectiveConstructor) {
          // This property needs to remain unminified.
          currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);
          if (nextDirectiveConstructor === undefined) {
              currentDirective = undefined;
          }
          else {
              currentDirective = new nextDirectiveConstructor(part);
              currentDirective._$initialize(part, parent, attributeIndex);
          }
          if (attributeIndex !== undefined) {
              (parent.__directives ??= [])[attributeIndex] =
                  currentDirective;
          }
          else {
              parent.__directive = currentDirective;
          }
      }
      if (currentDirective !== undefined) {
          value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
      }
      return value;
  }
  /**
   * An updateable instance of a Template. Holds references to the Parts used to
   * update the template instance.
   */
  class TemplateInstance {
      constructor(template, parent) {
          this._$parts = [];
          /** @internal */
          this._$disconnectableChildren = undefined;
          this._$template = template;
          this._$parent = parent;
      }
      // Called by ChildPart parentNode getter
      get parentNode() {
          return this._$parent.parentNode;
      }
      // See comment in Disconnectable interface for why this is a getter
      get _$isConnected() {
          return this._$parent._$isConnected;
      }
      // This method is separate from the constructor because we need to return a
      // DocumentFragment and we don't want to hold onto it with an instance field.
      _clone(options) {
          const { el: { content }, parts: parts, } = this._$template;
          const fragment = (options?.creationScope ?? d).importNode(content, true);
          walker.currentNode = fragment;
          let node = walker.nextNode();
          let nodeIndex = 0;
          let partIndex = 0;
          let templatePart = parts[0];
          while (templatePart !== undefined) {
              if (nodeIndex === templatePart.index) {
                  let part;
                  if (templatePart.type === CHILD_PART) {
                      part = new ChildPart(node, node.nextSibling, this, options);
                  }
                  else if (templatePart.type === ATTRIBUTE_PART) {
                      part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
                  }
                  else if (templatePart.type === ELEMENT_PART) {
                      part = new ElementPart(node, this, options);
                  }
                  this._$parts.push(part);
                  templatePart = parts[++partIndex];
              }
              if (nodeIndex !== templatePart?.index) {
                  node = walker.nextNode();
                  nodeIndex++;
              }
          }
          // We need to set the currentNode away from the cloned tree so that we
          // don't hold onto the tree even if the tree is detached and should be
          // freed.
          walker.currentNode = d;
          return fragment;
      }
      _update(values) {
          let i = 0;
          for (const part of this._$parts) {
              if (part !== undefined) {
                  debugLogEvent$1 &&
                      debugLogEvent$1({
                          kind: 'set part',
                          part,
                          value: values[i],
                          valueIndex: i,
                          values,
                          templateInstance: this,
                      });
                  if (part.strings !== undefined) {
                      part._$setValue(values, part, i);
                      // The number of values the part consumes is part.strings.length - 1
                      // since values are in between template spans. We increment i by 1
                      // later in the loop, so increment it by part.strings.length - 2 here
                      i += part.strings.length - 2;
                  }
                  else {
                      part._$setValue(values[i]);
                  }
              }
              i++;
          }
      }
  }
  class ChildPart {
      // See comment in Disconnectable interface for why this is a getter
      get _$isConnected() {
          // ChildParts that are not at the root should always be created with a
          // parent; only RootChildNode's won't, so they return the local isConnected
          // state
          return this._$parent?._$isConnected ?? this.__isConnected;
      }
      constructor(startNode, endNode, parent, options) {
          this.type = CHILD_PART;
          this._$committedValue = nothing;
          // The following fields will be patched onto ChildParts when required by
          // AsyncDirective
          /** @internal */
          this._$disconnectableChildren = undefined;
          this._$startNode = startNode;
          this._$endNode = endNode;
          this._$parent = parent;
          this.options = options;
          // Note __isConnected is only ever accessed on RootParts (i.e. when there is
          // no _$parent); the value on a non-root-part is "don't care", but checking
          // for parent would be more code
          this.__isConnected = options?.isConnected ?? true;
          {
              // Explicitly initialize for consistent class shape.
              this._textSanitizer = undefined;
          }
      }
      /**
       * The parent node into which the part renders its content.
       *
       * A ChildPart's content consists of a range of adjacent child nodes of
       * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
       * `.endNode`).
       *
       * - If both `.startNode` and `.endNode` are non-null, then the part's content
       * consists of all siblings between `.startNode` and `.endNode`, exclusively.
       *
       * - If `.startNode` is non-null but `.endNode` is null, then the part's
       * content consists of all siblings following `.startNode`, up to and
       * including the last child of `.parentNode`. If `.endNode` is non-null, then
       * `.startNode` will always be non-null.
       *
       * - If both `.endNode` and `.startNode` are null, then the part's content
       * consists of all child nodes of `.parentNode`.
       */
      get parentNode() {
          let parentNode = wrap(this._$startNode).parentNode;
          const parent = this._$parent;
          if (parent !== undefined &&
              parentNode?.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */) {
              // If the parentNode is a DocumentFragment, it may be because the DOM is
              // still in the cloned fragment during initial render; if so, get the real
              // parentNode the part will be committed into by asking the parent.
              parentNode = parent.parentNode;
          }
          return parentNode;
      }
      /**
       * The part's leading marker node, if any. See `.parentNode` for more
       * information.
       */
      get startNode() {
          return this._$startNode;
      }
      /**
       * The part's trailing marker node, if any. See `.parentNode` for more
       * information.
       */
      get endNode() {
          return this._$endNode;
      }
      _$setValue(value, directiveParent = this) {
          if (this.parentNode === null) {
              throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
          }
          value = resolveDirective(this, value, directiveParent);
          if (isPrimitive(value)) {
              // Non-rendering child values. It's important that these do not render
              // empty text nodes to avoid issues with preventing default <slot>
              // fallback content.
              if (value === nothing || value == null || value === '') {
                  if (this._$committedValue !== nothing) {
                      debugLogEvent$1 &&
                          debugLogEvent$1({
                              kind: 'commit nothing to child',
                              start: this._$startNode,
                              end: this._$endNode,
                              parent: this._$parent,
                              options: this.options,
                          });
                      this._$clear();
                  }
                  this._$committedValue = nothing;
              }
              else if (value !== this._$committedValue && value !== noChange) {
                  this._commitText(value);
              }
              // This property needs to remain unminified.
          }
          else if (value['_$litType$'] !== undefined) {
              this._commitTemplateResult(value);
          }
          else if (value.nodeType !== undefined) {
              if (this.options?.host === value) {
                  this._commitText(`[probable mistake: rendered a template's host in itself ` +
                      `(commonly caused by writing \${this} in a template]`);
                  console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
                  return;
              }
              this._commitNode(value);
          }
          else if (isIterable(value)) {
              this._commitIterable(value);
          }
          else {
              // Fallback, will render the string representation
              this._commitText(value);
          }
      }
      _insert(node) {
          return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
      }
      _commitNode(value) {
          if (this._$committedValue !== value) {
              this._$clear();
              if (sanitizerFactoryInternal !== noopSanitizer) {
                  const parentNodeName = this._$startNode.parentNode?.nodeName;
                  if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {
                      let message = 'Forbidden';
                      {
                          if (parentNodeName === 'STYLE') {
                              message =
                                  `Lit does not support binding inside style nodes. ` +
                                      `This is a security risk, as style injection attacks can ` +
                                      `exfiltrate data and spoof UIs. ` +
                                      `Consider instead using css\`...\` literals ` +
                                      `to compose styles, and do dynamic styling with ` +
                                      `css custom properties, ::parts, <slot>s, ` +
                                      `and by mutating the DOM rather than stylesheets.`;
                          }
                          else {
                              message =
                                  `Lit does not support binding inside script nodes. ` +
                                      `This is a security risk, as it could allow arbitrary ` +
                                      `code execution.`;
                          }
                      }
                      throw new Error(message);
                  }
              }
              debugLogEvent$1 &&
                  debugLogEvent$1({
                      kind: 'commit node',
                      start: this._$startNode,
                      parent: this._$parent,
                      value: value,
                      options: this.options,
                  });
              this._$committedValue = this._insert(value);
          }
      }
      _commitText(value) {
          // If the committed value is a primitive it means we called _commitText on
          // the previous render, and we know that this._$startNode.nextSibling is a
          // Text node. We can now just replace the text content (.data) of the node.
          if (this._$committedValue !== nothing &&
              isPrimitive(this._$committedValue)) {
              const node = wrap(this._$startNode).nextSibling;
              {
                  if (this._textSanitizer === undefined) {
                      this._textSanitizer = createSanitizer(node, 'data', 'property');
                  }
                  value = this._textSanitizer(value);
              }
              debugLogEvent$1 &&
                  debugLogEvent$1({
                      kind: 'commit text',
                      node,
                      value,
                      options: this.options,
                  });
              node.data = value;
          }
          else {
              {
                  const textNode = d.createTextNode('');
                  this._commitNode(textNode);
                  // When setting text content, for security purposes it matters a lot
                  // what the parent is. For example, <style> and <script> need to be
                  // handled with care, while <span> does not. So first we need to put a
                  // text node into the document, then we can sanitize its content.
                  if (this._textSanitizer === undefined) {
                      this._textSanitizer = createSanitizer(textNode, 'data', 'property');
                  }
                  value = this._textSanitizer(value);
                  debugLogEvent$1 &&
                      debugLogEvent$1({
                          kind: 'commit text',
                          node: textNode,
                          value,
                          options: this.options,
                      });
                  textNode.data = value;
              }
          }
          this._$committedValue = value;
      }
      _commitTemplateResult(result) {
          // This property needs to remain unminified.
          const { values, ['_$litType$']: type } = result;
          // If $litType$ is a number, result is a plain TemplateResult and we get
          // the template from the template cache. If not, result is a
          // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need
          // to create the <template> element the first time we see it.
          const template = typeof type === 'number'
              ? this._$getTemplate(result)
              : (type.el === undefined &&
                  (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)),
                  type);
          if (this._$committedValue?._$template === template) {
              debugLogEvent$1 &&
                  debugLogEvent$1({
                      kind: 'template updating',
                      template,
                      instance: this._$committedValue,
                      parts: this._$committedValue._$parts,
                      options: this.options,
                      values,
                  });
              this._$committedValue._update(values);
          }
          else {
              const instance = new TemplateInstance(template, this);
              const fragment = instance._clone(this.options);
              debugLogEvent$1 &&
                  debugLogEvent$1({
                      kind: 'template instantiated',
                      template,
                      instance,
                      parts: instance._$parts,
                      options: this.options,
                      fragment,
                      values,
                  });
              instance._update(values);
              debugLogEvent$1 &&
                  debugLogEvent$1({
                      kind: 'template instantiated and updated',
                      template,
                      instance,
                      parts: instance._$parts,
                      options: this.options,
                      fragment,
                      values,
                  });
              this._commitNode(fragment);
              this._$committedValue = instance;
          }
      }
      // Overridden via `litHtmlPolyfillSupport` to provide platform support.
      /** @internal */
      _$getTemplate(result) {
          let template = templateCache.get(result.strings);
          if (template === undefined) {
              templateCache.set(result.strings, (template = new Template(result)));
          }
          return template;
      }
      _commitIterable(value) {
          // For an Iterable, we create a new InstancePart per item, then set its
          // value to the item. This is a little bit of overhead for every item in
          // an Iterable, but it lets us recurse easily and efficiently update Arrays
          // of TemplateResults that will be commonly returned from expressions like:
          // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
          // If value is an array, then the previous render was of an
          // iterable and value will contain the ChildParts from the previous
          // render. If value is not an array, clear this part and make a new
          // array for ChildParts.
          if (!isArray(this._$committedValue)) {
              this._$committedValue = [];
              this._$clear();
          }
          // Lets us keep track of how many items we stamped so we can clear leftover
          // items from a previous render
          const itemParts = this._$committedValue;
          let partIndex = 0;
          let itemPart;
          for (const item of value) {
              if (partIndex === itemParts.length) {
                  // If no existing part, create a new one
                  // TODO (justinfagnani): test perf impact of always creating two parts
                  // instead of sharing parts between nodes
                  // https://github.com/lit/lit/issues/1266
                  itemParts.push((itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options)));
              }
              else {
                  // Reuse an existing part
                  itemPart = itemParts[partIndex];
              }
              itemPart._$setValue(item);
              partIndex++;
          }
          if (partIndex < itemParts.length) {
              // itemParts always have end nodes
              this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
              // Truncate the parts array so _value reflects the current state
              itemParts.length = partIndex;
          }
      }
      /**
       * Removes the nodes contained within this Part from the DOM.
       *
       * @param start Start node to clear from, for clearing a subset of the part's
       *     DOM (used when truncating iterables)
       * @param from  When `start` is specified, the index within the iterable from
       *     which ChildParts are being removed, used for disconnecting directives in
       *     those Parts.
       *
       * @internal
       */
      _$clear(start = wrap(this._$startNode).nextSibling, from) {
          this._$notifyConnectionChanged?.(false, true, from);
          while (start && start !== this._$endNode) {
              const n = wrap(start).nextSibling;
              wrap(start).remove();
              start = n;
          }
      }
      /**
       * Implementation of RootPart's `isConnected`. Note that this method
       * should only be called on `RootPart`s (the `ChildPart` returned from a
       * top-level `render()` call). It has no effect on non-root ChildParts.
       * @param isConnected Whether to set
       * @internal
       */
      setConnected(isConnected) {
          if (this._$parent === undefined) {
              this.__isConnected = isConnected;
              this._$notifyConnectionChanged?.(isConnected);
          }
          else {
              throw new Error('part.setConnected() may only be called on a ' +
                  'RootPart returned from render().');
          }
      }
  }
  class AttributePart {
      get tagName() {
          return this.element.tagName;
      }
      // See comment in Disconnectable interface for why this is a getter
      get _$isConnected() {
          return this._$parent._$isConnected;
      }
      constructor(element, name, strings, parent, options) {
          this.type = ATTRIBUTE_PART;
          /** @internal */
          this._$committedValue = nothing;
          /** @internal */
          this._$disconnectableChildren = undefined;
          this.element = element;
          this.name = name;
          this._$parent = parent;
          this.options = options;
          if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {
              this._$committedValue = new Array(strings.length - 1).fill(new String());
              this.strings = strings;
          }
          else {
              this._$committedValue = nothing;
          }
          {
              this._sanitizer = undefined;
          }
      }
      /**
       * Sets the value of this part by resolving the value from possibly multiple
       * values and static strings and committing it to the DOM.
       * If this part is single-valued, `this._strings` will be undefined, and the
       * method will be called with a single value argument. If this part is
       * multi-value, `this._strings` will be defined, and the method is called
       * with the value array of the part's owning TemplateInstance, and an offset
       * into the value array from which the values should be read.
       * This method is overloaded this way to eliminate short-lived array slices
       * of the template instance values, and allow a fast-path for single-valued
       * parts.
       *
       * @param value The part value, or an array of values for multi-valued parts
       * @param valueIndex the index to start reading values from. `undefined` for
       *   single-valued parts
       * @param noCommit causes the part to not commit its value to the DOM. Used
       *   in hydration to prime attribute parts with their first-rendered value,
       *   but not set the attribute, and in SSR to no-op the DOM operation and
       *   capture the value for serialization.
       *
       * @internal
       */
      _$setValue(value, directiveParent = this, valueIndex, noCommit) {
          const strings = this.strings;
          // Whether any of the values has changed, for dirty-checking
          let change = false;
          if (strings === undefined) {
              // Single-value binding case
              value = resolveDirective(this, value, directiveParent, 0);
              change =
                  !isPrimitive(value) ||
                      (value !== this._$committedValue && value !== noChange);
              if (change) {
                  this._$committedValue = value;
              }
          }
          else {
              // Interpolation case
              const values = value;
              value = strings[0];
              let i, v;
              for (i = 0; i < strings.length - 1; i++) {
                  v = resolveDirective(this, values[valueIndex + i], directiveParent, i);
                  if (v === noChange) {
                      // If the user-provided value is `noChange`, use the previous value
                      v = this._$committedValue[i];
                  }
                  change ||=
                      !isPrimitive(v) || v !== this._$committedValue[i];
                  if (v === nothing) {
                      value = nothing;
                  }
                  else if (value !== nothing) {
                      value += (v ?? '') + strings[i + 1];
                  }
                  // We always record each value, even if one is `nothing`, for future
                  // change detection.
                  this._$committedValue[i] = v;
              }
          }
          if (change && !noCommit) {
              this._commitValue(value);
          }
      }
      /** @internal */
      _commitValue(value) {
          if (value === nothing) {
              wrap(this.element).removeAttribute(this.name);
          }
          else {
              {
                  if (this._sanitizer === undefined) {
                      this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');
                  }
                  value = this._sanitizer(value ?? '');
              }
              debugLogEvent$1 &&
                  debugLogEvent$1({
                      kind: 'commit attribute',
                      element: this.element,
                      name: this.name,
                      value,
                      options: this.options,
                  });
              wrap(this.element).setAttribute(this.name, (value ?? ''));
          }
      }
  }
  class PropertyPart extends AttributePart {
      constructor() {
          super(...arguments);
          this.type = PROPERTY_PART;
      }
      /** @internal */
      _commitValue(value) {
          {
              if (this._sanitizer === undefined) {
                  this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');
              }
              value = this._sanitizer(value);
          }
          debugLogEvent$1 &&
              debugLogEvent$1({
                  kind: 'commit property',
                  element: this.element,
                  name: this.name,
                  value,
                  options: this.options,
              });
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this.element[this.name] = value === nothing ? undefined : value;
      }
  }
  class BooleanAttributePart extends AttributePart {
      constructor() {
          super(...arguments);
          this.type = BOOLEAN_ATTRIBUTE_PART;
      }
      /** @internal */
      _commitValue(value) {
          debugLogEvent$1 &&
              debugLogEvent$1({
                  kind: 'commit boolean attribute',
                  element: this.element,
                  name: this.name,
                  value: !!(value && value !== nothing),
                  options: this.options,
              });
          wrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);
      }
  }
  class EventPart extends AttributePart {
      constructor(element, name, strings, parent, options) {
          super(element, name, strings, parent, options);
          this.type = EVENT_PART;
          if (this.strings !== undefined) {
              throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with ` +
                  'invalid content. Event listeners in templates must have exactly ' +
                  'one expression and no surrounding text.');
          }
      }
      // EventPart does not use the base _$setValue/_resolveValue implementation
      // since the dirty checking is more complex
      /** @internal */
      _$setValue(newListener, directiveParent = this) {
          newListener =
              resolveDirective(this, newListener, directiveParent, 0) ?? nothing;
          if (newListener === noChange) {
              return;
          }
          const oldListener = this._$committedValue;
          // If the new value is nothing or any options change we have to remove the
          // part as a listener.
          const shouldRemoveListener = (newListener === nothing && oldListener !== nothing) ||
              newListener.capture !==
                  oldListener.capture ||
              newListener.once !==
                  oldListener.once ||
              newListener.passive !==
                  oldListener.passive;
          // If the new value is not nothing and we removed the listener, we have
          // to add the part as a listener.
          const shouldAddListener = newListener !== nothing &&
              (oldListener === nothing || shouldRemoveListener);
          debugLogEvent$1 &&
              debugLogEvent$1({
                  kind: 'commit event listener',
                  element: this.element,
                  name: this.name,
                  value: newListener,
                  options: this.options,
                  removeListener: shouldRemoveListener,
                  addListener: shouldAddListener,
                  oldListener,
              });
          if (shouldRemoveListener) {
              this.element.removeEventListener(this.name, this, oldListener);
          }
          if (shouldAddListener) {
              // Beware: IE11 and Chrome 41 don't like using the listener as the
              // options object. Figure out how to deal w/ this in IE11 - maybe
              // patch addEventListener?
              this.element.addEventListener(this.name, this, newListener);
          }
          this._$committedValue = newListener;
      }
      handleEvent(event) {
          if (typeof this._$committedValue === 'function') {
              this._$committedValue.call(this.options?.host ?? this.element, event);
          }
          else {
              this._$committedValue.handleEvent(event);
          }
      }
  }
  class ElementPart {
      constructor(element, parent, options) {
          this.element = element;
          this.type = ELEMENT_PART;
          /** @internal */
          this._$disconnectableChildren = undefined;
          this._$parent = parent;
          this.options = options;
      }
      // See comment in Disconnectable interface for why this is a getter
      get _$isConnected() {
          return this._$parent._$isConnected;
      }
      _$setValue(value) {
          debugLogEvent$1 &&
              debugLogEvent$1({
                  kind: 'commit to element binding',
                  element: this.element,
                  value,
                  options: this.options,
              });
          resolveDirective(this, value);
      }
  }
  // Apply polyfills if available
  const polyfillSupport$2 = global$2.litHtmlPolyfillSupportDevMode
      ;
  polyfillSupport$2?.(Template, ChildPart);
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for lit-html usage.
  (global$2.litHtmlVersions ??= []).push('3.2.0');
  if (global$2.litHtmlVersions.length > 1) {
      issueWarning$4('multiple-versions', `Multiple versions of Lit loaded. ` +
          `Loading multiple versions is not recommended.`);
  }
  /**
   * Renders a value, usually a lit-html TemplateResult, to the container.
   *
   * This example renders the text "Hello, Zoe!" inside a paragraph tag, appending
   * it to the container `document.body`.
   *
   * ```js
   * import {html, render} from 'lit';
   *
   * const name = "Zoe";
   * render(html`<p>Hello, ${name}!</p>`, document.body);
   * ```
   *
   * @param value Any [renderable
   *   value](https://lit.dev/docs/templates/expressions/#child-expressions),
   *   typically a {@linkcode TemplateResult} created by evaluating a template tag
   *   like {@linkcode html} or {@linkcode svg}.
   * @param container A DOM container to render to. The first render will append
   *   the rendered value to the container, and subsequent renders will
   *   efficiently update the rendered value if the same result type was
   *   previously rendered there.
   * @param options See {@linkcode RenderOptions} for options documentation.
   * @see
   * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}
   */
  const render = (value, container, options) => {
      if (container == null) {
          // Give a clearer error message than
          //     Uncaught TypeError: Cannot read properties of null (reading
          //     '_$litPart$')
          // which reads like an internal Lit error.
          throw new TypeError(`The container to render into may not be ${container}`);
      }
      const renderId = debugLogRenderId++ ;
      const partOwnerNode = options?.renderBefore ?? container;
      // This property needs to remain unminified.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      let part = partOwnerNode['_$litPart$'];
      debugLogEvent$1 &&
          debugLogEvent$1({
              kind: 'begin render',
              id: renderId,
              value,
              container,
              options,
              part,
          });
      if (part === undefined) {
          const endNode = options?.renderBefore ?? null;
          // This property needs to remain unminified.
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options ?? {});
      }
      part._$setValue(value);
      debugLogEvent$1 &&
          debugLogEvent$1({
              kind: 'end render',
              id: renderId,
              value,
              container,
              options,
              part,
          });
      return part;
  };
  {
      render.setSanitizer = setSanitizer;
      render.createSanitizer = createSanitizer;
      {
          render._testOnlyClearSanitizerFactoryDoNotCallOrElse =
              _testOnlyClearSanitizerFactoryDoNotCallOrElse;
      }
  }

  /**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  const NODE_MODE = false;
  // Allows minifiers to rename references to globalThis
  const global$1 = globalThis;
  /**
   * Whether the current browser supports `adoptedStyleSheets`.
   */
  const supportsAdoptingStyleSheets = global$1.ShadowRoot &&
      (global$1.ShadyCSS === undefined || global$1.ShadyCSS.nativeShadow) &&
      'adoptedStyleSheets' in Document.prototype &&
      'replace' in CSSStyleSheet.prototype;
  const constructionToken = Symbol();
  const cssTagCache = new WeakMap();
  /**
   * A container for a string of CSS text, that may be used to create a CSSStyleSheet.
   *
   * CSSResult is the return value of `css`-tagged template literals and
   * `unsafeCSS()`. In order to ensure that CSSResults are only created via the
   * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.
   */
  class CSSResult {
      constructor(cssText, strings, safeToken) {
          // This property needs to remain unminified.
          this['_$cssResult$'] = true;
          if (safeToken !== constructionToken) {
              throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
          }
          this.cssText = cssText;
          this._strings = strings;
      }
      // This is a getter so that it's lazy. In practice, this means stylesheets
      // are not created until the first element instance is made.
      get styleSheet() {
          // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is
          // constructable.
          let styleSheet = this._styleSheet;
          const strings = this._strings;
          if (supportsAdoptingStyleSheets && styleSheet === undefined) {
              const cacheable = strings !== undefined && strings.length === 1;
              if (cacheable) {
                  styleSheet = cssTagCache.get(strings);
              }
              if (styleSheet === undefined) {
                  (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
                  if (cacheable) {
                      cssTagCache.set(strings, styleSheet);
                  }
              }
          }
          return styleSheet;
      }
      toString() {
          return this.cssText;
      }
  }
  const textFromCSSResult = (value) => {
      // This property needs to remain unminified.
      if (value['_$cssResult$'] === true) {
          return value.cssText;
      }
      else if (typeof value === 'number') {
          return value;
      }
      else {
          throw new Error(`Value passed to 'css' function must be a 'css' function result: ` +
              `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +
              `to ensure page security.`);
      }
  };
  /**
   * Wrap a value for interpolation in a {@linkcode css} tagged template literal.
   *
   * This is unsafe because untrusted CSS text can be used to phone home
   * or exfiltrate data to an attacker controlled site. Take care to only use
   * this with trusted input.
   */
  const unsafeCSS = (value) => new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);
  /**
   * A template literal tag which can be used with LitElement's
   * {@linkcode LitElement.styles} property to set element styles.
   *
   * For security reasons, only literal string values and number may be used in
   * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}
   * may be used inside an expression.
   */
  const css = (strings, ...values) => {
      const cssText = strings.length === 1
          ? strings[0]
          : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
      return new CSSResult(cssText, strings, constructionToken);
  };
  /**
   * Applies the given styles to a `shadowRoot`. When Shadow DOM is
   * available but `adoptedStyleSheets` is not, styles are appended to the
   * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
   * Note, when shimming is used, any styles that are subsequently placed into
   * the shadowRoot should be placed *before* any shimmed adopted styles. This
   * will match spec behavior that gives adopted sheets precedence over styles in
   * shadowRoot.
   */
  const adoptStyles = (renderRoot, styles) => {
      if (supportsAdoptingStyleSheets) {
          renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);
      }
      else {
          for (const s of styles) {
              const style = document.createElement('style');
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              const nonce = global$1['litNonce'];
              if (nonce !== undefined) {
                  style.setAttribute('nonce', nonce);
              }
              style.textContent = s.cssText;
              renderRoot.appendChild(style);
          }
      }
  };
  const cssResultFromStyleSheet = (sheet) => {
      let cssText = '';
      for (const rule of sheet.cssRules) {
          cssText += rule.cssText;
      }
      return unsafeCSS(cssText);
  };
  const getCompatibleStyle = supportsAdoptingStyleSheets ||
      (NODE_MODE )
      ? (s) => s
      : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  // TODO (justinfagnani): Add `hasOwn` here when we ship ES2022
  const { is, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, getPrototypeOf, } = Object;
  // Lets a minifier replace globalThis references with a minified name
  const global = globalThis;
  let issueWarning$3;
  const trustedTypes = global
      .trustedTypes;
  // Temporary workaround for https://crbug.com/993268
  // Currently, any attribute starting with "on" is considered to be a
  // TrustedScript source. Such boolean attributes must be set to the equivalent
  // trusted emptyScript value.
  const emptyStringForBooleanAttribute = trustedTypes
      ? trustedTypes.emptyScript
      : '';
  const polyfillSupport$1 = global.reactiveElementPolyfillSupportDevMode
      ;
  {
      // Ensure warnings are issued only 1x, even if multiple versions of Lit
      // are loaded.
      const issuedWarnings = (global.litIssuedWarnings ??=
          new Set());
      // Issue a warning, if we haven't already.
      issueWarning$3 = (code, warning) => {
          warning += ` See https://lit.dev/msg/${code} for more information.`;
          if (!issuedWarnings.has(warning)) {
              console.warn(warning);
              issuedWarnings.add(warning);
          }
      };
      issueWarning$3('dev-mode', `Lit is in dev mode. Not recommended for production!`);
      // Issue polyfill support warning.
      if (global.ShadyDOM?.inUse && polyfillSupport$1 === undefined) {
          issueWarning$3('polyfill-support-missing', `Shadow DOM is being polyfilled via \`ShadyDOM\` but ` +
              `the \`polyfill-support\` module has not been loaded.`);
      }
  }
  /**
   * Useful for visualizing and logging insights into what the Lit template system is doing.
   *
   * Compiled out of prod mode builds.
   */
  const debugLogEvent = (event) => {
          const shouldEmit = global
              .emitLitDebugLogEvents;
          if (!shouldEmit) {
              return;
          }
          global.dispatchEvent(new CustomEvent('lit-debug', {
              detail: event,
          }));
      }
      ;
  /*
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
   * replaced at compile time by the munged name for object[property]. We cannot
   * alias this function, so we have to use a small shim that has the same
   * behavior when not compiling.
   */
  /*@__INLINE__*/
  const JSCompiler_renameProperty$1 = (prop, _obj) => prop;
  const defaultConverter = {
      toAttribute(value, type) {
          switch (type) {
              case Boolean:
                  value = value ? emptyStringForBooleanAttribute : null;
                  break;
              case Object:
              case Array:
                  // if the value is `null` or `undefined` pass this through
                  // to allow removing/no change behavior.
                  value = value == null ? value : JSON.stringify(value);
                  break;
          }
          return value;
      },
      fromAttribute(value, type) {
          let fromValue = value;
          switch (type) {
              case Boolean:
                  fromValue = value !== null;
                  break;
              case Number:
                  fromValue = value === null ? null : Number(value);
                  break;
              case Object:
              case Array:
                  // Do *not* generate exception when invalid JSON is set as elements
                  // don't normally complain on being mis-configured.
                  // TODO(sorvell): Do generate exception in *dev mode*.
                  try {
                      // Assert to adhere to Bazel's "must type assert JSON parse" rule.
                      fromValue = JSON.parse(value);
                  }
                  catch (e) {
                      fromValue = null;
                  }
                  break;
          }
          return fromValue;
      },
  };
  /**
   * Change function that returns true if `value` is different from `oldValue`.
   * This method is used as the default for a property's `hasChanged` function.
   */
  const notEqual = (value, old) => !is(value, old);
  const defaultPropertyDeclaration$1 = {
      attribute: true,
      type: String,
      converter: defaultConverter,
      reflect: false,
      hasChanged: notEqual,
  };
  // Ensure metadata is enabled. TypeScript does not polyfill
  // Symbol.metadata, so we must ensure that it exists.
  Symbol.metadata ??= Symbol('metadata');
  // Map from a class's metadata object to property options
  // Note that we must use nullish-coalescing assignment so that we only use one
  // map even if we load multiple version of this module.
  global.litPropertyMetadata ??= new WeakMap();
  /**
   * Base element class which manages element properties and attributes. When
   * properties change, the `update` method is asynchronously called. This method
   * should be supplied by subclasses to render updates as desired.
   * @noInheritDoc
   */
  class ReactiveElement
  // In the Node build, this `extends` clause will be substituted with
  // `(globalThis.HTMLElement ?? HTMLElement)`.
  //
  // This way, we will first prefer any global `HTMLElement` polyfill that the
  // user has assigned, and then fall back to the `HTMLElement` shim which has
  // been imported (see note at the top of this file about how this import is
  // generated by Rollup). Note that the `HTMLElement` variable has been
  // shadowed by this import, so it no longer refers to the global.
   extends HTMLElement {
      /**
       * Adds an initializer function to the class that is called during instance
       * construction.
       *
       * This is useful for code that runs against a `ReactiveElement`
       * subclass, such as a decorator, that needs to do work for each
       * instance, such as setting up a `ReactiveController`.
       *
       * ```ts
       * const myDecorator = (target: typeof ReactiveElement, key: string) => {
       *   target.addInitializer((instance: ReactiveElement) => {
       *     // This is run during construction of the element
       *     new MyController(instance);
       *   });
       * }
       * ```
       *
       * Decorating a field will then cause each instance to run an initializer
       * that adds a controller:
       *
       * ```ts
       * class MyElement extends LitElement {
       *   @myDecorator foo;
       * }
       * ```
       *
       * Initializers are stored per-constructor. Adding an initializer to a
       * subclass does not add it to a superclass. Since initializers are run in
       * constructors, initializers will run in order of the class hierarchy,
       * starting with superclasses and progressing to the instance's class.
       *
       * @nocollapse
       */
      static addInitializer(initializer) {
          this.__prepare();
          (this._initializers ??= []).push(initializer);
      }
      /**
       * Returns a list of attributes corresponding to the registered properties.
       * @nocollapse
       * @category attributes
       */
      static get observedAttributes() {
          // Ensure we've created all properties
          this.finalize();
          // this.__attributeToPropertyMap is only undefined after finalize() in
          // ReactiveElement itself. ReactiveElement.observedAttributes is only
          // accessed with ReactiveElement as the receiver when a subclass or mixin
          // calls super.observedAttributes
          return (this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()]);
      }
      /**
       * Creates a property accessor on the element prototype if one does not exist
       * and stores a {@linkcode PropertyDeclaration} for the property with the
       * given options. The property setter calls the property's `hasChanged`
       * property option or uses a strict identity check to determine whether or not
       * to request an update.
       *
       * This method may be overridden to customize properties; however,
       * when doing so, it's important to call `super.createProperty` to ensure
       * the property is setup correctly. This method calls
       * `getPropertyDescriptor` internally to get a descriptor to install.
       * To customize what properties do when they are get or set, override
       * `getPropertyDescriptor`. To customize the options for a property,
       * implement `createProperty` like this:
       *
       * ```ts
       * static createProperty(name, options) {
       *   options = Object.assign(options, {myOption: true});
       *   super.createProperty(name, options);
       * }
       * ```
       *
       * @nocollapse
       * @category properties
       */
      static createProperty(name, options = defaultPropertyDeclaration$1) {
          // If this is a state property, force the attribute to false.
          if (options.state) {
              options.attribute = false;
          }
          this.__prepare();
          this.elementProperties.set(name, options);
          if (!options.noAccessor) {
              const key = // Use Symbol.for in dev mode to make it easier to maintain state
                      // when doing HMR.
                      Symbol.for(`${String(name)} (@property() cache)`)
                  ;
              const descriptor = this.getPropertyDescriptor(name, key, options);
              if (descriptor !== undefined) {
                  defineProperty(this.prototype, name, descriptor);
              }
          }
      }
      /**
       * Returns a property descriptor to be defined on the given named property.
       * If no descriptor is returned, the property will not become an accessor.
       * For example,
       *
       * ```ts
       * class MyElement extends LitElement {
       *   static getPropertyDescriptor(name, key, options) {
       *     const defaultDescriptor =
       *         super.getPropertyDescriptor(name, key, options);
       *     const setter = defaultDescriptor.set;
       *     return {
       *       get: defaultDescriptor.get,
       *       set(value) {
       *         setter.call(this, value);
       *         // custom action.
       *       },
       *       configurable: true,
       *       enumerable: true
       *     }
       *   }
       * }
       * ```
       *
       * @nocollapse
       * @category properties
       */
      static getPropertyDescriptor(name, key, options) {
          const { get, set } = getOwnPropertyDescriptor(this.prototype, name) ?? {
              get() {
                  return this[key];
              },
              set(v) {
                  this[key] = v;
              },
          };
          if (get == null) {
              if ('value' in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {
                  throw new Error(`Field ${JSON.stringify(String(name))} on ` +
                      `${this.name} was declared as a reactive property ` +
                      `but it's actually declared as a value on the prototype. ` +
                      `Usually this is due to using @property or @state on a method.`);
              }
              issueWarning$3('reactive-property-without-getter', `Field ${JSON.stringify(String(name))} on ` +
                  `${this.name} was declared as a reactive property ` +
                  `but it does not have a getter. This will be an error in a ` +
                  `future version of Lit.`);
          }
          return {
              get() {
                  return get?.call(this);
              },
              set(value) {
                  const oldValue = get?.call(this);
                  set.call(this, value);
                  this.requestUpdate(name, oldValue, options);
              },
              configurable: true,
              enumerable: true,
          };
      }
      /**
       * Returns the property options associated with the given property.
       * These options are defined with a `PropertyDeclaration` via the `properties`
       * object or the `@property` decorator and are registered in
       * `createProperty(...)`.
       *
       * Note, this method should be considered "final" and not overridden. To
       * customize the options for a given property, override
       * {@linkcode createProperty}.
       *
       * @nocollapse
       * @final
       * @category properties
       */
      static getPropertyOptions(name) {
          return this.elementProperties.get(name) ?? defaultPropertyDeclaration$1;
      }
      /**
       * Initializes static own properties of the class used in bookkeeping
       * for element properties, initializers, etc.
       *
       * Can be called multiple times by code that needs to ensure these
       * properties exist before using them.
       *
       * This method ensures the superclass is finalized so that inherited
       * property metadata can be copied down.
       * @nocollapse
       */
      static __prepare() {
          if (this.hasOwnProperty(JSCompiler_renameProperty$1('elementProperties'))) {
              // Already prepared
              return;
          }
          // Finalize any superclasses
          const superCtor = getPrototypeOf(this);
          superCtor.finalize();
          // Create own set of initializers for this class if any exist on the
          // superclass and copy them down. Note, for a small perf boost, avoid
          // creating initializers unless needed.
          if (superCtor._initializers !== undefined) {
              this._initializers = [...superCtor._initializers];
          }
          // Initialize elementProperties from the superclass
          this.elementProperties = new Map(superCtor.elementProperties);
      }
      /**
       * Finishes setting up the class so that it's ready to be registered
       * as a custom element and instantiated.
       *
       * This method is called by the ReactiveElement.observedAttributes getter.
       * If you override the observedAttributes getter, you must either call
       * super.observedAttributes to trigger finalization, or call finalize()
       * yourself.
       *
       * @nocollapse
       */
      static finalize() {
          if (this.hasOwnProperty(JSCompiler_renameProperty$1('finalized'))) {
              return;
          }
          this.finalized = true;
          this.__prepare();
          // Create properties from the static properties block:
          if (this.hasOwnProperty(JSCompiler_renameProperty$1('properties'))) {
              const props = this.properties;
              const propKeys = [
                  ...getOwnPropertyNames(props),
                  ...getOwnPropertySymbols(props),
              ];
              for (const p of propKeys) {
                  this.createProperty(p, props[p]);
              }
          }
          // Create properties from standard decorator metadata:
          const metadata = this[Symbol.metadata];
          if (metadata !== null) {
              const properties = litPropertyMetadata.get(metadata);
              if (properties !== undefined) {
                  for (const [p, options] of properties) {
                      this.elementProperties.set(p, options);
                  }
              }
          }
          // Create the attribute-to-property map
          this.__attributeToPropertyMap = new Map();
          for (const [p, options] of this.elementProperties) {
              const attr = this.__attributeNameForProperty(p, options);
              if (attr !== undefined) {
                  this.__attributeToPropertyMap.set(attr, p);
              }
          }
          this.elementStyles = this.finalizeStyles(this.styles);
          {
              if (this.hasOwnProperty('createProperty')) {
                  issueWarning$3('no-override-create-property', 'Overriding ReactiveElement.createProperty() is deprecated. ' +
                      'The override will not be called with standard decorators');
              }
              if (this.hasOwnProperty('getPropertyDescriptor')) {
                  issueWarning$3('no-override-get-property-descriptor', 'Overriding ReactiveElement.getPropertyDescriptor() is deprecated. ' +
                      'The override will not be called with standard decorators');
              }
          }
      }
      /**
       * Takes the styles the user supplied via the `static styles` property and
       * returns the array of styles to apply to the element.
       * Override this method to integrate into a style management system.
       *
       * Styles are deduplicated preserving the _last_ instance in the list. This
       * is a performance optimization to avoid duplicated styles that can occur
       * especially when composing via subclassing. The last item is kept to try
       * to preserve the cascade order with the assumption that it's most important
       * that last added styles override previous styles.
       *
       * @nocollapse
       * @category styles
       */
      static finalizeStyles(styles) {
          const elementStyles = [];
          if (Array.isArray(styles)) {
              // Dedupe the flattened array in reverse order to preserve the last items.
              // Casting to Array<unknown> works around TS error that
              // appears to come from trying to flatten a type CSSResultArray.
              const set = new Set(styles.flat(Infinity).reverse());
              // Then preserve original order by adding the set items in reverse order.
              for (const s of set) {
                  elementStyles.unshift(getCompatibleStyle(s));
              }
          }
          else if (styles !== undefined) {
              elementStyles.push(getCompatibleStyle(styles));
          }
          return elementStyles;
      }
      /**
       * Returns the property name for the given attribute `name`.
       * @nocollapse
       */
      static __attributeNameForProperty(name, options) {
          const attribute = options.attribute;
          return attribute === false
              ? undefined
              : typeof attribute === 'string'
                  ? attribute
                  : typeof name === 'string'
                      ? name.toLowerCase()
                      : undefined;
      }
      constructor() {
          super();
          this.__instanceProperties = undefined;
          /**
           * True if there is a pending update as a result of calling `requestUpdate()`.
           * Should only be read.
           * @category updates
           */
          this.isUpdatePending = false;
          /**
           * Is set to `true` after the first update. The element code cannot assume
           * that `renderRoot` exists before the element `hasUpdated`.
           * @category updates
           */
          this.hasUpdated = false;
          /**
           * Name of currently reflecting property
           */
          this.__reflectingProperty = null;
          this.__initialize();
      }
      /**
       * Internal only override point for customizing work done when elements
       * are constructed.
       */
      __initialize() {
          this.__updatePromise = new Promise((res) => (this.enableUpdating = res));
          this._$changedProperties = new Map();
          // This enqueues a microtask that ust run before the first update, so it
          // must be called before requestUpdate()
          this.__saveInstanceProperties();
          // ensures first update will be caught by an early access of
          // `updateComplete`
          this.requestUpdate();
          this.constructor._initializers?.forEach((i) => i(this));
      }
      /**
       * Registers a `ReactiveController` to participate in the element's reactive
       * update cycle. The element automatically calls into any registered
       * controllers during its lifecycle callbacks.
       *
       * If the element is connected when `addController()` is called, the
       * controller's `hostConnected()` callback will be immediately called.
       * @category controllers
       */
      addController(controller) {
          (this.__controllers ??= new Set()).add(controller);
          // If a controller is added after the element has been connected,
          // call hostConnected. Note, re-using existence of `renderRoot` here
          // (which is set in connectedCallback) to avoid the need to track a
          // first connected state.
          if (this.renderRoot !== undefined && this.isConnected) {
              controller.hostConnected?.();
          }
      }
      /**
       * Removes a `ReactiveController` from the element.
       * @category controllers
       */
      removeController(controller) {
          this.__controllers?.delete(controller);
      }
      /**
       * Fixes any properties set on the instance before upgrade time.
       * Otherwise these would shadow the accessor and break these properties.
       * The properties are stored in a Map which is played back after the
       * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
       * (<=41), properties created for native platform properties like (`id` or
       * `name`) may not have default values set in the element constructor. On
       * these browsers native properties appear on instances and therefore their
       * default value will overwrite any element default (e.g. if the element sets
       * this.id = 'id' in the constructor, the 'id' will become '' since this is
       * the native platform default).
       */
      __saveInstanceProperties() {
          const instanceProperties = new Map();
          const elementProperties = this.constructor
              .elementProperties;
          for (const p of elementProperties.keys()) {
              if (this.hasOwnProperty(p)) {
                  instanceProperties.set(p, this[p]);
                  delete this[p];
              }
          }
          if (instanceProperties.size > 0) {
              this.__instanceProperties = instanceProperties;
          }
      }
      /**
       * Returns the node into which the element should render and by default
       * creates and returns an open shadowRoot. Implement to customize where the
       * element's DOM is rendered. For example, to render into the element's
       * childNodes, return `this`.
       *
       * @return Returns a node into which to render.
       * @category rendering
       */
      createRenderRoot() {
          const renderRoot = this.shadowRoot ??
              this.attachShadow(this.constructor.shadowRootOptions);
          adoptStyles(renderRoot, this.constructor.elementStyles);
          return renderRoot;
      }
      /**
       * On first connection, creates the element's renderRoot, sets up
       * element styling, and enables updating.
       * @category lifecycle
       */
      connectedCallback() {
          // Create renderRoot before controllers `hostConnected`
          this.renderRoot ??=
              this.createRenderRoot();
          this.enableUpdating(true);
          this.__controllers?.forEach((c) => c.hostConnected?.());
      }
      /**
       * Note, this method should be considered final and not overridden. It is
       * overridden on the element instance with a function that triggers the first
       * update.
       * @category updates
       */
      enableUpdating(_requestedUpdate) { }
      /**
       * Allows for `super.disconnectedCallback()` in extensions while
       * reserving the possibility of making non-breaking feature additions
       * when disconnecting at some point in the future.
       * @category lifecycle
       */
      disconnectedCallback() {
          this.__controllers?.forEach((c) => c.hostDisconnected?.());
      }
      /**
       * Synchronizes property values when attributes change.
       *
       * Specifically, when an attribute is set, the corresponding property is set.
       * You should rarely need to implement this callback. If this method is
       * overridden, `super.attributeChangedCallback(name, _old, value)` must be
       * called.
       *
       * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
       * on MDN for more information about the `attributeChangedCallback`.
       * @category attributes
       */
      attributeChangedCallback(name, _old, value) {
          this._$attributeToProperty(name, value);
      }
      __propertyToAttribute(name, value) {
          const elemProperties = this.constructor.elementProperties;
          const options = elemProperties.get(name);
          const attr = this.constructor.__attributeNameForProperty(name, options);
          if (attr !== undefined && options.reflect === true) {
              const converter = options.converter?.toAttribute !==
                  undefined
                  ? options.converter
                  : defaultConverter;
              const attrValue = converter.toAttribute(value, options.type);
              if (this.constructor.enabledWarnings.includes('migration') &&
                  attrValue === undefined) {
                  issueWarning$3('undefined-attribute-value', `The attribute value for the ${name} property is ` +
                      `undefined on element ${this.localName}. The attribute will be ` +
                      `removed, but in the previous version of \`ReactiveElement\`, ` +
                      `the attribute would not have changed.`);
              }
              // Track if the property is being reflected to avoid
              // setting the property again via `attributeChangedCallback`. Note:
              // 1. this takes advantage of the fact that the callback is synchronous.
              // 2. will behave incorrectly if multiple attributes are in the reaction
              // stack at time of calling. However, since we process attributes
              // in `update` this should not be possible (or an extreme corner case
              // that we'd like to discover).
              // mark state reflecting
              this.__reflectingProperty = name;
              if (attrValue == null) {
                  this.removeAttribute(attr);
              }
              else {
                  this.setAttribute(attr, attrValue);
              }
              // mark state not reflecting
              this.__reflectingProperty = null;
          }
      }
      /** @internal */
      _$attributeToProperty(name, value) {
          const ctor = this.constructor;
          // Note, hint this as an `AttributeMap` so closure clearly understands
          // the type; it has issues with tracking types through statics
          const propName = ctor.__attributeToPropertyMap.get(name);
          // Use tracking info to avoid reflecting a property value to an attribute
          // if it was just set because the attribute changed.
          if (propName !== undefined && this.__reflectingProperty !== propName) {
              const options = ctor.getPropertyOptions(propName);
              const converter = typeof options.converter === 'function'
                  ? { fromAttribute: options.converter }
                  : options.converter?.fromAttribute !== undefined
                      ? options.converter
                      : defaultConverter;
              // mark state reflecting
              this.__reflectingProperty = propName;
              this[propName] = converter.fromAttribute(value, options.type
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              );
              // mark state not reflecting
              this.__reflectingProperty = null;
          }
      }
      /**
       * Requests an update which is processed asynchronously. This should be called
       * when an element should update based on some state not triggered by setting
       * a reactive property. In this case, pass no arguments. It should also be
       * called when manually implementing a property setter. In this case, pass the
       * property `name` and `oldValue` to ensure that any configured property
       * options are honored.
       *
       * @param name name of requesting property
       * @param oldValue old value of requesting property
       * @param options property options to use instead of the previously
       *     configured options
       * @category updates
       */
      requestUpdate(name, oldValue, options) {
          // If we have a property key, perform property update steps.
          if (name !== undefined) {
              if (name instanceof Event) {
                  issueWarning$3(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);
              }
              options ??= this.constructor.getPropertyOptions(name);
              const hasChanged = options.hasChanged ?? notEqual;
              const newValue = this[name];
              if (hasChanged(newValue, oldValue)) {
                  this._$changeProperty(name, oldValue, options);
              }
              else {
                  // Abort the request if the property should not be considered changed.
                  return;
              }
          }
          if (this.isUpdatePending === false) {
              this.__updatePromise = this.__enqueueUpdate();
          }
      }
      /**
       * @internal
       */
      _$changeProperty(name, oldValue, options) {
          // TODO (justinfagnani): Create a benchmark of Map.has() + Map.set(
          // vs just Map.set()
          if (!this._$changedProperties.has(name)) {
              this._$changedProperties.set(name, oldValue);
          }
          // Add to reflecting properties set.
          // Note, it's important that every change has a chance to add the
          // property to `__reflectingProperties`. This ensures setting
          // attribute + property reflects correctly.
          if (options.reflect === true && this.__reflectingProperty !== name) {
              (this.__reflectingProperties ??= new Set()).add(name);
          }
      }
      /**
       * Sets up the element to asynchronously update.
       */
      async __enqueueUpdate() {
          this.isUpdatePending = true;
          try {
              // Ensure any previous update has resolved before updating.
              // This `await` also ensures that property changes are batched.
              await this.__updatePromise;
          }
          catch (e) {
              // Refire any previous errors async so they do not disrupt the update
              // cycle. Errors are refired so developers have a chance to observe
              // them, and this can be done by implementing
              // `window.onunhandledrejection`.
              Promise.reject(e);
          }
          const result = this.scheduleUpdate();
          // If `scheduleUpdate` returns a Promise, we await it. This is done to
          // enable coordinating updates with a scheduler. Note, the result is
          // checked to avoid delaying an additional microtask unless we need to.
          if (result != null) {
              await result;
          }
          return !this.isUpdatePending;
      }
      /**
       * Schedules an element update. You can override this method to change the
       * timing of updates by returning a Promise. The update will await the
       * returned Promise, and you should resolve the Promise to allow the update
       * to proceed. If this method is overridden, `super.scheduleUpdate()`
       * must be called.
       *
       * For instance, to schedule updates to occur just before the next frame:
       *
       * ```ts
       * override protected async scheduleUpdate(): Promise<unknown> {
       *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
       *   super.scheduleUpdate();
       * }
       * ```
       * @category updates
       */
      scheduleUpdate() {
          const result = this.performUpdate();
          if (this.constructor.enabledWarnings.includes('async-perform-update') &&
              typeof result?.then ===
                  'function') {
              issueWarning$3('async-perform-update', `Element ${this.localName} returned a Promise from performUpdate(). ` +
                  `This behavior is deprecated and will be removed in a future ` +
                  `version of ReactiveElement.`);
          }
          return result;
      }
      /**
       * Performs an element update. Note, if an exception is thrown during the
       * update, `firstUpdated` and `updated` will not be called.
       *
       * Call `performUpdate()` to immediately process a pending update. This should
       * generally not be needed, but it can be done in rare cases when you need to
       * update synchronously.
       *
       * @category updates
       */
      performUpdate() {
          // Abort any update if one is not pending when this is called.
          // This can happen if `performUpdate` is called early to "flush"
          // the update.
          if (!this.isUpdatePending) {
              return;
          }
          debugLogEvent?.({ kind: 'update' });
          if (!this.hasUpdated) {
              // Create renderRoot before first update. This occurs in `connectedCallback`
              // but is done here to support out of tree calls to `enableUpdating`/`performUpdate`.
              this.renderRoot ??=
                  this.createRenderRoot();
              {
                  // Produce warning if any reactive properties on the prototype are
                  // shadowed by class fields. Instance fields set before upgrade are
                  // deleted by this point, so any own property is caused by class field
                  // initialization in the constructor.
                  const ctor = this.constructor;
                  const shadowedProperties = [...ctor.elementProperties.keys()].filter((p) => this.hasOwnProperty(p) && p in getPrototypeOf(this));
                  if (shadowedProperties.length) {
                      throw new Error(`The following properties on element ${this.localName} will not ` +
                          `trigger updates as expected because they are set using class ` +
                          `fields: ${shadowedProperties.join(', ')}. ` +
                          `Native class fields and some compiled output will overwrite ` +
                          `accessors used for detecting changes. See ` +
                          `https://lit.dev/msg/class-field-shadowing ` +
                          `for more information.`);
                  }
              }
              // Mixin instance properties once, if they exist.
              if (this.__instanceProperties) {
                  // TODO (justinfagnani): should we use the stored value? Could a new value
                  // have been set since we stored the own property value?
                  for (const [p, value] of this.__instanceProperties) {
                      this[p] = value;
                  }
                  this.__instanceProperties = undefined;
              }
              // Trigger initial value reflection and populate the initial
              // changedProperties map, but only for the case of experimental
              // decorators on accessors, which will not have already populated the
              // changedProperties map. We can't know if these accessors had
              // initializers, so we just set them anyway - a difference from
              // experimental decorators on fields and standard decorators on
              // auto-accessors.
              // For context why experimentalDecorators with auto accessors are handled
              // specifically also see:
              // https://github.com/lit/lit/pull/4183#issuecomment-1711959635
              const elementProperties = this.constructor
                  .elementProperties;
              if (elementProperties.size > 0) {
                  for (const [p, options] of elementProperties) {
                      if (options.wrapped === true &&
                          !this._$changedProperties.has(p) &&
                          this[p] !== undefined) {
                          this._$changeProperty(p, this[p], options);
                      }
                  }
              }
          }
          let shouldUpdate = false;
          const changedProperties = this._$changedProperties;
          try {
              shouldUpdate = this.shouldUpdate(changedProperties);
              if (shouldUpdate) {
                  this.willUpdate(changedProperties);
                  this.__controllers?.forEach((c) => c.hostUpdate?.());
                  this.update(changedProperties);
              }
              else {
                  this.__markUpdated();
              }
          }
          catch (e) {
              // Prevent `firstUpdated` and `updated` from running when there's an
              // update exception.
              shouldUpdate = false;
              // Ensure element can accept additional updates after an exception.
              this.__markUpdated();
              throw e;
          }
          // The update is no longer considered pending and further updates are now allowed.
          if (shouldUpdate) {
              this._$didUpdate(changedProperties);
          }
      }
      /**
       * Invoked before `update()` to compute values needed during the update.
       *
       * Implement `willUpdate` to compute property values that depend on other
       * properties and are used in the rest of the update process.
       *
       * ```ts
       * willUpdate(changedProperties) {
       *   // only need to check changed properties for an expensive computation.
       *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
       *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
       *   }
       * }
       *
       * render() {
       *   return html`SHA: ${this.sha}`;
       * }
       * ```
       *
       * @category updates
       */
      willUpdate(_changedProperties) { }
      // Note, this is an override point for polyfill-support.
      // @internal
      _$didUpdate(changedProperties) {
          this.__controllers?.forEach((c) => c.hostUpdated?.());
          if (!this.hasUpdated) {
              this.hasUpdated = true;
              this.firstUpdated(changedProperties);
          }
          this.updated(changedProperties);
          if (this.isUpdatePending &&
              this.constructor.enabledWarnings.includes('change-in-update')) {
              issueWarning$3('change-in-update', `Element ${this.localName} scheduled an update ` +
                  `(generally because a property was set) ` +
                  `after an update completed, causing a new update to be scheduled. ` +
                  `This is inefficient and should be avoided unless the next update ` +
                  `can only be scheduled as a side effect of the previous update.`);
          }
      }
      __markUpdated() {
          this._$changedProperties = new Map();
          this.isUpdatePending = false;
      }
      /**
       * Returns a Promise that resolves when the element has completed updating.
       * The Promise value is a boolean that is `true` if the element completed the
       * update without triggering another update. The Promise result is `false` if
       * a property was set inside `updated()`. If the Promise is rejected, an
       * exception was thrown during the update.
       *
       * To await additional asynchronous work, override the `getUpdateComplete`
       * method. For example, it is sometimes useful to await a rendered element
       * before fulfilling this Promise. To do this, first await
       * `super.getUpdateComplete()`, then any subsequent state.
       *
       * @return A promise of a boolean that resolves to true if the update completed
       *     without triggering another update.
       * @category updates
       */
      get updateComplete() {
          return this.getUpdateComplete();
      }
      /**
       * Override point for the `updateComplete` promise.
       *
       * It is not safe to override the `updateComplete` getter directly due to a
       * limitation in TypeScript which means it is not possible to call a
       * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
       * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
       * This method should be overridden instead. For example:
       *
       * ```ts
       * class MyElement extends LitElement {
       *   override async getUpdateComplete() {
       *     const result = await super.getUpdateComplete();
       *     await this._myChild.updateComplete;
       *     return result;
       *   }
       * }
       * ```
       *
       * @return A promise of a boolean that resolves to true if the update completed
       *     without triggering another update.
       * @category updates
       */
      getUpdateComplete() {
          return this.__updatePromise;
      }
      /**
       * Controls whether or not `update()` should be called when the element requests
       * an update. By default, this method always returns `true`, but this can be
       * customized to control when to update.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      shouldUpdate(_changedProperties) {
          return true;
      }
      /**
       * Updates the element. This method reflects property values to attributes.
       * It can be overridden to render and keep updated element DOM.
       * Setting properties inside this method will *not* trigger
       * another update.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      update(_changedProperties) {
          // The forEach() expression will only run when when __reflectingProperties is
          // defined, and it returns undefined, setting __reflectingProperties to
          // undefined
          this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) => this.__propertyToAttribute(p, this[p]));
          this.__markUpdated();
      }
      /**
       * Invoked whenever the element is updated. Implement to perform
       * post-updating tasks via DOM APIs, for example, focusing an element.
       *
       * Setting properties inside this method will trigger the element to update
       * again after this update cycle completes.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      updated(_changedProperties) { }
      /**
       * Invoked when the element is first updated. Implement to perform one time
       * work on the element after update.
       *
       * ```ts
       * firstUpdated() {
       *   this.renderRoot.getElementById('my-text-area').focus();
       * }
       * ```
       *
       * Setting properties inside this method will trigger the element to update
       * again after this update cycle completes.
       *
       * @param _changedProperties Map of changed properties with old values
       * @category updates
       */
      firstUpdated(_changedProperties) { }
  }
  /**
   * Memoized list of all element styles.
   * Created lazily on user subclasses when finalizing the class.
   * @nocollapse
   * @category styles
   */
  ReactiveElement.elementStyles = [];
  /**
   * Options used when calling `attachShadow`. Set this property to customize
   * the options for the shadowRoot; for example, to create a closed
   * shadowRoot: `{mode: 'closed'}`.
   *
   * Note, these options are used in `createRenderRoot`. If this method
   * is customized, options should be respected if possible.
   * @nocollapse
   * @category rendering
   */
  ReactiveElement.shadowRootOptions = { mode: 'open' };
  // Assigned here to work around a jscompiler bug with static fields
  // when compiling to ES5.
  // https://github.com/google/closure-compiler/issues/3177
  ReactiveElement[JSCompiler_renameProperty$1('elementProperties')] = new Map();
  ReactiveElement[JSCompiler_renameProperty$1('finalized')] = new Map();
  // Apply polyfills if available
  polyfillSupport$1?.({ ReactiveElement });
  // Dev mode warnings...
  {
      // Default warning set.
      ReactiveElement.enabledWarnings = [
          'change-in-update',
          'async-perform-update',
      ];
      const ensureOwnWarnings = function (ctor) {
          if (!ctor.hasOwnProperty(JSCompiler_renameProperty$1('enabledWarnings'))) {
              ctor.enabledWarnings = ctor.enabledWarnings.slice();
          }
      };
      ReactiveElement.enableWarning = function (warning) {
          ensureOwnWarnings(this);
          if (!this.enabledWarnings.includes(warning)) {
              this.enabledWarnings.push(warning);
          }
      };
      ReactiveElement.disableWarning = function (warning) {
          ensureOwnWarnings(this);
          const i = this.enabledWarnings.indexOf(warning);
          if (i >= 0) {
              this.enabledWarnings.splice(i, 1);
          }
      };
  }
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for ReactiveElement usage.
  (global.reactiveElementVersions ??= []).push('2.0.4');
  if (global.reactiveElementVersions.length > 1) {
      issueWarning$3('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
          `is not recommended.`);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /*
   * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
   * replaced at compile time by the munged name for object[property]. We cannot
   * alias this function, so we have to use a small shim that has the same
   * behavior when not compiling.
   */
  /*@__INLINE__*/
  const JSCompiler_renameProperty = (prop, _obj) => prop;
  let issueWarning$2;
  {
      // Ensure warnings are issued only 1x, even if multiple versions of Lit
      // are loaded.
      const issuedWarnings = (globalThis.litIssuedWarnings ??= new Set());
      // Issue a warning, if we haven't already.
      issueWarning$2 = (code, warning) => {
          warning += ` See https://lit.dev/msg/${code} for more information.`;
          if (!issuedWarnings.has(warning)) {
              console.warn(warning);
              issuedWarnings.add(warning);
          }
      };
  }
  /**
   * Base element class that manages element properties and attributes, and
   * renders a lit-html template.
   *
   * To define a component, subclass `LitElement` and implement a
   * `render` method to provide the component's template. Define properties
   * using the {@linkcode LitElement.properties properties} property or the
   * {@linkcode property} decorator.
   */
  class LitElement extends ReactiveElement {
      constructor() {
          super(...arguments);
          /**
           * @category rendering
           */
          this.renderOptions = { host: this };
          this.__childPart = undefined;
      }
      /**
       * @category rendering
       */
      createRenderRoot() {
          const renderRoot = super.createRenderRoot();
          // When adoptedStyleSheets are shimmed, they are inserted into the
          // shadowRoot by createRenderRoot. Adjust the renderBefore node so that
          // any styles in Lit content render before adoptedStyleSheets. This is
          // important so that adoptedStyleSheets have precedence over styles in
          // the shadowRoot.
          this.renderOptions.renderBefore ??= renderRoot.firstChild;
          return renderRoot;
      }
      /**
       * Updates the element. This method reflects property values to attributes
       * and calls `render` to render DOM via lit-html. Setting properties inside
       * this method will *not* trigger another update.
       * @param changedProperties Map of changed properties with old values
       * @category updates
       */
      update(changedProperties) {
          // Setting properties in `render` should not trigger an update. Since
          // updates are allowed after super.update, it's important to call `render`
          // before that.
          const value = this.render();
          if (!this.hasUpdated) {
              this.renderOptions.isConnected = this.isConnected;
          }
          super.update(changedProperties);
          this.__childPart = render(value, this.renderRoot, this.renderOptions);
      }
      /**
       * Invoked when the component is added to the document's DOM.
       *
       * In `connectedCallback()` you should setup tasks that should only occur when
       * the element is connected to the document. The most common of these is
       * adding event listeners to nodes external to the element, like a keydown
       * event handler added to the window.
       *
       * ```ts
       * connectedCallback() {
       *   super.connectedCallback();
       *   addEventListener('keydown', this._handleKeydown);
       * }
       * ```
       *
       * Typically, anything done in `connectedCallback()` should be undone when the
       * element is disconnected, in `disconnectedCallback()`.
       *
       * @category lifecycle
       */
      connectedCallback() {
          super.connectedCallback();
          this.__childPart?.setConnected(true);
      }
      /**
       * Invoked when the component is removed from the document's DOM.
       *
       * This callback is the main signal to the element that it may no longer be
       * used. `disconnectedCallback()` should ensure that nothing is holding a
       * reference to the element (such as event listeners added to nodes external
       * to the element), so that it is free to be garbage collected.
       *
       * ```ts
       * disconnectedCallback() {
       *   super.disconnectedCallback();
       *   window.removeEventListener('keydown', this._handleKeydown);
       * }
       * ```
       *
       * An element may be re-connected after being disconnected.
       *
       * @category lifecycle
       */
      disconnectedCallback() {
          super.disconnectedCallback();
          this.__childPart?.setConnected(false);
      }
      /**
       * Invoked on each update to perform rendering tasks. This method may return
       * any value renderable by lit-html's `ChildPart` - typically a
       * `TemplateResult`. Setting properties inside this method will *not* trigger
       * the element to update.
       * @category rendering
       */
      render() {
          return noChange;
      }
  }
  // This property needs to remain unminified.
  LitElement['_$litElement$'] = true;
  /**
   * Ensure this class is marked as `finalized` as an optimization ensuring
   * it will not needlessly try to `finalize`.
   *
   * Note this property name is a string to prevent breaking Closure JS Compiler
   * optimizations. See @lit/reactive-element for more information.
   */
  LitElement[JSCompiler_renameProperty('finalized')] = true;
  // Install hydration if available
  globalThis.litElementHydrateSupport?.({ LitElement });
  // Apply polyfills if available
  const polyfillSupport = globalThis.litElementPolyfillSupportDevMode
      ;
  polyfillSupport?.({ LitElement });
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for LitElement usage.
  (globalThis.litElementVersions ??= []).push('4.1.0');
  if (globalThis.litElementVersions.length > 1) {
      issueWarning$2('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +
          `is not recommended.`);
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  let issueWarning$1;
  {
      // Ensure warnings are issued only 1x, even if multiple versions of Lit
      // are loaded.
      const issuedWarnings = (globalThis.litIssuedWarnings ??= new Set());
      // Issue a warning, if we haven't already.
      issueWarning$1 = (code, warning) => {
          warning += ` See https://lit.dev/msg/${code} for more information.`;
          if (!issuedWarnings.has(warning)) {
              console.warn(warning);
              issuedWarnings.add(warning);
          }
      };
  }
  const legacyProperty = (options, proto, name) => {
      const hasOwnProperty = proto.hasOwnProperty(name);
      proto.constructor.createProperty(name, hasOwnProperty ? { ...options, wrapped: true } : options);
      // For accessors (which have a descriptor on the prototype) we need to
      // return a descriptor, otherwise TypeScript overwrites the descriptor we
      // define in createProperty() with the original descriptor. We don't do this
      // for fields, which don't have a descriptor, because this could overwrite
      // descriptor defined by other decorators.
      return hasOwnProperty
          ? Object.getOwnPropertyDescriptor(proto, name)
          : undefined;
  };
  // This is duplicated from a similar variable in reactive-element.ts, but
  // actually makes sense to have this default defined with the decorator, so
  // that different decorators could have different defaults.
  const defaultPropertyDeclaration = {
      attribute: true,
      type: String,
      converter: defaultConverter$1,
      reflect: false,
      hasChanged: notEqual$1,
  };
  /**
   * Wraps a class accessor or setter so that `requestUpdate()` is called with the
   * property name and old value when the accessor is set.
   */
  const standardProperty = (options = defaultPropertyDeclaration, target, context) => {
      const { kind, metadata } = context;
      if (metadata == null) {
          issueWarning$1('missing-class-metadata', `The class ${target} is missing decorator metadata. This ` +
              `could mean that you're using a compiler that supports decorators ` +
              `but doesn't support decorator metadata, such as TypeScript 5.1. ` +
              `Please update your compiler.`);
      }
      // Store the property options
      let properties = globalThis.litPropertyMetadata.get(metadata);
      if (properties === undefined) {
          globalThis.litPropertyMetadata.set(metadata, (properties = new Map()));
      }
      properties.set(context.name, options);
      if (kind === 'accessor') {
          // Standard decorators cannot dynamically modify the class, so we can't
          // replace a field with accessors. The user must use the new `accessor`
          // keyword instead.
          const { name } = context;
          return {
              set(v) {
                  const oldValue = target.get.call(this);
                  target.set.call(this, v);
                  this.requestUpdate(name, oldValue, options);
              },
              init(v) {
                  if (v !== undefined) {
                      this._$changeProperty(name, undefined, options);
                  }
                  return v;
              },
          };
      }
      else if (kind === 'setter') {
          const { name } = context;
          return function (value) {
              const oldValue = this[name];
              target.call(this, value);
              this.requestUpdate(name, oldValue, options);
          };
      }
      throw new Error(`Unsupported decorator location: ${kind}`);
  };
  /**
   * A class field or accessor decorator which creates a reactive property that
   * reflects a corresponding attribute value. When a decorated property is set
   * the element will update and render. A {@linkcode PropertyDeclaration} may
   * optionally be supplied to configure property features.
   *
   * This decorator should only be used for public fields. As public fields,
   * properties should be considered as primarily settable by element users,
   * either via attribute or the property itself.
   *
   * Generally, properties that are changed by the element should be private or
   * protected fields and should use the {@linkcode state} decorator.
   *
   * However, sometimes element code does need to set a public property. This
   * should typically only be done in response to user interaction, and an event
   * should be fired informing the user; for example, a checkbox sets its
   * `checked` property when clicked and fires a `changed` event. Mutating public
   * properties should typically not be done for non-primitive (object or array)
   * properties. In other cases when an element needs to manage state, a private
   * property decorated via the {@linkcode state} decorator should be used. When
   * needed, state properties can be initialized via public properties to
   * facilitate complex interactions.
   *
   * ```ts
   * class MyElement {
   *   @property({ type: Boolean })
   *   clicked = false;
   * }
   * ```
   * @category Decorator
   * @ExportDecoratedItems
   */
  function property(options) {
      return (protoOrTarget, nameOrContext
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ) => {
          return (typeof nameOrContext === 'object'
              ? standardProperty(options, protoOrTarget, nameOrContext)
              : legacyProperty(options, protoOrTarget, nameOrContext));
      };
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * Declares a private or protected reactive property that still triggers
   * updates to the element when it changes. It does not reflect from the
   * corresponding attribute.
   *
   * Properties declared this way must not be used from HTML or HTML templating
   * systems, they're solely for properties internal to the element. These
   * properties may be renamed by optimization tools like closure compiler.
   * @category Decorator
   */
  function state(options) {
      return property({
          ...options,
          // Add both `state` and `attribute` because we found a third party
          // controller that is keying off of PropertyOptions.state to determine
          // whether a field is a private internal property or not.
          state: true,
          attribute: false,
      });
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * Wraps up a few best practices when returning a property descriptor from a
   * decorator.
   *
   * Marks the defined property as configurable, and enumerable, and handles
   * the case where we have a busted Reflect.decorate zombiefill (e.g. in Angular
   * apps).
   *
   * @internal
   */
  const desc = (obj, name, descriptor) => {
      // For backwards compatibility, we keep them configurable and enumerable.
      descriptor.configurable = true;
      descriptor.enumerable = true;
      if (
      // We check for Reflect.decorate each time, in case the zombiefill
      // is applied via lazy loading some Angular code.
      Reflect.decorate &&
          typeof name !== 'object') {
          // If we're called as a legacy decorator, and Reflect.decorate is present
          // then we have no guarantees that the returned descriptor will be
          // defined on the class, so we must apply it directly ourselves.
          Object.defineProperty(obj, name, descriptor);
      }
      return descriptor;
  };

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  let issueWarning;
  {
      // Ensure warnings are issued only 1x, even if multiple versions of Lit
      // are loaded.
      const issuedWarnings = (globalThis.litIssuedWarnings ??= new Set());
      // Issue a warning, if we haven't already.
      issueWarning = (code, warning) => {
          warning += code
              ? ` See https://lit.dev/msg/${code} for more information.`
              : '';
          if (!issuedWarnings.has(warning)) {
              console.warn(warning);
              issuedWarnings.add(warning);
          }
      };
  }
  /**
   * A property decorator that converts a class property into a getter that
   * executes a querySelector on the element's renderRoot.
   *
   * @param selector A DOMString containing one or more selectors to match.
   * @param cache An optional boolean which when true performs the DOM query only
   *     once and caches the result.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
   *
   * ```ts
   * class MyElement {
   *   @query('#first')
   *   first: HTMLDivElement;
   *
   *   render() {
   *     return html`
   *       <div id="first"></div>
   *       <div id="second"></div>
   *     `;
   *   }
   * }
   * ```
   * @category Decorator
   */
  function query(selector, cache) {
      return ((protoOrTarget, nameOrContext, descriptor) => {
          const doQuery = (el) => {
              const result = (el.renderRoot?.querySelector(selector) ?? null);
              if (result === null && cache && !el.hasUpdated) {
                  const name = typeof nameOrContext === 'object'
                      ? nameOrContext.name
                      : nameOrContext;
                  issueWarning('', `@query'd field ${JSON.stringify(String(name))} with the 'cache' ` +
                      `flag set for selector '${selector}' has been accessed before ` +
                      `the first update and returned null. This is expected if the ` +
                      `renderRoot tree has not been provided beforehand (e.g. via ` +
                      `Declarative Shadow DOM). Therefore the value hasn't been cached.`);
              }
              // TODO: if we want to allow users to assert that the query will never
              // return null, we need a new option and to throw here if the result
              // is null.
              return result;
          };
          if (cache) {
              // Accessors to wrap from either:
              //   1. The decorator target, in the case of standard decorators
              //   2. The property descriptor, in the case of experimental decorators
              //      on auto-accessors.
              //   3. Functions that access our own cache-key property on the instance,
              //      in the case of experimental decorators on fields.
              const { get, set } = typeof nameOrContext === 'object'
                  ? protoOrTarget
                  : descriptor ??
                      (() => {
                          const key = Symbol(`${String(nameOrContext)} (@query() cache)`)
                              ;
                          return {
                              get() {
                                  return this[key];
                              },
                              set(v) {
                                  this[key] = v;
                              },
                          };
                      })();
              return desc(protoOrTarget, nameOrContext, {
                  get() {
                      let result = get.call(this);
                      if (result === undefined) {
                          result = doQuery(this);
                          if (result !== null || this.hasUpdated) {
                              set.call(this, result);
                          }
                      }
                      return result;
                  },
              });
          }
          else {
              // This object works as the return type for both standard and
              // experimental decorators.
              return desc(protoOrTarget, nameOrContext, {
                  get() {
                      return doQuery(this);
                  },
              });
          }
      });
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  // Note, in the future, we may extend this decorator to support the use case
  // where the queried element may need to do work to become ready to interact
  // with (e.g. load some implementation code). If so, we might elect to
  // add a second argument defining a function that can be run to make the
  // queried element loaded/updated/ready.
  /**
   * A property decorator that converts a class property into a getter that
   * returns a promise that resolves to the result of a querySelector on the
   * element's renderRoot done after the element's `updateComplete` promise
   * resolves. When the queried property may change with element state, this
   * decorator can be used instead of requiring users to await the
   * `updateComplete` before accessing the property.
   *
   * @param selector A DOMString containing one or more selectors to match.
   *
   * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector
   *
   * ```ts
   * class MyElement {
   *   @queryAsync('#first')
   *   first: Promise<HTMLDivElement>;
   *
   *   render() {
   *     return html`
   *       <div id="first"></div>
   *       <div id="second"></div>
   *     `;
   *   }
   * }
   *
   * // external usage
   * async doSomethingWithFirst() {
   *  (await aMyElement.first).doSomething();
   * }
   * ```
   * @category Decorator
   */
  function queryAsync(selector) {
      return ((obj, name) => {
          return desc(obj, name, {
              async get() {
                  await this.updateComplete;
                  return this.renderRoot?.querySelector(selector) ?? null;
              },
          });
      });
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * A property decorator that converts a class property into a getter that
   * returns the `assignedElements` of the given `slot`. Provides a declarative
   * way to use
   * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).
   *
   * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.
   *
   * Example usage:
   * ```ts
   * class MyElement {
   *   @queryAssignedElements({ slot: 'list' })
   *   listItems!: Array<HTMLElement>;
   *   @queryAssignedElements()
   *   unnamedSlotEls!: Array<HTMLElement>;
   *
   *   render() {
   *     return html`
   *       <slot name="list"></slot>
   *       <slot></slot>
   *     `;
   *   }
   * }
   * ```
   *
   * Note, the type of this property should be annotated as `Array<HTMLElement>`.
   *
   * @category Decorator
   */
  function queryAssignedElements(options) {
      return ((obj, name) => {
          const { slot, selector } = options ?? {};
          const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;
          return desc(obj, name, {
              get() {
                  const slotEl = this.renderRoot?.querySelector(slotSelector);
                  const elements = slotEl?.assignedElements(options) ?? [];
                  return (selector === undefined
                      ? elements
                      : elements.filter((node) => node.matches(selector)));
              },
          });
      });
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * A property decorator that converts a class property into a getter that
   * returns the `assignedNodes` of the given `slot`.
   *
   * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.
   *
   * Example usage:
   * ```ts
   * class MyElement {
   *   @queryAssignedNodes({slot: 'list', flatten: true})
   *   listItems!: Array<Node>;
   *
   *   render() {
   *     return html`
   *       <slot name="list"></slot>
   *     `;
   *   }
   * }
   * ```
   *
   * Note the type of this property should be annotated as `Array<Node>`. Use the
   * queryAssignedElements decorator to list only elements, and optionally filter
   * the element list using a CSS selector.
   *
   * @category Decorator
   */
  function queryAssignedNodes(options) {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return ((obj, name) => {
          const { slot } = options ?? {};
          const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;
          return desc(obj, name, {
              get() {
                  const slotEl = this.renderRoot?.querySelector(slotSelector);
                  return (slotEl?.assignedNodes(options) ?? []);
              },
          });
      });
  }

  var css_248z$19 = css`:host{-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--sgds-body-color-default);font-family:var(--sgds-font-family-brand);font-size:var(--sgds-font-size-2);font-weight:var(--sgds-font-weight-regular);line-height:var(--sgds-line-height-body);margin:0;*,:after,:before{box-sizing:border-box}:disabled{cursor:not-allowed}@media (prefers-reduced-motion:no-preference){:root{scroll-behavior:smooth}}a[target=_blank]{align-items:center;display:flex;gap:var(--sgds-gap-2-xs)}::slotted(a[target=_blank]):after,a[target=_blank]:after{background-color:currentColor;content:"/";display:inline-block;-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M9.274 3.9H9.3a.6.6 0 0 1 0 1.2c-.85 0-1.451 0-1.922.039-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 5.361 6.41c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v5.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h5.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922a.6.6 0 1 1 1.2 0v.026c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.274c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V9.274c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C7.805 3.9 8.456 3.9 9.274 3.9Zm3.626.6a.6.6 0 0 1 .6-.6h6a.6.6 0 0 1 .6.6v6a.6.6 0 1 1-1.2 0V5.949l-5.976 5.975a.6.6 0 0 1-.848-.848L18.05 5.1H13.5a.6.6 0 0 1-.6-.6Z' fill='%230E0E0E'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M9.274 3.9H9.3a.6.6 0 0 1 0 1.2c-.85 0-1.451 0-1.922.039-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 5.361 6.41c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v5.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h5.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922a.6.6 0 1 1 1.2 0v.026c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.274c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V9.274c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C7.805 3.9 8.456 3.9 9.274 3.9Zm3.626.6a.6.6 0 0 1 .6-.6h6a.6.6 0 0 1 .6.6v6a.6.6 0 1 1-1.2 0V5.949l-5.976 5.975a.6.6 0 0 1-.848-.848L18.05 5.1H13.5a.6.6 0 0 1-.6-.6Z' fill='%230E0E0E'/%3E%3C/svg%3E");-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;padding:0 .45em}::slotted(svg){vertical-align:middle}}`;

  /**
   * @cssprop --sgds-{stateColor} - State colors in hexadecimal value
   * @cssprop --sgds-{stateColor}-rgb - State colors in rgb value
   * @cssprop --sgds-{stateColor}-{weights} - State colors with different weightage in hexadecimal value
   * @cssprop --sgds-gray-{weights} - State colors with different weightage in hexadecimal value
   * @cssprop --overlay-background-color - The drawer and modal component overlay background color
   * @cssprop --zindex-modal - The drawer and modal component z-index value
   */
  class SgdsElement extends LitElement {
      /** Emits a custom event with more convenient defaults. */
      emit(name, options) {
          const event = new CustomEvent(name, Object.assign({ bubbles: true, cancelable: false, composed: true, detail: {} }, options));
          this.dispatchEvent(event);
          return event;
      }
      static define(name, elementConstructor = this, options = {}) {
          const currentlyRegisteredConstructor = customElements.get(name);
          if (!currentlyRegisteredConstructor) {
              // We try to register as the actual class first. If for some reason that fails, we fall back to anonymous classes.
              // customElements can only have 1 class of the same "object id" per registry, so that is why the try {} catch {} exists.
              // Some tools like Jest Snapshots and if you import the constructor and call `new SgdsButton()` they will fail with
              //   the anonymous class version.
              try {
                  customElements.define(name, elementConstructor, options);
              }
              catch (_err) {
                  customElements.define(name, class extends elementConstructor {
                  }, options);
              }
              return;
          }
          // let newVersion = ' (unknown version)';
          // let existingVersion = newVersion;
          // if ('version' in elementConstructor && elementConstructor.version) {
          //   newVersion = ' v' + elementConstructor.version;
          // }
          // if ('version' in currentlyRegisteredConstructor && currentlyRegisteredConstructor.version) {
          //   existingVersion = ' v' + currentlyRegisteredConstructor.version;
          // }
          // // Need to make sure we're not working with null or empty strings before doing version comparisons.
          // if (newVersion && existingVersion && newVersion === existingVersion) {
          //   // If versions match, we don't need to warn anyone. Carry on.
          //   return;
          // }
          // console.warn(
          //   `Attempted to register <${name}>${newVersion}, but <${name}>${existingVersion} has already been registered.`
          // );
      }
      constructor() {
          super();
          Object.entries(this.constructor.dependencies).forEach(([name, component]) => {
              this.constructor.define(name, component);
          });
      }
  }
  SgdsElement.styles = [css_248z$19];
  /** @internal */
  SgdsElement.dependencies = {};

  var css_248z$18 = css`:host([variant=border]) .accordion{border:var(--sgds-border-width-1) solid var(--sgds-border-color-muted);border-radius:var(--sgds-border-radius-md)}`;

  const VALID_KEYS = ["Enter", "ArrowUp", "ArrowLeft", "ArrowDown", "ArrowRight"];
  /**
   * @summary A dropdown mechanism that allow users to either show or hide related content. `SgdsAccordion` is a wrapper to manage the behaviour for multiple `SgdsAccordionItems`
   * @slot default - slot for accordion-item
   *
   */
  class SgdsAccordion extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Allows multiple accordion items to be opened at the same time */
          this.allowMultiple = false;
          /** The variant of accordion */
          this.variant = "default";
          /** The density of accordion */
          this.density = "default";
      }
      /** @internal */
      get items() {
          return [...(this.defaultNodes || [])].filter((node) => typeof node.tagName !== "undefined");
      }
      firstUpdated() {
          const items = [...this.items];
          items.forEach((item, index) => {
              if (items.length > 1) {
                  switch (index) {
                      case 0:
                          item.setAttribute("first-of-type", "");
                          break;
                      case items.length - 1:
                          item.setAttribute("last-of-type", "");
                          break;
                      default:
                          item.setAttribute("nth-of-type", "");
                  }
              }
              item.setAttribute("variant", this.variant);
              item.setAttribute("density", this.density);
          });
      }
      async _onToggle(event) {
          if (this.allowMultiple) {
              // No toggling when `allowMultiple` or the user prevents it.
              return;
          }
          const items = [...this.items];
          if (items && !items.length) {
              // no toggling when there aren't items.
              return;
          }
          items.forEach(item => {
              // Covers all elements within accordion-item
              if (!event.composedPath().includes(item)) {
                  // Close all the items that didn't dispatch the event.
                  item.open = false;
              }
          });
      }
      async _onKeyboardToggle(event) {
          if (!VALID_KEYS.includes(event.key))
              return;
          return this._onToggle(event);
      }
      render() {
          return html$1 `
      <div class="accordion">
        <slot @click=${this._onToggle} @keydown=${this._onKeyboardToggle}></slot>
      </div>
    `;
      }
  }
  SgdsAccordion.styles = [...SgdsElement.styles, css_248z$18];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsAccordion.prototype, "allowMultiple", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsAccordion.prototype, "variant", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsAccordion.prototype, "density", void 0);
  __decorate([
      queryAssignedElements()
  ], SgdsAccordion.prototype, "defaultNodes", void 0);

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  const PartType = {
      ATTRIBUTE: 1,
      CHILD: 2,
      PROPERTY: 3,
      BOOLEAN_ATTRIBUTE: 4,
      EVENT: 5,
      ELEMENT: 6,
  };
  /**
   * Creates a user-facing directive function from a Directive class. This
   * function has the same parameters as the directive's render() method.
   */
  const directive = (c) => (...values) => ({
      // This property needs to remain unminified.
      ['_$litDirective$']: c,
      values,
  });
  /**
   * Base class for creating custom directives. Users should extend this class,
   * implement `render` and/or `update`, and then pass their subclass to
   * `directive`.
   */
  class Directive {
      constructor(_partInfo) { }
      // See comment in Disconnectable interface for why this is a getter
      get _$isConnected() {
          return this._$parent._$isConnected;
      }
      /** @internal */
      _$initialize(part, parent, attributeIndex) {
          this.__part = part;
          this._$parent = parent;
          this.__attributeIndex = attributeIndex;
      }
      /** @internal */
      _$resolve(part, props) {
          return this.update(part, props);
      }
      update(_part, props) {
          return this.render(...props);
      }
  }

  /**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  class ClassMapDirective extends Directive {
      constructor(partInfo) {
          super(partInfo);
          if (partInfo.type !== PartType.ATTRIBUTE ||
              partInfo.name !== 'class' ||
              partInfo.strings?.length > 2) {
              throw new Error('`classMap()` can only be used in the `class` attribute ' +
                  'and must be the only part in the attribute.');
          }
      }
      render(classInfo) {
          // Add spaces to ensure separation from static classes
          return (' ' +
              Object.keys(classInfo)
                  .filter((key) => classInfo[key])
                  .join(' ') +
              ' ');
      }
      update(part, [classInfo]) {
          // Remember dynamic classes on the first render
          if (this._previousClasses === undefined) {
              this._previousClasses = new Set();
              if (part.strings !== undefined) {
                  this._staticClasses = new Set(part.strings
                      .join(' ')
                      .split(/\s/)
                      .filter((s) => s !== ''));
              }
              for (const name in classInfo) {
                  if (classInfo[name] && !this._staticClasses?.has(name)) {
                      this._previousClasses.add(name);
                  }
              }
              return this.render(classInfo);
          }
          const classList = part.element.classList;
          // Remove old classes that no longer apply
          for (const name of this._previousClasses) {
              if (!(name in classInfo)) {
                  classList.remove(name);
                  this._previousClasses.delete(name);
              }
          }
          // Add or remove classes based on their classMap value
          for (const name in classInfo) {
              // We explicitly want a loose truthy check of `value` because it seems
              // more convenient that '' and 0 are skipped.
              const value = !!classInfo[name];
              if (value !== this._previousClasses.has(name) &&
                  !this._staticClasses?.has(name)) {
                  if (value) {
                      classList.add(name);
                      this._previousClasses.add(name);
                  }
                  else {
                      classList.remove(name);
                      this._previousClasses.delete(name);
                  }
              }
          }
          return noChange;
      }
  }
  /**
   * A directive that applies dynamic CSS classes.
   *
   * This must be used in the `class` attribute and must be the only part used in
   * the attribute. It takes each property in the `classInfo` argument and adds
   * the property name to the element's `classList` if the property value is
   * truthy; if the property value is falsy, the property name is removed from
   * the element's `class`.
   *
   * For example `{foo: bar}` applies the class `foo` if the value of `bar` is
   * truthy.
   *
   * @param classInfo
   */
  const classMap = directive(ClassMapDirective);

  //
  // Animates an element using keyframes. Returns a promise that resolves after the animation completes or gets canceled.
  //
  function animateTo(el, keyframes, options) {
      return new Promise(resolve => {
          if ((options === null || options === void 0 ? void 0 : options.duration) === Infinity) {
              throw new Error("Promise-based animations must be finite.");
          }
          const animation = el.animate(keyframes, Object.assign(Object.assign({}, options), { duration: prefersReducedMotion() ? 0 : options === null || options === void 0 ? void 0 : options.duration }));
          animation.addEventListener("cancel", resolve, { once: true });
          animation.addEventListener("finish", resolve, { once: true });
      });
  }
  //
  // Tells if the user has enabled the "reduced motion" setting in their browser or OS.
  //
  function prefersReducedMotion() {
      const query = window.matchMedia("(prefers-reduced-motion: reduce)");
      return query.matches;
  }
  // We can't animate `height: auto`, but we can calculate the height and shim keyframes by replacing it with the
  // element's scrollHeight before the animation.
  function shimKeyframesHeightAuto(keyframes, calculatedHeight) {
      return keyframes.map(keyframe => (Object.assign(Object.assign({}, keyframe), { height: keyframe.height === "auto" ? `${calculatedHeight}px` : keyframe.height })));
  }
  //
  // Stops all active animations on the target element. Returns a promise that resolves after all animations are canceled.
  //
  function stopAnimations(el) {
      return Promise.all(el.getAnimations().map(animation => {
          return new Promise(resolve => {
              const handleAnimationEvent = requestAnimationFrame(resolve);
              animation.addEventListener("cancel", () => handleAnimationEvent, { once: true });
              animation.addEventListener("finish", () => handleAnimationEvent, { once: true });
              animation.cancel();
          });
      }));
  }

  const defaultAnimationRegistry = new Map();
  const customAnimationRegistry = new WeakMap();
  function ensureAnimation(animation) {
      return animation !== null && animation !== void 0 ? animation : { keyframes: [], options: { duration: 0 } };
  }
  //
  // Given an ElementAnimation, this function returns a new ElementAnimation where the keyframes property reflects either
  // keyframes or rtlKeyframes depending on the specified directionality.
  //
  function getLogicalAnimation(animation) {
      return animation;
  }
  //
  // Gets an element's animation. Falls back to the default if no animation is found.
  //
  function getAnimation(el, animationName) {
      const customAnimation = customAnimationRegistry.get(el);
      // Check for a custom animation
      if (customAnimation === null || customAnimation === void 0 ? void 0 : customAnimation[animationName]) {
          return getLogicalAnimation(customAnimation[animationName]);
      }
      // Check for a default animation
      const defaultAnimation = defaultAnimationRegistry.get(animationName);
      if (defaultAnimation) {
          return getLogicalAnimation(defaultAnimation);
      }
      // Fall back to an empty animation
      return {
          keyframes: [],
          options: { duration: 0 }
      };
  }
  //
  // Sets a default animation. Components should use the `name.animation` for primary animations and `name.part.animation`
  // for secondary animations, e.g. `dialog.show` and `dialog.overlay.show`. For modifiers, use `drawer.showTop`.
  //
  function setDefaultAnimation(animationName, animation) {
      defaultAnimationRegistry.set(animationName, ensureAnimation(animation));
  }

  /** Waits for a specific event to be emitted from an element. Ignores events that bubble up from child elements. */
  function waitForEvent(el, eventName) {
      return new Promise(resolve => {
          function done(event) {
              if (event.target === el) {
                  el.removeEventListener(eventName, done);
                  resolve();
              }
          }
          el.addEventListener(eventName, done);
      });
  }

  // @watch decorator
  //
  // Runs when an observed property changes, e.g. @property or @state, but before the component updates.
  //
  // To wait for an update to complete after a change occurs, use `await this.updateComplete` in the handler. To start
  // watching after the initial update/render, use `{ waitUntilFirstUpdate: true }` or `this.hasUpdated` in the handler.
  //
  // Usage:
  //
  //  @watch('propName')
  //  handlePropChange(oldValue, newValue) {
  //    ...
  //  }
  function watch(propName, options) {
      const resolvedOptions = Object.assign({ waitUntilFirstUpdate: false }, options);
      return (proto, decoratedFnName) => {
          // @ts-expect-error -- update is a protected property
          const { update } = proto;
          if (propName in proto) {
              const propNameKey = propName;
              // @ts-expect-error -- update is a protected property
              proto.update = function (changedProps) {
                  if (changedProps.has(propNameKey)) {
                      const oldValue = changedProps.get(propNameKey);
                      const newValue = this[propNameKey];
                      if (oldValue !== newValue) {
                          if (!resolvedOptions.waitUntilFirstUpdate || this.hasUpdated) {
                              this[decoratedFnName](oldValue, newValue);
                          }
                      }
                  }
                  update.call(this, changedProps);
              };
          }
      };
  }

  var css_248z$17 = css`:host([variant=border][last-of-type]) .accordion-item{border-bottom:none}:host([density=compact]) .accordion-btn{font-size:var(--sgds-font-size-2);line-height:var(--sgds-line-height-min);padding:var(--sgds-padding-sm) var(--sgds-padding-sm)}:host([density=compact]) .content{padding:var(--sgds-padding-xs) var(--sgds-padding-sm) var(--sgds-padding-sm)}.accordion-item{border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-muted)}.accordion-btn{align-items:center;background-color:var(--sgds-bg-transparent);border:0;color:var(--sgds-color-default);display:flex;font-size:var(--sgds-font-size-3);gap:var(--sgds-gap-sm);line-height:var(--sgds-line-height-heading);overflow-anchor:none;padding:var(--sgds-padding-lg) var(--sgds-padding-lg);text-align:left;width:100%}@media (prefers-reduced-motion:reduce){.accordion-btn,.accordion-btn:after{transition:none}}.accordion-btn:not(.collapsed){font-weight:var(--sgds-font-weight-semibold)}.accordion-btn:not(.disabled):hover,.accordion-btn:not(:disabled):hover{background-color:var(--sgds-bg-translucent-subtle);z-index:2}.accordion-btn:not(.disabled):focus,.accordion-btn:not(.disabled):focus-visible,.accordion-btn:not(:disabled):focus,.accordion-btn:not(:disabled):focus-visible{background-color:var(--sgds-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus);outline:0;z-index:3}.accordion-btn.disabled,.accordion-btn:disabled{cursor:not-allowed;opacity:var(--sgds-opacity-50)}slot[name=caret] sgds-icon,slot[name=caret]::slotted(*){color:var(--sgds-color-subtle);margin-left:auto;transition:transform .2s ease-in-out}.accordion-btn:not(.collapsed) slot[name=caret] sgds-icon,.accordion-btn:not(.collapsed) slot[name=caret]::slotted(*){transform:rotate(-180deg)}.accordion-body{overflow:hidden;padding:0}.content{display:block;padding:var(--sgds-padding-xs) var(--sgds-padding-lg) var(--sgds-padding-lg)}.hidden{display:none}`;

  /**
   *
   * @event sgds-show - Emitted on show.
   * @event sgds-after-show - Emitted on show after animation has completed.
   * @event sgds-hide - Emitted on hide.
   * @event sgds-after-hide - Emitted on hide after animation has completed.
   *
   * @slot header - The accordion-item button header slot.
   * @slot content - The accordion-item content slot.
   * @slot caret - The caret icon of accordion-item.
   *
   */
  class SgdsAccordionItem extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Controls whether accordion-item is open or close */
          this.open = false;
          /** Disables the accordion item */
          this.disabled = false;
      }
      firstUpdated() {
          if (!this.open)
              this.body.classList.add("hidden");
      }
      handleSummaryClick() {
          if (this.open) {
              this.hide();
          }
          else {
              this.show();
          }
          this.header.focus();
      }
      handleSummaryKeyDown(event) {
          if (event.key === "Enter" || event.key === " ") {
              event.preventDefault();
              if (this.open) {
                  this.hide();
              }
              else {
                  this.show();
              }
          }
          if (event.key === "ArrowUp" || event.key === "ArrowLeft") {
              event.preventDefault();
              this.hide();
          }
          if (event.key === "ArrowDown" || event.key === "ArrowRight") {
              event.preventDefault();
              this.show();
          }
      }
      async handleOpenChange() {
          if (this.open) {
              // Show
              const sgdsShow = this.emit("sgds-show", { cancelable: true });
              if (sgdsShow.defaultPrevented) {
                  this.open = false;
                  return;
              }
              await stopAnimations(this.body);
              this.body.classList.remove("hidden");
              const { keyframes, options } = getAnimation(this, "accordion.show");
              await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
              this.emit("sgds-after-show");
          }
          else {
              // Hide
              const slHide = this.emit("sgds-hide", { cancelable: true });
              if (slHide.defaultPrevented) {
                  this.open = true;
                  return;
              }
              await stopAnimations(this.body);
              const { keyframes, options } = getAnimation(this, "accordion.hide");
              const animationDuration = options.duration;
              // Workaround to fix GSIB delay after animateTo.
              //Setting a timeout of duration slightly less than animation's duraton to prevent case where animation runs faster than .hidden class is added
              setTimeout(() => {
                  this.body.classList.add("hidden");
              }, animationDuration - 20);
              await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
              this.emit("sgds-after-hide");
          }
      }
      /** Shows the accordion. */
      async show() {
          if (this.open) {
              return;
          }
          this.open = true;
          return waitForEvent(this, "sgds-after-show");
      }
      /** Hide the accordion */
      async hide() {
          if (!this.open) {
              return;
          }
          this.open = false;
          return waitForEvent(this, "sgds-after-hide");
      }
      render() {
          return html$1 `
      <div class="accordion-item">
        <button
          class=${classMap({
            "accordion-btn": true,
            disabled: this.disabled,
            collapsed: !this.open
        })}
          ?disabled=${this.disabled}
          role="button"
          aria-expanded=${this.open ? "true" : "false"}
          aria-disabled=${this.disabled ? "true" : "false"}
          aria-controls="content"
          tabindex=${this.disabled ? "-1" : "0"}
          @click=${this.handleSummaryClick}
          @keydown=${this.handleSummaryKeyDown}
        >
          <slot name="header"></slot>
          <slot name="caret">
            <sgds-icon name="chevron-down" size=${this.getAttribute("density") === "compact" ? "md" : "lg"}></sgds-icon>
          </slot>
        </button>
        <div class="accordion-body">
          <slot id="content" name="content" class="content" role="region" aria-labelledby="header"></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsAccordionItem.styles = [...SgdsElement.styles, css_248z$17];
  __decorate([
      query(".accordion-item")
  ], SgdsAccordionItem.prototype, "accordion", void 0);
  __decorate([
      query(".accordion-btn")
  ], SgdsAccordionItem.prototype, "header", void 0);
  __decorate([
      query(".accordion-body")
  ], SgdsAccordionItem.prototype, "body", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsAccordionItem.prototype, "open", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsAccordionItem.prototype, "disabled", void 0);
  __decorate([
      watch("open", { waitUntilFirstUpdate: true })
  ], SgdsAccordionItem.prototype, "handleOpenChange", null);
  setDefaultAnimation("accordion.show", {
      keyframes: [
          { height: "0", opacity: "0" },
          { height: "auto", opacity: "1" }
      ],
      options: { duration: 350, easing: "ease-in-out" }
  });
  setDefaultAnimation("accordion.hide", {
      keyframes: [
          { height: "auto", opacity: "1" },
          { height: "0", opacity: "0" }
      ],
      options: { duration: 350, easing: "ease-in-out" }
  });

  /**
   *
   * @param name tagname of custom element
   * @returns boolean
   */
  function isRegistered(name) {
      return !!customElements.get(name);
  }
  function register(name, constructor) {
      if (!customElements.get(name)) {
          customElements.define(name, constructor);
      }
  }
  function warnUnregisteredElements(name) {
      if (isRegistered(name)) {
          return true;
      }
      else {
          console.error(`Custom element of name : ${name} is not registered. Remember to import the component file for custom element registration`);
          return false;
      }
  }

  register("sgds-accordion", SgdsAccordion);
  register("sgds-accordion-item", SgdsAccordionItem);

  /**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * Prevents JSON injection attacks.
   *
   * The goals of this brand:
   *   1) fast to check
   *   2) code is small on the wire
   *   3) multiple versions of Lit in a single page will all produce mutually
   *      interoperable StaticValues
   *   4) normal JSON.parse (without an unusual reviver) can not produce a
   *      StaticValue
   *
   * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but
   * we don't care about the key, so we break ties via (2) and use the empty
   * string.
   */
  const brand = Symbol.for('');
  /** Safely extracts the string part of a StaticValue. */
  const unwrapStaticValue = (value) => {
      if (value?.r !== brand) {
          return undefined;
      }
      return value?.['_$litStatic$'];
  };
  const textFromStatic = (value) => {
      if (value['_$litStatic$'] !== undefined) {
          return value['_$litStatic$'];
      }
      else {
          throw new Error(`Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
      }
  };
  /**
   * Tags a string literal so that it behaves like part of the static template
   * strings instead of a dynamic value.
   *
   * The only values that may be used in template expressions are other tagged
   * `literal` results or `unsafeStatic` values (note that untrusted content
   * should never be passed to `unsafeStatic`).
   *
   * Users must take care to ensure that adding the static string to the template
   * results in well-formed HTML, or else templates may break unexpectedly.
   *
   * Static values can be changed, but they will cause a complete re-render since
   * they effectively create a new template.
   */
  const literal = (strings, ...values) => ({
      ['_$litStatic$']: values.reduce((acc, v, idx) => acc + textFromStatic(v) + strings[idx + 1], strings[0]),
      r: brand,
  });
  const stringsCache = new Map();
  /**
   * Wraps a lit-html template tag (`html` or `svg`) to add static value support.
   */
  const withStatic = (coreTag) => (strings, ...values) => {
      const l = values.length;
      let staticValue;
      let dynamicValue;
      const staticStrings = [];
      const dynamicValues = [];
      let i = 0;
      let hasStatics = false;
      let s;
      while (i < l) {
          s = strings[i];
          // Collect any unsafeStatic values, and their following template strings
          // so that we treat a run of template strings and unsafe static values as
          // a single template string.
          while (i < l &&
              ((dynamicValue = values[i]),
                  (staticValue = unwrapStaticValue(dynamicValue))) !== undefined) {
              s += staticValue + strings[++i];
              hasStatics = true;
          }
          // If the last value is static, we don't need to push it.
          if (i !== l) {
              dynamicValues.push(dynamicValue);
          }
          staticStrings.push(s);
          i++;
      }
      // If the last value isn't static (which would have consumed the last
      // string), then we need to add the last string.
      if (i === l) {
          staticStrings.push(strings[l]);
      }
      if (hasStatics) {
          const key = staticStrings.join('$$lit$$');
          strings = stringsCache.get(key);
          if (strings === undefined) {
              // Beware: in general this pattern is unsafe, and doing so may bypass
              // lit's security checks and allow an attacker to execute arbitrary
              // code and inject arbitrary content.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              staticStrings.raw = staticStrings;
              stringsCache.set(key, (strings = staticStrings));
          }
          values = dynamicValues;
      }
      return coreTag(strings, ...values);
  };
  /**
   * Interprets a template literal as an HTML template that can efficiently
   * render to and update a container.
   *
   * Includes static value support from `lit-html/static.js`.
   */
  const html = withStatic(html$1);

  /**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * For AttributeParts, sets the attribute if the value is defined and removes
   * the attribute if the value is undefined.
   *
   * For other part types, this directive is a no-op.
   */
  const ifDefined = (value) => value ?? nothing;

  var css_248z$16 = css`:host{--sgds-close-btn-border-radius:var(--sgds-border-radius-sm);display:inline-flex}.btn-close{align-items:center;background-color:var(--sgds-bg-transparent);border:0;border:var(--sgds-border-width-1) solid var(--sgds-border-color-transparent);border-radius:var(--sgds-close-btn-border-radius);cursor:pointer;display:flex;height:var(--sgds-dimension-32);justify-content:center;padding:0;position:relative;width:var(--sgds-dimension-32)}.btn-close-light{color:var(--sgds-color-fixed-light)}.btn-close-dark{color:var(--sgds-color-fixed-dark)}.btn-close:hover{background-color:var(--sgds-bg-translucent)}.btn-close:focus,.btn-close:focus-visible{background-color:var(--sgds-bg-translucent);box-shadow:var(--sgds-box-shadow-focus);outline:0}.btn-close-sm{height:var(--sgds-dimension-24);width:var(--sgds-dimension-24)}.btn-close.btn-close-sm{height:var(--sgds-icon-size-sm);width:var(--sgds-icon-size-sm)}`;

  /**
   * @summary Close button for closing actions. Used in Modal, Drawer, Alert and Toast.
   *
   * @cssprop --sgds-close-btn-border-radius - The border radius of close button border
   *
   */
  class SgdsCloseButton extends SgdsElement {
      constructor() {
          super(...arguments);
          this.ariaLabel = "Close button";
          /** Specifies a large or small button */
          this.size = "md";
          this.variant = "default";
          this._clickHandler = () => {
              return;
          };
      }
      _handleClick() {
          this.removeEventListener("click", this._clickHandler);
          this.addEventListener("click", this._clickHandler);
      }
      firstUpdated() {
          /** Cannot register sgds-icon as dependency due to some circular dependencies, so we check and warn instead */
          warnUnregisteredElements("sgds-icon");
      }
      render() {
          return html$1 `
      <button
        class=${classMap({
            "btn-close": true,
            [`btn-close-${this.size}`]: this.size,
            "btn-close-light": this.variant === "light",
            "btn-close-dark": this.variant === "dark"
        })}
        aria-label=${ifDefined(this.ariaLabel)}
        @click=${this._handleClick}
      >
        <sgds-icon name="cross" size=${this.size}></sgds-icon>
      </button>
    `;
      }
  }
  SgdsCloseButton.styles = [...SgdsElement.styles, css_248z$16];
  __decorate([
      property({ type: String })
  ], SgdsCloseButton.prototype, "ariaLabel", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCloseButton.prototype, "size", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCloseButton.prototype, "variant", void 0);

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  const HTML_RESULT = 1;
  class UnsafeHTMLDirective extends Directive {
      constructor(partInfo) {
          super(partInfo);
          this._value = nothing;
          if (partInfo.type !== PartType.CHILD) {
              throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);
          }
      }
      render(value) {
          if (value === nothing || value == null) {
              this._templateResult = undefined;
              return (this._value = value);
          }
          if (value === noChange) {
              return value;
          }
          if (typeof value != 'string') {
              throw new Error(`${this.constructor.directiveName}() called with a non-string value`);
          }
          if (value === this._value) {
              return this._templateResult;
          }
          this._value = value;
          const strings = [value];
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          strings.raw = strings;
          // WARNING: impersonating a TemplateResult like this is extremely
          // dangerous. Third-party directives should not do this.
          return (this._templateResult = {
              // Cast to a known set of integers that satisfy ResultType so that we
              // don't have to export ResultType and possibly encourage this pattern.
              // This property needs to remain unminified.
              ['_$litType$']: this.constructor
                  .resultType,
              strings,
              values: [],
          });
      }
  }
  UnsafeHTMLDirective.directiveName = 'unsafeHTML';
  UnsafeHTMLDirective.resultType = HTML_RESULT;

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  const SVG_RESULT = 2;
  class UnsafeSVGDirective extends UnsafeHTMLDirective {
  }
  UnsafeSVGDirective.directiveName = 'unsafeSVG';
  UnsafeSVGDirective.resultType = SVG_RESULT;
  /**
   * Renders the result as SVG, rather than text.
   *
   * The values `undefined`, `null`, and `nothing`, will all result in no content
   * (empty string) being rendered.
   *
   * Note, this is unsafe to use with any user-provided input that hasn't been
   * sanitized or escaped, as it may lead to cross-site-scripting
   * vulnerabilities.
   */
  const unsafeSVG = directive(UnsafeSVGDirective);

  var css_248z$15 = css`:host{color:inherit;display:inline-flex}:host([size=sm]) svg{height:var(--sgds-icon-size-sm);width:var(--sgds-icon-size-sm)}:host([size=md]) svg{height:var(--sgds-icon-size-md);width:var(--sgds-icon-size-md)}:host([size=xl]) svg{height:var(--sgds-icon-size-xl);width:var(--sgds-icon-size-xl)}:host([size="2-xl"]) svg{height:var(--sgds-icon-size-2-xl);width:var(--sgds-icon-size-2-xl)}:host([size="3-xl"]) svg{height:var(--sgds-icon-size-3-xl);width:var(--sgds-icon-size-3-xl)}svg{display:inline-block;height:var(--sgds-icon-size-lg);width:var(--sgds-icon-size-lg)}`;

  /**
   * @summary Icons offer a form of visual shorthand that we are all familiar with. They can label, inform and aid navigation quickly and effectively in minimal space. Icons must first and foremost communicate meaning. By default, the icon component renders icons from `SgdsIcon` library set
   */
  class SgdsIcon extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Specifies a small, medium or large icon, the size is medium by default. */
          this.size = "lg";
          /** @internal */
          this._svgContent = null;
      }
      async updated(changedProperties) {
          if (changedProperties.has("name")) {
              await this._loadSvg(this.name);
          }
      }
      async _loadSvg(name) {
          if (name) {
              const pascalName = name
                  .split("-")
                  .map(name => String(name).charAt(0).toUpperCase() + String(name).slice(1))
                  .join("");
              try {
                  const iconRegistry$1 = await Promise.resolve().then(function () { return iconRegistry; });
                  const svg = iconRegistry$1[pascalName];
                  if (svg) {
                      this._svgContent = svg;
                  }
                  else {
                      throw new Error("icon `name` not found");
                  }
              }
              catch (error) {
                  console.error(`Unable to load icon: ${name}.`, error);
              }
          }
      }
      render() {
          return html `${unsafeSVG(this._svgContent)}`;
      }
  }
  SgdsIcon.styles = [...SgdsElement.styles, css_248z$15];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsIcon.prototype, "name", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsIcon.prototype, "size", void 0);
  __decorate([
      state()
  ], SgdsIcon.prototype, "_svgContent", void 0);

  var css_248z$14 = css`:host([variant=success]) .alert{background-color:var(--sgds-success-surface-default)}:host([variant=warning]) .alert{--sgds-alert-color:var(--sgds-color-fixed-dark);background-color:var(--sgds-warning-surface-default)}:host([variant=danger]) .alert{background-color:var(--sgds-danger-surface-default)}:host([variant=neutral]) .alert{background-color:var(--sgds-neutral-surface-default)}:host([variant=success][outlined]) .alert{background-color:var(--sgds-success-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-success-border-color-default)}:host([variant=warning][outlined]) .alert{background-color:var(--sgds-warning-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-warning-border-color-default)}:host([variant=danger][outlined]) .alert{background-color:var(--sgds-danger-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-danger-border-color-default)}:host([variant=neutral][outlined]) .alert{background-color:var(--sgds-neutral-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-neutral-border-color-default)}.alert{--sgds-alert-color:var(--sgds-color-fixed-light);background-color:var(--sgds-primary-surface-default);border:var(--sgds-border-width-1) solid var(--sgds-border-color-transparent);border-radius:var(--sgds-border-radius-md);color:var(--sgds-alert-color);display:flex;flex-direction:row;gap:var(--sgds-gap-sm);padding:var(--sgds-padding-lg)}.alert.outlined{--sgds-alert-color:var(--sgds-color-fixed-dark);background-color:var(--sgds-primary-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-primary-border-color-default)}.alert-content{align-items:flex-start;display:flex;flex:1 0 0;flex-direction:column;gap:var(--sgds-gap-2-xs);padding-right:var(--sgds-padding-2-xl)}.alert-title{font-weight:var(--sgds-font-weight-semibold)}`;

  /**
   * @summary Alerts provide short, timely, and relevant information for your users. It can be a simple text message or customised HTML content with paragraphs, headings and links.
   *
   * @slot default - The alert's main content.
   * @slot icon - An icon to show in the alert. Pass in SVG elements.
   *
   * @event sgds-show - Emitted when the alert appears.
   * @event sgds-hide - Emitted after the alert closes.
   *
   */
  class SgdsAlert extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Controls the appearance of the alert  */
          this.show = false;
          /** Enables a close button that allows the user to dismiss the alert. */
          this.dismissible = false;
          /** The alert's theme variant. */
          this.variant = "info";
          /** Controls the alert visual between a lighter outline and a solid darker variant. */
          this.outlined = false;
      }
      /** Closes the alert  */
      close() {
          this.show = false;
      }
      /**@internal */
      _handleShowChange() {
          this.show ? this.emit("sgds-show") : this.emit("sgds-hide");
      }
      render() {
          return (this.dismissible && this.show) || !this.dismissible
              ? html `
          <div
            class="${classMap({
                alert: true,
                show: this.show,
                [`alert-dismissible`]: this.dismissible,
                outlined: this.outlined
            })}"
            role="alert"
            aria-hidden=${this.show ? "false" : "true"}
          >
            <slot name="icon"></slot>
            <div class="alert-content">
              ${this.title ? html `<div class="alert-title">${this.title}</div>` : nothing}
              <slot></slot>
            </div>
            ${this.dismissible
                ? html `<sgds-close-button
                  aria-label="close the alert"
                  @click=${this.close}
                  variant=${this.outlined ? "dark" : "light"}
                ></sgds-close-button>`
                : nothing}
          </div>
        `
              : nothing;
      }
  }
  SgdsAlert.styles = [...SgdsElement.styles, css_248z$14];
  /**@internal */
  SgdsAlert.dependencies = {
      "sgds-close-button": SgdsCloseButton,
      "sgds-icon": SgdsIcon
  };
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsAlert.prototype, "show", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsAlert.prototype, "dismissible", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsAlert.prototype, "variant", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsAlert.prototype, "outlined", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsAlert.prototype, "title", void 0);
  __decorate([
      watch("show")
  ], SgdsAlert.prototype, "_handleShowChange", null);

  var css_248z$13 = css`:host{cursor:pointer;display:inline-block}.alert-link,.alert-link:hover{color:var(--sgds-alert-color);text-decoration-line:underline}.alert-link:focus,.alert-link:focus-visible{box-shadow:var(--sgds-box-shadow-focus);outline:0}`;

  var css_248z$12 = css`::slotted(a[target=_blank]:after),a[target=_blank]:after{background-color:currentColor;content:"/";display:inline-block;margin:0 .125rem;-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M9.274 3.9H9.3a.6.6 0 0 1 0 1.2c-.85 0-1.451 0-1.922.039-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 5.361 6.41c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v5.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h5.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922a.6.6 0 1 1 1.2 0v.026c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.274c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V9.274c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C7.805 3.9 8.456 3.9 9.274 3.9Zm3.626.6a.6.6 0 0 1 .6-.6h6a.6.6 0 0 1 .6.6v6a.6.6 0 1 1-1.2 0V5.949l-5.976 5.975a.6.6 0 0 1-.848-.848L18.05 5.1H13.5a.6.6 0 0 1-.6-.6Z' fill='%230E0E0E'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M9.274 3.9H9.3a.6.6 0 0 1 0 1.2c-.85 0-1.451 0-1.922.039-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 5.361 6.41c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v5.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h5.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922a.6.6 0 1 1 1.2 0v.026c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.274c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V9.274c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C7.805 3.9 8.456 3.9 9.274 3.9Zm3.626.6a.6.6 0 0 1 .6-.6h6a.6.6 0 0 1 .6.6v6a.6.6 0 1 1-1.2 0V5.949l-5.976 5.975a.6.6 0 0 1-.848-.848L18.05 5.1H13.5a.6.6 0 0 1-.6-.6Z' fill='%230E0E0E'/%3E%3C/svg%3E");-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;mask-size:73%;-webkit-mask-size:73%;padding:0 .45em}`;

  /**
   * @summary Alert link are used within the alert's message that is passed into the default slot of `<sgds-alert>`
   *
   * @slot default - The text content of the anchor element
   */
  class SgdsAlertLink extends SgdsElement {
      render() {
          return html `
      <a class="alert-link" href=${ifDefined(this.href)} target=${ifDefined(this.target)} tabindex="0"><slot></slot></a>
    `;
      }
  }
  SgdsAlertLink.styles = [...SgdsElement.styles, css_248z$12, css_248z$13];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsAlertLink.prototype, "href", void 0);
  __decorate([
      property()
  ], SgdsAlertLink.prototype, "target", void 0);

  register("sgds-alert", SgdsAlert);
  register("sgds-alert-link", SgdsAlertLink);

  var css_248z$11 = css`:host{display:inline-flex}:host([variant=success]) .badge{background-color:var(--sgds-success-surface-default)}:host([variant=danger]) .badge{background-color:var(--sgds-danger-surface-default)}:host([variant=warning]) .badge{background-color:var(--sgds-warning-surface-default);color:var(--sgds-color-fixed-dark)}:host([variant=neutral]) .badge{background-color:var(--sgds-neutral-surface-default)}:host([variant=success][outlined]) .badge{background-color:var(--sgds-success-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-success-border-color-default)}:host([variant=danger][outlined]) .badge{background-color:var(--sgds-danger-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-danger-border-color-default)}:host([variant=warning][outlined]) .badge{background-color:var(--sgds-warning-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-warning-border-color-default)}:host([variant=neutral][outlined]) .badge{background-color:var(--sgds-neutral-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-neutral-border-color-default)}.badge{align-items:center;background-color:var(--sgds-primary-surface-default);border:var(--sgds-border-width-1) solid var(--sgds-border-color-transparent);border-radius:var(--sgds-border-radius-sm);color:var(--sgds-color-fixed-light);display:inline-flex;font-size:var(--sgds-font-size-1);height:var(--sgds-dimension-24);justify-content:center;min-width:var(--sgds-dimension-24);padding:var(--sgds-padding-none) var(--sgds-padding-2-xs)}.badge.outlined{background-color:var(--sgds-primary-surface-muted);border:var(--sgds-border-width-1) solid var(--sgds-primary-border-color-default);color:var(--sgds-color-fixed-dark)}.badge-label{line-height:var(--sgds-line-height-min);padding:var(--sgds-padding-none) var(--sgds-padding-2-xs)}.badge-dismissible{padding-right:0}.badge-dimissible sgds-close-button{--sgds-close-btn-border-radius:var(--sgds-border-radius-sm)}slot::slotted(*){font-size:14px;font-weight:400}`;

  /**
   * @summary Badges can be used to highlight important bits of information such as labels, notifications & status.
   *
   * @slot default - slot for badge
   * @slot icon - The slot for icon to the left of the badge text
   *
   * @event sgds-show - Emitted when the badge appears.
   * @event sgds-hide - Emitted after the badge closes.
   */
  class SgdsBadge extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Controls the appearance of the dismissible badge. This prop only applies when dismissible is true  */
          this.show = false;
          /** One or more button variant combinations buttons may be one of a variety of visual variants such as: `info`, `success`, `danger`, `warning`, 'neutral' */
          this.variant = "info";
          /** Manually set the outlined state to false */
          this.outlined = false;
          /** Manually set the dismissible state of the button to `false` */
          this.dismissible = false;
      }
      /** Closes the badge  */
      close() {
          this.show = false;
      }
      /**@internal */
      _handleShowChange() {
          this.show ? this.emit("sgds-show") : this.emit("sgds-hide");
      }
      render() {
          return (this.dismissible && this.show) || !this.dismissible
              ? html$1 `
          <div
            class="  
          ${classMap({
                [`badge-dismissible`]: this.dismissible,
                badge: true,
                outlined: this.outlined
            })}
            "
            aria-hidden=${this.show ? "false" : "true"}
          >
            ${!this.dismissible ? html$1 `<slot name="icon"></slot>` : nothing}
            <span class="badge-label">
              <slot></slot>
            </span>

            ${this.dismissible
                ? html$1 `<sgds-close-button
                  size="sm"
                  aria-label="close the badge"
                  @click=${this.close}
                  variant=${this.outlined ? "dark" : "light"}
                ></sgds-close-button>`
                : nothing}
          </div>
        `
              : nothing;
      }
  }
  SgdsBadge.styles = [...SgdsElement.styles, css_248z$11];
  /**@internal */
  SgdsBadge.dependencies = {
      "sgds-close-button": SgdsCloseButton
  };
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsBadge.prototype, "show", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsBadge.prototype, "variant", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsBadge.prototype, "outlined", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsBadge.prototype, "dismissible", void 0);
  __decorate([
      watch("show")
  ], SgdsBadge.prototype, "_handleShowChange", null);

  register("sgds-badge", SgdsBadge);

  var css_248z$10 = css`:host([size=sm]) .overflow-btn{height:var(--sgds-dimension-24);width:var(--sgds-dimension-24)}.overflow-btn{align-items:center;background-color:var(--sgds-bg-transparent);border:0;border-radius:var(--sgds-border-radius-sm);cursor:pointer;display:flex;height:var(--sgds-dimension-32);justify-content:center;padding:0;position:relative;width:var(--sgds-dimension-32)}.overflow-btn:hover{background-color:var(--sgds-bg-translucent-subtle)}.overflow-btn:focus,.overflow-btn:focus-visible{background-color:var(--sgds-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus);outline:0}`;

  /**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  window.ShadyDOM?.inUse &&
      window.ShadyDOM?.noPatch === true
      ? window.ShadyDOM.wrap
      : (node) => node;
  /**
   * Tests whether a part has only a single-expression with no strings to
   * interpolate between.
   *
   * Only AttributePart and PropertyPart can have multiple expressions.
   * Multi-expression parts have a `strings` property and single-expression
   * parts do not.
   */
  const isSingleExpression = (part) => part.strings === undefined;
  // A sentinel value that can never appear as a part value except when set by
  // live(). Used to force a dirty-check to fail and cause a re-render.
  const RESET_VALUE = {};
  /**
   * Sets the committed value of a ChildPart directly without triggering the
   * commit stage of the part.
   *
   * This is useful in cases where a directive needs to update the part such
   * that the next update detects a value change or not. When value is omitted,
   * the next update will be guaranteed to be detected as a change.
   *
   * @param part
   * @param value
   */
  const setCommittedValue = (part, value = RESET_VALUE) => (part._$committedValue = value);

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * Recursively walks down the tree of Parts/TemplateInstances/Directives to set
   * the connected state of directives and run `disconnected`/ `reconnected`
   * callbacks.
   *
   * @return True if there were children to disconnect; false otherwise
   */
  const notifyChildrenConnectedChanged = (parent, isConnected) => {
      const children = parent._$disconnectableChildren;
      if (children === undefined) {
          return false;
      }
      for (const obj of children) {
          // The existence of `_$notifyDirectiveConnectionChanged` is used as a "brand" to
          // disambiguate AsyncDirectives from other DisconnectableChildren
          // (as opposed to using an instanceof check to know when to call it); the
          // redundancy of "Directive" in the API name is to avoid conflicting with
          // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in
          // this list
          // Disconnect Directive (and any nested directives contained within)
          // This property needs to remain unminified.
          obj['_$notifyDirectiveConnectionChanged']?.(isConnected, false);
          // Disconnect Part/TemplateInstance
          notifyChildrenConnectedChanged(obj, isConnected);
      }
      return true;
  };
  /**
   * Removes the given child from its parent list of disconnectable children, and
   * if the parent list becomes empty as a result, removes the parent from its
   * parent, and so forth up the tree when that causes subsequent parent lists to
   * become empty.
   */
  const removeDisconnectableFromParent = (obj) => {
      let parent, children;
      do {
          if ((parent = obj._$parent) === undefined) {
              break;
          }
          children = parent._$disconnectableChildren;
          children.delete(obj);
          obj = parent;
      } while (children?.size === 0);
  };
  const addDisconnectableToParent = (obj) => {
      // Climb the parent tree, creating a sparse tree of children needing
      // disconnection
      for (let parent; (parent = obj._$parent); obj = parent) {
          let children = parent._$disconnectableChildren;
          if (children === undefined) {
              parent._$disconnectableChildren = children = new Set();
          }
          else if (children.has(obj)) {
              // Once we've reached a parent that already contains this child, we
              // can short-circuit
              break;
          }
          children.add(obj);
          installDisconnectAPI(parent);
      }
  };
  /**
   * Changes the parent reference of the ChildPart, and updates the sparse tree of
   * Disconnectable children accordingly.
   *
   * Note, this method will be patched onto ChildPart instances and called from
   * the core code when parts are moved between different parents.
   */
  function reparentDisconnectables(newParent) {
      if (this._$disconnectableChildren !== undefined) {
          removeDisconnectableFromParent(this);
          this._$parent = newParent;
          addDisconnectableToParent(this);
      }
      else {
          this._$parent = newParent;
      }
  }
  /**
   * Sets the connected state on any directives contained within the committed
   * value of this part (i.e. within a TemplateInstance or iterable of
   * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within
   * any directives stored on the ChildPart (when `valueOnly` is false).
   *
   * `isClearingValue` should be passed as `true` on a top-level part that is
   * clearing itself, and not as a result of recursively disconnecting directives
   * as part of a `clear` operation higher up the tree. This both ensures that any
   * directive on this ChildPart that produced a value that caused the clear
   * operation is not disconnected, and also serves as a performance optimization
   * to avoid needless bookkeeping when a subtree is going away; when clearing a
   * subtree, only the top-most part need to remove itself from the parent.
   *
   * `fromPartIndex` is passed only in the case of a partial `_clear` running as a
   * result of truncating an iterable.
   *
   * Note, this method will be patched onto ChildPart instances and called from the
   * core code when parts are cleared or the connection state is changed by the
   * user.
   */
  function notifyChildPartConnectedChanged(isConnected, isClearingValue = false, fromPartIndex = 0) {
      const value = this._$committedValue;
      const children = this._$disconnectableChildren;
      if (children === undefined || children.size === 0) {
          return;
      }
      if (isClearingValue) {
          if (Array.isArray(value)) {
              // Iterable case: Any ChildParts created by the iterable should be
              // disconnected and removed from this ChildPart's disconnectable
              // children (starting at `fromPartIndex` in the case of truncation)
              for (let i = fromPartIndex; i < value.length; i++) {
                  notifyChildrenConnectedChanged(value[i], false);
                  removeDisconnectableFromParent(value[i]);
              }
          }
          else if (value != null) {
              // TemplateInstance case: If the value has disconnectable children (will
              // only be in the case that it is a TemplateInstance), we disconnect it
              // and remove it from this ChildPart's disconnectable children
              notifyChildrenConnectedChanged(value, false);
              removeDisconnectableFromParent(value);
          }
      }
      else {
          notifyChildrenConnectedChanged(this, isConnected);
      }
  }
  /**
   * Patches disconnection API onto ChildParts.
   */
  const installDisconnectAPI = (obj) => {
      if (obj.type == PartType.CHILD) {
          obj._$notifyConnectionChanged ??=
              notifyChildPartConnectedChanged;
          obj._$reparentDisconnectables ??= reparentDisconnectables;
      }
  };
  /**
   * An abstract `Directive` base class whose `disconnected` method will be
   * called when the part containing the directive is cleared as a result of
   * re-rendering, or when the user calls `part.setConnected(false)` on
   * a part that was previously rendered containing the directive (as happens
   * when e.g. a LitElement disconnects from the DOM).
   *
   * If `part.setConnected(true)` is subsequently called on a
   * containing part, the directive's `reconnected` method will be called prior
   * to its next `update`/`render` callbacks. When implementing `disconnected`,
   * `reconnected` should also be implemented to be compatible with reconnection.
   *
   * Note that updates may occur while the directive is disconnected. As such,
   * directives should generally check the `this.isConnected` flag during
   * render/update to determine whether it is safe to subscribe to resources
   * that may prevent garbage collection.
   */
  class AsyncDirective extends Directive {
      constructor() {
          super(...arguments);
          // @internal
          this._$disconnectableChildren = undefined;
      }
      /**
       * Initialize the part with internal fields
       * @param part
       * @param parent
       * @param attributeIndex
       */
      _$initialize(part, parent, attributeIndex) {
          super._$initialize(part, parent, attributeIndex);
          addDisconnectableToParent(this);
          this.isConnected = part._$isConnected;
      }
      // This property needs to remain unminified.
      /**
       * Called from the core code when a directive is going away from a part (in
       * which case `shouldRemoveFromParent` should be true), and from the
       * `setChildrenConnected` helper function when recursively changing the
       * connection state of a tree (in which case `shouldRemoveFromParent` should
       * be false).
       *
       * @param isConnected
       * @param isClearingDirective - True when the directive itself is being
       *     removed; false when the tree is being disconnected
       * @internal
       */
      ['_$notifyDirectiveConnectionChanged'](isConnected, isClearingDirective = true) {
          if (isConnected !== this.isConnected) {
              this.isConnected = isConnected;
              if (isConnected) {
                  this.reconnected?.();
              }
              else {
                  this.disconnected?.();
              }
          }
          if (isClearingDirective) {
              notifyChildrenConnectedChanged(this, isConnected);
              removeDisconnectableFromParent(this);
          }
      }
      /**
       * Sets the value of the directive's Part outside the normal `update`/`render`
       * lifecycle of a directive.
       *
       * This method should not be called synchronously from a directive's `update`
       * or `render`.
       *
       * @param directive The directive to update
       * @param value The value to set
       */
      setValue(value) {
          if (isSingleExpression(this.__part)) {
              this.__part._$setValue(value, this);
          }
          else {
              // this.__attributeIndex will be defined in this case, but
              // assert it in dev mode
              if (this.__attributeIndex === undefined) {
                  throw new Error(`Expected this.__attributeIndex to be a number`);
              }
              const newValues = [...this.__part._$committedValue];
              newValues[this.__attributeIndex] = value;
              this.__part._$setValue(newValues, this, 0);
          }
      }
      /**
       * User callbacks for implementing logic to release any resources/subscriptions
       * that may have been retained by this directive. Since directives may also be
       * re-connected, `reconnected` should also be implemented to restore the
       * working state of the directive prior to the next render.
       */
      disconnected() { }
      reconnected() { }
  }

  /**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * Creates a new Ref object, which is container for a reference to an element.
   */
  const createRef = () => new Ref();
  /**
   * An object that holds a ref value.
   */
  class Ref {
  }
  // When callbacks are used for refs, this map tracks the last value the callback
  // was called with, for ensuring a directive doesn't clear the ref if the ref
  // has already been rendered to a new spot. It is double-keyed on both the
  // context (`options.host`) and the callback, since we auto-bind class methods
  // to `options.host`.
  const lastElementForContextAndCallback = new WeakMap();
  class RefDirective extends AsyncDirective {
      render(_ref) {
          return nothing;
      }
      update(part, [ref]) {
          const refChanged = ref !== this._ref;
          if (refChanged && this._ref !== undefined) {
              // The ref passed to the directive has changed;
              // unset the previous ref's value
              this._updateRefValue(undefined);
          }
          if (refChanged || this._lastElementForRef !== this._element) {
              // We either got a new ref or this is the first render;
              // store the ref/element & update the ref value
              this._ref = ref;
              this._context = part.options?.host;
              this._updateRefValue((this._element = part.element));
          }
          return nothing;
      }
      _updateRefValue(element) {
          if (!this.isConnected) {
              element = undefined;
          }
          if (typeof this._ref === 'function') {
              // If the current ref was called with a previous value, call with
              // `undefined`; We do this to ensure callbacks are called in a consistent
              // way regardless of whether a ref might be moving up in the tree (in
              // which case it would otherwise be called with the new value before the
              // previous one unsets it) and down in the tree (where it would be unset
              // before being set). Note that element lookup is keyed by
              // both the context and the callback, since we allow passing unbound
              // functions that are called on options.host, and we want to treat
              // these as unique "instances" of a function.
              const context = this._context ?? globalThis;
              let lastElementForCallback = lastElementForContextAndCallback.get(context);
              if (lastElementForCallback === undefined) {
                  lastElementForCallback = new WeakMap();
                  lastElementForContextAndCallback.set(context, lastElementForCallback);
              }
              if (lastElementForCallback.get(this._ref) !== undefined) {
                  this._ref.call(this._context, undefined);
              }
              lastElementForCallback.set(this._ref, element);
              // Call the ref with the new element value
              if (element !== undefined) {
                  this._ref.call(this._context, element);
              }
          }
          else {
              this._ref.value = element;
          }
      }
      get _lastElementForRef() {
          return typeof this._ref === 'function'
              ? lastElementForContextAndCallback
                  .get(this._context ?? globalThis)
                  ?.get(this._ref)
              : this._ref?.value;
      }
      disconnected() {
          // Only clear the box if our element is still the one in it (i.e. another
          // directive instance hasn't rendered its element to it before us); that
          // only happens in the event of the directive being cleared (not via manual
          // disconnection)
          if (this._lastElementForRef === this._element) {
              this._updateRefValue(undefined);
          }
      }
      reconnected() {
          // If we were manually disconnected, we can safely put our element back in
          // the box, since no rendering could have occurred to change its state
          this._updateRefValue(this._element);
      }
  }
  /**
   * Sets the value of a Ref object or calls a ref callback with the element it's
   * bound to.
   *
   * A Ref object acts as a container for a reference to an element. A ref
   * callback is a function that takes an element as its only argument.
   *
   * The ref directive sets the value of the Ref object or calls the ref callback
   * during rendering, if the referenced element changed.
   *
   * Note: If a ref callback is rendered to a different element position or is
   * removed in a subsequent render, it will first be called with `undefined`,
   * followed by another call with the new element it was rendered to (if any).
   *
   * ```js
   * // Using Ref object
   * const inputRef = createRef();
   * render(html`<input ${ref(inputRef)}>`, container);
   * inputRef.value.focus();
   *
   * // Using callback
   * const callback = (inputElement) => inputElement.focus();
   * render(html`<input ${ref(callback)}>`, container);
   * ```
   */
  const ref = directive(RefDirective);

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement$1(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement$1(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement$1(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
        y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement$1(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement$1(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement$1(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
              _ref$options = _ref.options,
              options = _ref$options === void 0 ? {} : _ref$options,
              effect = _ref.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }
  var createPopper$2 = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
  var createPopper$1 = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers$1
  }); // eslint-disable-next-line import/no-unused-modules

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var Popper = /*#__PURE__*/Object.freeze({
    __proto__: null,
    popperGenerator: popperGenerator,
    detectOverflow: detectOverflow,
    createPopperBase: createPopper$2,
    createPopper: createPopper,
    createPopperLite: createPopper$1,
    top: top,
    bottom: bottom,
    right: right,
    left: left,
    auto: auto,
    basePlacements: basePlacements,
    start: start,
    end: end,
    clippingParents: clippingParents,
    viewport: viewport,
    popper: popper,
    reference: reference,
    variationPlacements: variationPlacements,
    placements: placements,
    beforeRead: beforeRead,
    read: read,
    afterRead: afterRead,
    beforeMain: beforeMain,
    main: main,
    afterMain: afterMain,
    beforeWrite: beforeWrite,
    write: write,
    afterWrite: afterWrite,
    modifierPhases: modifierPhases,
    applyStyles: applyStyles$1,
    arrow: arrow$1,
    computeStyles: computeStyles$1,
    eventListeners: eventListeners,
    flip: flip$1,
    hide: hide$1,
    offset: offset$1,
    popperOffsets: popperOffsets$1,
    preventOverflow: preventOverflow$1
  });

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const elementMap = new Map();

  var Data = {
    set(element, key, instance) {
      if (!elementMap.has(element)) {
        elementMap.set(element, new Map());
      }

      const instanceMap = elementMap.get(element);

      // make it clear we only want one instance per element
      // can be removed later when multiple key/instances are fine to be used
      if (!instanceMap.has(key) && instanceMap.size !== 0) {
        // eslint-disable-next-line no-console
        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
        return
      }

      instanceMap.set(key, instance);
    },

    get(element, key) {
      if (elementMap.has(element)) {
        return elementMap.get(element).get(key) || null
      }

      return null
    },

    remove(element, key) {
      if (!elementMap.has(element)) {
        return
      }

      const instanceMap = elementMap.get(element);

      instanceMap.delete(key);

      // free up element references if there are no instances left for an element
      if (instanceMap.size === 0) {
        elementMap.delete(element);
      }
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/index.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const MAX_UID = 1_000_000;
  const MILLISECONDS_MULTIPLIER = 1000;
  const TRANSITION_END = 'transitionend';

  /**
   * Properly escape IDs selectors to handle weird IDs
   * @param {string} selector
   * @returns {string}
   */
  const parseSelector = selector => {
    if (selector && window.CSS && window.CSS.escape) {
      // document.querySelector needs escaping to handle IDs (html5+) containing for instance /
      selector = selector.replace(/#([^\s"#']+)/g, (match, id) => `#${CSS.escape(id)}`);
    }

    return selector
  };

  // Shout-out Angus Croll (https://goo.gl/pxwQGp)
  const toType = object => {
    if (object === null || object === undefined) {
      return `${object}`
    }

    return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase()
  };

  /**
   * Public Util API
   */

  const getUID = prefix => {
    do {
      prefix += Math.floor(Math.random() * MAX_UID);
    } while (document.getElementById(prefix))

    return prefix
  };

  const getTransitionDurationFromElement = element => {
    if (!element) {
      return 0
    }

    // Get transition-duration of the element
    let { transitionDuration, transitionDelay } = window.getComputedStyle(element);

    const floatTransitionDuration = Number.parseFloat(transitionDuration);
    const floatTransitionDelay = Number.parseFloat(transitionDelay);

    // Return 0 if element or transition duration is not found
    if (!floatTransitionDuration && !floatTransitionDelay) {
      return 0
    }

    // If multiple durations are defined, take the first
    transitionDuration = transitionDuration.split(',')[0];
    transitionDelay = transitionDelay.split(',')[0];

    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER
  };

  const triggerTransitionEnd = element => {
    element.dispatchEvent(new Event(TRANSITION_END));
  };

  const isElement = object => {
    if (!object || typeof object !== 'object') {
      return false
    }

    if (typeof object.jquery !== 'undefined') {
      object = object[0];
    }

    return typeof object.nodeType !== 'undefined'
  };

  const getElement = object => {
    // it's a jQuery object or a node element
    if (isElement(object)) {
      return object.jquery ? object[0] : object
    }

    if (typeof object === 'string' && object.length > 0) {
      return document.querySelector(parseSelector(object))
    }

    return null
  };

  const isVisible = element => {
    if (!isElement(element) || element.getClientRects().length === 0) {
      return false
    }

    const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible';
    // Handle `details` element as its content may falsie appear visible when it is closed
    const closedDetails = element.closest('details:not([open])');

    if (!closedDetails) {
      return elementIsVisible
    }

    if (closedDetails !== element) {
      const summary = element.closest('summary');
      if (summary && summary.parentNode !== closedDetails) {
        return false
      }

      if (summary === null) {
        return false
      }
    }

    return elementIsVisible
  };

  const isDisabled = element => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
      return true
    }

    if (element.classList.contains('disabled')) {
      return true
    }

    if (typeof element.disabled !== 'undefined') {
      return element.disabled
    }

    return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'
  };

  const findShadowRoot = element => {
    if (!document.documentElement.attachShadow) {
      return null
    }

    // Can find the shadow root otherwise it'll return the document
    if (typeof element.getRootNode === 'function') {
      const root = element.getRootNode();
      return root instanceof ShadowRoot ? root : null
    }

    if (element instanceof ShadowRoot) {
      return element
    }

    // when we don't find a shadow root
    if (!element.parentNode) {
      return null
    }

    return findShadowRoot(element.parentNode)
  };

  const noop = () => {};

  const getjQuery = () => {
    if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {
      return window.jQuery
    }

    return null
  };

  const DOMContentLoadedCallbacks = [];

  const onDOMContentLoaded = callback => {
    if (document.readyState === 'loading') {
      // add listener on the first call when the document is in loading state
      if (!DOMContentLoadedCallbacks.length) {
        document.addEventListener('DOMContentLoaded', () => {
          for (const callback of DOMContentLoadedCallbacks) {
            callback();
          }
        });
      }

      DOMContentLoadedCallbacks.push(callback);
    } else {
      callback();
    }
  };

  const isRTL = () => document.documentElement.dir === 'rtl';

  const defineJQueryPlugin = plugin => {
    onDOMContentLoaded(() => {
      const $ = getjQuery();
      /* istanbul ignore if */
      if ($) {
        const name = plugin.NAME;
        const JQUERY_NO_CONFLICT = $.fn[name];
        $.fn[name] = plugin.jQueryInterface;
        $.fn[name].Constructor = plugin;
        $.fn[name].noConflict = () => {
          $.fn[name] = JQUERY_NO_CONFLICT;
          return plugin.jQueryInterface
        };
      }
    });
  };

  const execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {
    return typeof possibleCallback === 'function' ? possibleCallback(...args) : defaultValue
  };

  const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
    if (!waitForTransition) {
      execute(callback);
      return
    }

    const durationPadding = 5;
    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;

    let called = false;

    const handler = ({ target }) => {
      if (target !== transitionElement) {
        return
      }

      called = true;
      transitionElement.removeEventListener(TRANSITION_END, handler);
      execute(callback);
    };

    transitionElement.addEventListener(TRANSITION_END, handler);
    setTimeout(() => {
      if (!called) {
        triggerTransitionEnd(transitionElement);
      }
    }, emulatedDuration);
  };

  /**
   * Return the previous/next element of a list.
   *
   * @param {array} list    The list of elements
   * @param activeElement   The active element
   * @param shouldGetNext   Choose to get next or previous element
   * @param isCycleAllowed
   * @return {Element|elem} The proper element
   */
  const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {
    const listLength = list.length;
    let index = list.indexOf(activeElement);

    // if the element does not exist in the list return an element
    // depending on the direction and if cycle is allowed
    if (index === -1) {
      return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0]
    }

    index += shouldGetNext ? 1 : -1;

    if (isCycleAllowed) {
      index = (index + listLength) % listLength;
    }

    return list[Math.max(0, Math.min(index, listLength - 1))]
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/event-handler.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
  const stripNameRegex = /\..*/;
  const stripUidRegex = /::\d+$/;
  const eventRegistry = {}; // Events storage
  let uidEvent = 1;
  const customEvents = {
    mouseenter: 'mouseover',
    mouseleave: 'mouseout'
  };

  const nativeEvents = new Set([
    'click',
    'dblclick',
    'mouseup',
    'mousedown',
    'contextmenu',
    'mousewheel',
    'DOMMouseScroll',
    'mouseover',
    'mouseout',
    'mousemove',
    'selectstart',
    'selectend',
    'keydown',
    'keypress',
    'keyup',
    'orientationchange',
    'touchstart',
    'touchmove',
    'touchend',
    'touchcancel',
    'pointerdown',
    'pointermove',
    'pointerup',
    'pointerleave',
    'pointercancel',
    'gesturestart',
    'gesturechange',
    'gestureend',
    'focus',
    'blur',
    'change',
    'reset',
    'select',
    'submit',
    'focusin',
    'focusout',
    'load',
    'unload',
    'beforeunload',
    'resize',
    'move',
    'DOMContentLoaded',
    'readystatechange',
    'error',
    'abort',
    'scroll'
  ]);

  /**
   * Private methods
   */

  function makeEventUid(element, uid) {
    return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++
  }

  function getElementEvents(element) {
    const uid = makeEventUid(element);

    element.uidEvent = uid;
    eventRegistry[uid] = eventRegistry[uid] || {};

    return eventRegistry[uid]
  }

  function bootstrapHandler(element, fn) {
    return function handler(event) {
      hydrateObj(event, { delegateTarget: element });

      if (handler.oneOff) {
        EventHandler.off(element, event.type, fn);
      }

      return fn.apply(element, [event])
    }
  }

  function bootstrapDelegationHandler(element, selector, fn) {
    return function handler(event) {
      const domElements = element.querySelectorAll(selector);

      for (let { target } = event; target && target !== this; target = target.parentNode) {
        for (const domElement of domElements) {
          if (domElement !== target) {
            continue
          }

          hydrateObj(event, { delegateTarget: target });

          if (handler.oneOff) {
            EventHandler.off(element, event.type, selector, fn);
          }

          return fn.apply(target, [event])
        }
      }
    }
  }

  function findHandler(events, callable, delegationSelector = null) {
    return Object.values(events)
      .find(event => event.callable === callable && event.delegationSelector === delegationSelector)
  }

  function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
    const isDelegated = typeof handler === 'string';
    // TODO: tooltip passes `false` instead of selector, so we need to check
    const callable = isDelegated ? delegationFunction : (handler || delegationFunction);
    let typeEvent = getTypeEvent(originalTypeEvent);

    if (!nativeEvents.has(typeEvent)) {
      typeEvent = originalTypeEvent;
    }

    return [isDelegated, callable, typeEvent]
  }

  function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
    if (typeof originalTypeEvent !== 'string' || !element) {
      return
    }

    let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);

    // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does
    if (originalTypeEvent in customEvents) {
      const wrapFunction = fn => {
        return function (event) {
          if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {
            return fn.call(this, event)
          }
        }
      };

      callable = wrapFunction(callable);
    }

    const events = getElementEvents(element);
    const handlers = events[typeEvent] || (events[typeEvent] = {});
    const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);

    if (previousFunction) {
      previousFunction.oneOff = previousFunction.oneOff && oneOff;

      return
    }

    const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''));
    const fn = isDelegated ?
      bootstrapDelegationHandler(element, handler, callable) :
      bootstrapHandler(element, callable);

    fn.delegationSelector = isDelegated ? handler : null;
    fn.callable = callable;
    fn.oneOff = oneOff;
    fn.uidEvent = uid;
    handlers[uid] = fn;

    element.addEventListener(typeEvent, fn, isDelegated);
  }

  function removeHandler(element, events, typeEvent, handler, delegationSelector) {
    const fn = findHandler(events[typeEvent], handler, delegationSelector);

    if (!fn) {
      return
    }

    element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));
    delete events[typeEvent][fn.uidEvent];
  }

  function removeNamespacedHandlers(element, events, typeEvent, namespace) {
    const storeElementEvent = events[typeEvent] || {};

    for (const [handlerKey, event] of Object.entries(storeElementEvent)) {
      if (handlerKey.includes(namespace)) {
        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
      }
    }
  }

  function getTypeEvent(event) {
    // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
    event = event.replace(stripNameRegex, '');
    return customEvents[event] || event
  }

  const EventHandler = {
    on(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, false);
    },

    one(element, event, handler, delegationFunction) {
      addHandler(element, event, handler, delegationFunction, true);
    },

    off(element, originalTypeEvent, handler, delegationFunction) {
      if (typeof originalTypeEvent !== 'string' || !element) {
        return
      }

      const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
      const inNamespace = typeEvent !== originalTypeEvent;
      const events = getElementEvents(element);
      const storeElementEvent = events[typeEvent] || {};
      const isNamespace = originalTypeEvent.startsWith('.');

      if (typeof callable !== 'undefined') {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!Object.keys(storeElementEvent).length) {
          return
        }

        removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
        return
      }

      if (isNamespace) {
        for (const elementEvent of Object.keys(events)) {
          removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
        }
      }

      for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {
        const handlerKey = keyHandlers.replace(stripUidRegex, '');

        if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    },

    trigger(element, event, args) {
      if (typeof event !== 'string' || !element) {
        return null
      }

      const $ = getjQuery();
      const typeEvent = getTypeEvent(event);
      const inNamespace = event !== typeEvent;

      let jQueryEvent = null;
      let bubbles = true;
      let nativeDispatch = true;
      let defaultPrevented = false;

      if (inNamespace && $) {
        jQueryEvent = $.Event(event, args);

        $(element).trigger(jQueryEvent);
        bubbles = !jQueryEvent.isPropagationStopped();
        nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
        defaultPrevented = jQueryEvent.isDefaultPrevented();
      }

      const evt = hydrateObj(new Event(event, { bubbles, cancelable: true }), args);

      if (defaultPrevented) {
        evt.preventDefault();
      }

      if (nativeDispatch) {
        element.dispatchEvent(evt);
      }

      if (evt.defaultPrevented && jQueryEvent) {
        jQueryEvent.preventDefault();
      }

      return evt
    }
  };

  function hydrateObj(obj, meta = {}) {
    for (const [key, value] of Object.entries(meta)) {
      try {
        obj[key] = value;
      } catch {
        Object.defineProperty(obj, key, {
          configurable: true,
          get() {
            return value
          }
        });
      }
    }

    return obj
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  function normalizeData(value) {
    if (value === 'true') {
      return true
    }

    if (value === 'false') {
      return false
    }

    if (value === Number(value).toString()) {
      return Number(value)
    }

    if (value === '' || value === 'null') {
      return null
    }

    if (typeof value !== 'string') {
      return value
    }

    try {
      return JSON.parse(decodeURIComponent(value))
    } catch {
      return value
    }
  }

  function normalizeDataKey(key) {
    return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)
  }

  const Manipulator = {
    setDataAttribute(element, key, value) {
      element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value);
    },

    removeDataAttribute(element, key) {
      element.removeAttribute(`data-bs-${normalizeDataKey(key)}`);
    },

    getDataAttributes(element) {
      if (!element) {
        return {}
      }

      const attributes = {};
      const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'));

      for (const key of bsKeys) {
        let pureKey = key.replace(/^bs/, '');
        pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
        attributes[pureKey] = normalizeData(element.dataset[key]);
      }

      return attributes
    },

    getDataAttribute(element, key) {
      return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/config.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Class definition
   */

  class Config {
    // Getters
    static get Default() {
      return {}
    }

    static get DefaultType() {
      return {}
    }

    static get NAME() {
      throw new Error('You have to implement the static method "NAME", for each component!')
    }

    _getConfig(config) {
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config
    }

    _configAfterMerge(config) {
      return config
    }

    _mergeConfigObj(config, element) {
      const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse

      return {
        ...this.constructor.Default,
        ...(typeof jsonConfig === 'object' ? jsonConfig : {}),
        ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),
        ...(typeof config === 'object' ? config : {})
      }
    }

    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {
      for (const [property, expectedTypes] of Object.entries(configTypes)) {
        const value = config[property];
        const valueType = isElement(value) ? 'element' : toType(value);

        if (!new RegExp(expectedTypes).test(valueType)) {
          throw new TypeError(
            `${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`
          )
        }
      }
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap base-component.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const VERSION = '5.3.3';

  /**
   * Class definition
   */

  class BaseComponent extends Config {
    constructor(element, config) {
      super();

      element = getElement(element);
      if (!element) {
        return
      }

      this._element = element;
      this._config = this._getConfig(config);

      Data.set(this._element, this.constructor.DATA_KEY, this);
    }

    // Public
    dispose() {
      Data.remove(this._element, this.constructor.DATA_KEY);
      EventHandler.off(this._element, this.constructor.EVENT_KEY);

      for (const propertyName of Object.getOwnPropertyNames(this)) {
        this[propertyName] = null;
      }
    }

    _queueCallback(callback, element, isAnimated = true) {
      executeAfterTransition(callback, element, isAnimated);
    }

    _getConfig(config) {
      config = this._mergeConfigObj(config, this._element);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config
    }

    // Static
    static getInstance(element) {
      return Data.get(getElement(element), this.DATA_KEY)
    }

    static getOrCreateInstance(element, config = {}) {
      return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)
    }

    static get VERSION() {
      return VERSION
    }

    static get DATA_KEY() {
      return `bs.${this.NAME}`
    }

    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`
    }

    static eventName(name) {
      return `${name}${this.EVENT_KEY}`
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  const getSelector = element => {
    let selector = element.getAttribute('data-bs-target');

    if (!selector || selector === '#') {
      let hrefAttribute = element.getAttribute('href');

      // The only valid content that could double as a selector are IDs or classes,
      // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
      // `document.querySelector` will rightfully complain it is invalid.
      // See https://github.com/twbs/bootstrap/issues/32273
      if (!hrefAttribute || (!hrefAttribute.includes('#') && !hrefAttribute.startsWith('.'))) {
        return null
      }

      // Just in case some CMS puts out a full URL with the anchor appended
      if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {
        hrefAttribute = `#${hrefAttribute.split('#')[1]}`;
      }

      selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null;
    }

    return selector ? selector.split(',').map(sel => parseSelector(sel)).join(',') : null
  };

  const SelectorEngine = {
    find(selector, element = document.documentElement) {
      return [].concat(...Element.prototype.querySelectorAll.call(element, selector))
    },

    findOne(selector, element = document.documentElement) {
      return Element.prototype.querySelector.call(element, selector)
    },

    children(element, selector) {
      return [].concat(...element.children).filter(child => child.matches(selector))
    },

    parents(element, selector) {
      const parents = [];
      let ancestor = element.parentNode.closest(selector);

      while (ancestor) {
        parents.push(ancestor);
        ancestor = ancestor.parentNode.closest(selector);
      }

      return parents
    },

    prev(element, selector) {
      let previous = element.previousElementSibling;

      while (previous) {
        if (previous.matches(selector)) {
          return [previous]
        }

        previous = previous.previousElementSibling;
      }

      return []
    },
    // TODO: this is now unused; remove later along with prev()
    next(element, selector) {
      let next = element.nextElementSibling;

      while (next) {
        if (next.matches(selector)) {
          return [next]
        }

        next = next.nextElementSibling;
      }

      return []
    },

    focusableChildren(element) {
      const focusables = [
        'a',
        'button',
        'input',
        'textarea',
        'select',
        'details',
        '[tabindex]',
        '[contenteditable="true"]'
      ].map(selector => `${selector}:not([tabindex^="-"])`).join(',');

      return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el))
    },

    getSelectorFromElement(element) {
      const selector = getSelector(element);

      if (selector) {
        return SelectorEngine.findOne(selector) ? selector : null
      }

      return null
    },

    getElementFromSelector(element) {
      const selector = getSelector(element);

      return selector ? SelectorEngine.findOne(selector) : null
    },

    getMultipleElementsFromSelector(element) {
      const selector = getSelector(element);

      return selector ? SelectorEngine.find(selector) : []
    }
  };

  /**
   * --------------------------------------------------------------------------
   * Bootstrap dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const NAME$2 = 'dropdown';
  const DATA_KEY = 'bs.dropdown';
  const EVENT_KEY = `.${DATA_KEY}`;
  const DATA_API_KEY = '.data-api';

  const ESCAPE_KEY = 'Escape';
  const TAB_KEY = 'Tab';
  const ARROW_UP_KEY = 'ArrowUp';
  const ARROW_DOWN_KEY = 'ArrowDown';
  const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button

  const EVENT_HIDE$1 = `hide${EVENT_KEY}`;
  const EVENT_HIDDEN$1 = `hidden${EVENT_KEY}`;
  const EVENT_SHOW$1 = `show${EVENT_KEY}`;
  const EVENT_SHOWN$1 = `shown${EVENT_KEY}`;
  const EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`;
  const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`;
  const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`;

  const CLASS_NAME_SHOW$1 = 'show';
  const CLASS_NAME_DROPUP = 'dropup';
  const CLASS_NAME_DROPEND = 'dropend';
  const CLASS_NAME_DROPSTART = 'dropstart';
  const CLASS_NAME_DROPUP_CENTER = 'dropup-center';
  const CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center';

  const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
  const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE}.${CLASS_NAME_SHOW$1}`;
  const SELECTOR_MENU = '.dropdown-menu';
  const SELECTOR_NAVBAR = '.navbar';
  const SELECTOR_NAVBAR_NAV = '.navbar-nav';
  const SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)';

  const PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start';
  const PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end';
  const PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start';
  const PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end';
  const PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start';
  const PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start';
  const PLACEMENT_TOPCENTER = 'top';
  const PLACEMENT_BOTTOMCENTER = 'bottom';

  const Default$2 = {
    autoClose: true,
    boundary: 'clippingParents',
    display: 'dynamic',
    offset: [0, 2],
    popperConfig: null,
    reference: 'toggle'
  };

  const DefaultType$2 = {
    autoClose: '(boolean|string)',
    boundary: '(string|element)',
    display: 'string',
    offset: '(array|string|function)',
    popperConfig: '(null|object|function)',
    reference: '(string|element|object)'
  };

  /**
   * Class definition
   */

  class Dropdown extends BaseComponent {
    constructor(element, config) {
      super(element, config);

      this._popper = null;
      this._parent = this._element.parentNode; // dropdown wrapper
      // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
      this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] ||
        SelectorEngine.prev(this._element, SELECTOR_MENU)[0] ||
        SelectorEngine.findOne(SELECTOR_MENU, this._parent);
      this._inNavbar = this._detectNavbar();
    }

    // Getters
    static get Default() {
      return Default$2
    }

    static get DefaultType() {
      return DefaultType$2
    }

    static get NAME() {
      return NAME$2
    }

    // Public
    toggle() {
      return this._isShown() ? this.hide() : this.show()
    }

    show() {
      if (isDisabled(this._element) || this._isShown()) {
        return
      }

      const relatedTarget = {
        relatedTarget: this._element
      };

      const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$1, relatedTarget);

      if (showEvent.defaultPrevented) {
        return
      }

      this._createPopper();

      // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
      if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, 'mouseover', noop);
        }
      }

      this._element.focus();
      this._element.setAttribute('aria-expanded', true);

      this._menu.classList.add(CLASS_NAME_SHOW$1);
      this._element.classList.add(CLASS_NAME_SHOW$1);
      EventHandler.trigger(this._element, EVENT_SHOWN$1, relatedTarget);
    }

    hide() {
      if (isDisabled(this._element) || !this._isShown()) {
        return
      }

      const relatedTarget = {
        relatedTarget: this._element
      };

      this._completeHide(relatedTarget);
    }

    dispose() {
      if (this._popper) {
        this._popper.destroy();
      }

      super.dispose();
    }

    update() {
      this._inNavbar = this._detectNavbar();
      if (this._popper) {
        this._popper.update();
      }
    }

    // Private
    _completeHide(relatedTarget) {
      const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$1, relatedTarget);
      if (hideEvent.defaultPrevented) {
        return
      }

      // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, 'mouseover', noop);
        }
      }

      if (this._popper) {
        this._popper.destroy();
      }

      this._menu.classList.remove(CLASS_NAME_SHOW$1);
      this._element.classList.remove(CLASS_NAME_SHOW$1);
      this._element.setAttribute('aria-expanded', 'false');
      Manipulator.removeDataAttribute(this._menu, 'popper');
      EventHandler.trigger(this._element, EVENT_HIDDEN$1, relatedTarget);
    }

    _getConfig(config) {
      config = super._getConfig(config);

      if (typeof config.reference === 'object' && !isElement(config.reference) &&
        typeof config.reference.getBoundingClientRect !== 'function'
      ) {
        // Popper virtual elements require a getBoundingClientRect method
        throw new TypeError(`${NAME$2.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`)
      }

      return config
    }

    _createPopper() {
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s dropdowns require Popper (https://popper.js.org)')
      }

      let referenceElement = this._element;

      if (this._config.reference === 'parent') {
        referenceElement = this._parent;
      } else if (isElement(this._config.reference)) {
        referenceElement = getElement(this._config.reference);
      } else if (typeof this._config.reference === 'object') {
        referenceElement = this._config.reference;
      }

      const popperConfig = this._getPopperConfig();
      this._popper = createPopper(referenceElement, this._menu, popperConfig);
    }

    _isShown() {
      return this._menu.classList.contains(CLASS_NAME_SHOW$1)
    }

    _getPlacement() {
      const parentDropdown = this._parent;

      if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
        return PLACEMENT_RIGHT
      }

      if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
        return PLACEMENT_LEFT
      }

      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
        return PLACEMENT_TOPCENTER
      }

      if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
        return PLACEMENT_BOTTOMCENTER
      }

      // We need to trim the value because custom properties can also include spaces
      const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end';

      if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
        return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP
      }

      return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM
    }

    _detectNavbar() {
      return this._element.closest(SELECTOR_NAVBAR) !== null
    }

    _getOffset() {
      const { offset } = this._config;

      if (typeof offset === 'string') {
        return offset.split(',').map(value => Number.parseInt(value, 10))
      }

      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element)
      }

      return offset
    }

    _getPopperConfig() {
      const defaultBsPopperConfig = {
        placement: this._getPlacement(),
        modifiers: [{
          name: 'preventOverflow',
          options: {
            boundary: this._config.boundary
          }
        },
        {
          name: 'offset',
          options: {
            offset: this._getOffset()
          }
        }]
      };

      // Disable Popper if we have a static display or Dropdown is in Navbar
      if (this._inNavbar || this._config.display === 'static') {
        Manipulator.setDataAttribute(this._menu, 'popper', 'static'); // TODO: v6 remove
        defaultBsPopperConfig.modifiers = [{
          name: 'applyStyles',
          enabled: false
        }];
      }

      return {
        ...defaultBsPopperConfig,
        ...execute(this._config.popperConfig, [defaultBsPopperConfig])
      }
    }

    _selectMenuItem({ key, target }) {
      const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element));

      if (!items.length) {
        return
      }

      // if target isn't included in items (e.g. when expanding the dropdown)
      // allow cycling to get the last item in case key equals ARROW_UP_KEY
      getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus();
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Dropdown.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`)
        }

        data[config]();
      })
    }

    static clearMenus(event) {
      if (event.button === RIGHT_MOUSE_BUTTON || (event.type === 'keyup' && event.key !== TAB_KEY)) {
        return
      }

      const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);

      for (const toggle of openToggles) {
        const context = Dropdown.getInstance(toggle);
        if (!context || context._config.autoClose === false) {
          continue
        }

        const composedPath = event.composedPath();
        const isMenuTarget = composedPath.includes(context._menu);
        if (
          composedPath.includes(context._element) ||
          (context._config.autoClose === 'inside' && !isMenuTarget) ||
          (context._config.autoClose === 'outside' && isMenuTarget)
        ) {
          continue
        }

        // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu
        if (context._menu.contains(event.target) && ((event.type === 'keyup' && event.key === TAB_KEY) || /input|select|option|textarea|form/i.test(event.target.tagName))) {
          continue
        }

        const relatedTarget = { relatedTarget: context._element };

        if (event.type === 'click') {
          relatedTarget.clickEvent = event;
        }

        context._completeHide(relatedTarget);
      }
    }

    static dataApiKeydownHandler(event) {
      // If not an UP | DOWN | ESCAPE key => not a dropdown command
      // If input/textarea && if key is other than ESCAPE => not a dropdown command

      const isInput = /input|textarea/i.test(event.target.tagName);
      const isEscapeEvent = event.key === ESCAPE_KEY;
      const isUpOrDownEvent = [ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key);

      if (!isUpOrDownEvent && !isEscapeEvent) {
        return
      }

      if (isInput && !isEscapeEvent) {
        return
      }

      event.preventDefault();

      // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
      const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE) ?
        this :
        (SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE)[0] ||
          SelectorEngine.next(this, SELECTOR_DATA_TOGGLE)[0] ||
          SelectorEngine.findOne(SELECTOR_DATA_TOGGLE, event.delegateTarget.parentNode));

      const instance = Dropdown.getOrCreateInstance(getToggleButton);

      if (isUpOrDownEvent) {
        event.stopPropagation();
        instance.show();
        instance._selectMenuItem(event);
        return
      }

      if (instance._isShown()) { // else is escape and we check if it is shown
        event.stopPropagation();
        instance.hide();
        getToggleButton.focus();
      }
    }
  }

  /**
   * Data API implementation
   */

  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
  EventHandler.on(document, EVENT_CLICK_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
  EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {
    event.preventDefault();
    Dropdown.getOrCreateInstance(this).toggle();
  });

  /**
   * jQuery
   */

  defineJQueryPlugin(Dropdown);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  const assign = (target, ...args) => Object.assign(target, ...args);
  const keys = (obj) => Object.keys(obj);

  /* eslint-disable @typescript-eslint/no-explicit-any */
  function _isObject(item) {
      return item && typeof item === "object" && item.constructor === Object;
  }
  const mergeDeep = (target, source) => {
      if (_isObject(target) && _isObject(source)) {
          keys(source).forEach(key => {
              if (_isObject(source[key])) {
                  if (!target[key] || !_isObject(target[key])) {
                      target[key] = source[key];
                  }
                  mergeDeep(target[key], source[key]);
              }
              else {
                  assign(target, { [key]: source[key] });
              }
          });
      }
      return target;
  };

  function genId (componentName = "", elementName = "") {
      return `id-${Math.random().toString().substring(2, 6)}-sgds-${componentName}-${elementName}`;
  }

  const ARROW_DOWN$1 = "ArrowDown";
  const ARROW_UP$1 = "ArrowUp";
  const ESC = "Escape";
  /**
   * @event sgds-show - Emitted event when show instance is called
   * @event sgds-after-show - Emitted event when dropdown has been made visible to the user and CSS transitions have completed
   * @event sgds-hide - Emitted event when hide instance is called
   * @event sgds-after-hide - Emitted event when dropdown has hidden to the user and CSS transitions have completed
   */
  class DropdownElement extends SgdsElement {
      constructor() {
          // static styles = SgdsElement.styles;
          super(...arguments);
          /** @internal */
          this.myDropdown = createRef();
          /** @internal */
          this.bsDropdown = null;
          /** @internal Unique id generated for the dropdown menu */
          this.dropdownMenuId = genId("dropdown-menu", "div");
          /** @internal Controls auto-flipping of menu */
          this.noFlip = false;
          /** @internal When true, aligns right edge of menu with right edge of button */
          this.menuAlignRight = false;
          /** @internal The drop position of menu relative to the toggle button */
          this.drop = "down";
          /**  Additional configuration to pass to Popper.js. See https://popper.js.org/ for config opts */
          this.popperOpts = {};
          /** @internal */
          this.modifierOpt = [];
          /** When true, dropdown menu shows on first load */
          this.menuIsOpen = false;
          /** Controls the close behaviour of dropdown menu. By default menu auto-closes when SgdsDropdownItem or area outside dropdown is clicked */
          this.close = "default";
          /** Disables the dropdown toggle */
          this.disabled = false;
      }
      connectedCallback() {
          super.connectedCallback();
          if (this.close !== "inside") {
              document.addEventListener("click", (event) => this._handleClickOutOfElement(event, this));
          }
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          document.removeEventListener("click", (event) => this._handleClickOutOfElement(event, this));
      }
      firstUpdated() {
          this.bsDropdown = new Dropdown(this.myDropdown.value, {
              // autoClose not working as bootstrap is using attribute data-bs-toggle="dropdown" to configure autoclose. But it doesnt look into this attribute in the shadow dom
              reference: "toggle", // working
              popperConfig: (defaultConfig) => {
                  //working
                  this.dropdownConfig = {
                      placement: "bottom-start",
                      modifiers: !this.noFlip
                          ? this.modifierOpt
                          : [
                              ...this.modifierOpt,
                              {
                                  name: "flip",
                                  options: { fallbackPlacements: [] }
                              }
                          ]
                  };
                  switch (this.drop) {
                      case "up":
                          this.dropdownConfig.placement = this.menuAlignRight ? "top-end" : "top-start";
                          break;
                      case "right":
                          this.dropdownConfig.placement = "right-start";
                          break;
                      case "left":
                          this.dropdownConfig.placement = "left-start";
                          break;
                      case "down":
                          this.dropdownConfig.placement = this.menuAlignRight ? "bottom-end" : "bottom-start";
                          break;
                      default:
                          this.dropdownConfig.placement = undefined;
                          break;
                  }
                  return mergeDeep(defaultConfig, mergeDeep(this.dropdownConfig, this.popperOpts));
              }
          });
          this.myDropdown.value.addEventListener("show.bs.dropdown", () => {
              this.menuIsOpen = true;
              this.emit("sgds-show");
          });
          this.myDropdown.value.addEventListener("shown.bs.dropdown", () => {
              this.menuIsOpen = true;
              this.emit("sgds-after-show");
          });
          this.myDropdown.value.addEventListener("hide.bs.dropdown", () => {
              this.menuIsOpen = false;
              this.emit("sgds-hide");
          });
          this.myDropdown.value.addEventListener("hidden.bs.dropdown", () => {
              this.menuIsOpen = false;
              this.emit("sgds-after-hide");
          });
          this.addEventListener("keydown", this._handleKeyboardMenuEvent);
      }
      /** When invoked, opens the dropdown menu */
      showMenu() {
          this.bsDropdown.show();
      }
      /** When invoked, hides the dropdown menu */
      hideMenu() {
          this.bsDropdown.hide();
      }
      toggleMenu() {
          this.bsDropdown.toggle();
      }
      _handleKeyboardMenuEvent(e) {
          switch (e.key) {
              case ARROW_DOWN$1:
                  e.preventDefault();
                  if (!this.menuIsOpen)
                      return this.showMenu();
                  break;
              case ARROW_UP$1:
                  e.preventDefault();
                  if (!this.menuIsOpen)
                      return this.showMenu();
                  break;
              case ESC:
                  return this.hideMenu();
          }
      }
      _handleClickOutOfElement(e, self) {
          if (!e.composedPath().includes(self)) {
              this.hideMenu();
          }
      }
  }
  __decorate([
      property({ type: Boolean, state: true })
  ], DropdownElement.prototype, "noFlip", void 0);
  __decorate([
      property({ type: Boolean, reflect: true, state: true })
  ], DropdownElement.prototype, "menuAlignRight", void 0);
  __decorate([
      property({ type: String, reflect: true, state: true })
  ], DropdownElement.prototype, "drop", void 0);
  __decorate([
      property({ type: Object })
  ], DropdownElement.prototype, "popperOpts", void 0);
  __decorate([
      state()
  ], DropdownElement.prototype, "dropdownConfig", void 0);
  __decorate([
      property()
  ], DropdownElement.prototype, "modifierOpt", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], DropdownElement.prototype, "menuIsOpen", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], DropdownElement.prototype, "disabled", void 0);

  const TAB$1 = "Tab";
  const ARROW_DOWN = "ArrowDown";
  const ARROW_UP = "ArrowUp";
  const ENTER$1 = "Enter";
  /**
   * @event sgds-select - Emitted event when a slot item is selected
   */
  class DropdownListElement extends DropdownElement {
      constructor() {
          super(...arguments);
          /** @internal */
          this.nextDropdownItemNo = 0;
          /** @internal */
          this.prevDropdownItemNo = -1;
      }
      connectedCallback() {
          super.connectedCallback();
          this.addEventListener("sgds-hide", this._resetMenu);
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          this.removeEventListener("sgds-hide", this._resetMenu);
      }
      firstUpdated() {
          super.firstUpdated();
          this.addEventListener("keydown", this._handleKeyboardMenuItemsEvent);
      }
      handleSelectSlot(e) {
          const items = this._getActiveMenuItems();
          const currentItemNo = items.indexOf(e.target);
          this.nextDropdownItemNo = currentItemNo + 1;
          this.prevDropdownItemNo = currentItemNo <= 0 ? items.length - 1 : currentItemNo - 1;
          /** Emitted event from SgdsDropdown element when a slot item is selected */
          const selectedItem = e.target;
          if (!selectedItem.disabled) {
              this.emit("sgds-select");
              this.close !== "outside" && this.bsDropdown.hide();
          }
          else
              return;
      }
      _resetMenu() {
          this.nextDropdownItemNo = 0;
          this.prevDropdownItemNo = -1;
          // reset the tabindex
          const items = this._getMenuItems();
          items.forEach(item => {
              const dropdownItem = item.shadowRoot.querySelector(".dropdown-item");
              dropdownItem.removeAttribute("tabindex");
          });
      }
      _handleKeyboardMenuItemsEvent(e) {
          const menuItems = this._getActiveMenuItems();
          switch (e.key) {
              case ARROW_DOWN:
                  e.preventDefault();
                  if (this.nextDropdownItemNo === menuItems.length) {
                      return this._setMenuItem(0);
                  }
                  else {
                      return this._setMenuItem(this.nextDropdownItemNo > 0 ? this.nextDropdownItemNo : 0);
                  }
              case ARROW_UP:
                  e.preventDefault();
                  if (this.prevDropdownItemNo < 0) {
                      return this._setMenuItem(menuItems.length - 1, false);
                  }
                  else {
                      return this._setMenuItem(this.prevDropdownItemNo, false);
                  }
              case TAB$1:
                  if (!this.menuIsOpen) {
                      return;
                  }
                  e.preventDefault();
                  if (e.shiftKey) {
                      if (this.prevDropdownItemNo < 0) {
                          return this._setMenuItem(menuItems.length - 1, false);
                      }
                      else {
                          return this._setMenuItem(this.prevDropdownItemNo, false);
                      }
                  }
                  if (this.nextDropdownItemNo === menuItems.length) {
                      return this._setMenuItem(0);
                  }
                  else {
                      return this._setMenuItem(this.nextDropdownItemNo > 0 ? this.nextDropdownItemNo : 0);
                  }
              case ENTER$1:
                  if (menuItems.includes(e.target)) {
                      return this.handleSelectSlot(e);
                  }
                  break;
          }
      }
      _getMenuItems() {
          var _a;
          // for case when default slot is used e.g. dropdown, mainnavdropdown
          if (this.shadowRoot.querySelector("slot#default")) {
              return (_a = this.shadowRoot.querySelector("slot#default")) === null || _a === void 0 ? void 0 : _a.assignedElements({
                  flatten: true
              });
          }
          // for case when there is no slot e.g. combobox
          if (this.menu.hasChildNodes()) {
              const menuItems = this.menu.children;
              return [...menuItems];
          }
      }
      _getActiveMenuItems() {
          return this._getMenuItems().filter(item => !item.disabled);
      }
      _setMenuItem(currentItemIdx, isArrowDown = true) {
          const items = this._getActiveMenuItems();
          if (items.length === 0)
              return;
          const item = items[currentItemIdx];
          this.nextDropdownItemNo = currentItemIdx + 1;
          this.prevDropdownItemNo = currentItemIdx - 1 < 0 ? items.length - 1 : currentItemIdx - 1;
          let activeItem;
          if (item.disabled) {
              return this._setMenuItem(isArrowDown ? this.nextDropdownItemNo : this.prevDropdownItemNo);
          }
          else
              activeItem = item;
          // focus or blur items depending on active or not
          items.forEach(item => {
              const dropdownItem = item.shadowRoot.querySelector(".dropdown-item");
              dropdownItem.setAttribute("tabindex", item === activeItem ? "0" : "-1");
              item === activeItem && dropdownItem.focus();
          });
      }
  }
  DropdownListElement.styles = DropdownElement.styles;
  __decorate([
      query("ul.dropdown-menu")
  ], DropdownListElement.prototype, "menu", void 0);
  __decorate([
      state()
  ], DropdownListElement.prototype, "nextDropdownItemNo", void 0);
  __decorate([
      state()
  ], DropdownListElement.prototype, "prevDropdownItemNo", void 0);

  var css_248z$$ = css`.dropdown-menu{background-clip:padding-box;background-color:var(--sgds-surface-default);border-radius:var(--sgds-border-radius-md);box-shadow:0 0 1px 0 hsla(0,0%,5%,.12),0 4px 8px 0 hsla(0,0%,5%,.12);color:var(--sgds-color-default);display:none;list-style:none;margin:0;min-width:var(--sgds-dimension-280);overflow-y:auto;padding:var(--sgds-padding-xs) 0;position:absolute;text-align:left;z-index:1000}.dropdown .dropdown-menu{max-height:var(--sgds-dimension-192)}.dropdown-menu.show{display:block}.nav-tabs .dropdown-menu{border-top-left-radius:0;border-top-right-radius:0;margin-top:calc(var(--sgds-nav-tabs-border-width)*-1)}@media (min-width:576px){.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}}@media (min-width:768px){.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}}@media (min-width:992px){.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}}@media (min-width:1200px){.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}}@media (min-width:1400px){.navbar-expand-xxl .navbar-nav .dropdown-menu{position:absolute}}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.sgds.navbar .dropdown-menu.megamenu{left:0;right:0;width:100%}.sgds.combobox>.dropdown-menu{min-width:100%}`;

  var css_248z$_ = css`:host{position:relative}.dropdown{display:flex;height:100%}`;

  /**
   * @summary `SgdsDropdown` toggles contextual overlays for displaying lists of links.
   * @slot default - slot for sgds-dropdown-item passed into dropdown's menu
   * @slot toggler - slot for the toggler that triggers the open and closing of menu, typically a button. Only pass in a single element into this slot
   *
   */
  class SgdsDropdown extends DropdownListElement {
      constructor() {
          super();
          /** Controls auto-flipping of menu */
          this.noFlip = false;
          /** When true, aligns right edge of menu with right edge of button */
          this.menuAlignRight = false;
          /** The drop position of menu relative to the toggle button */
          this.drop = "down";
          /**@internal */
          this.modifierOpt = [
              {
                  name: "offset",
                  options: {
                      offset: [0, 8]
                  }
              }
          ];
      }
      _handleCloseMenu() {
          const button = this._toggler[0];
          button.focus();
      }
      _handleClick() {
          if (this.disabled) {
              return;
          }
          this.toggleMenu();
      }
      async connectedCallback() {
          super.connectedCallback();
          this.addEventListener("sgds-hide", this._handleCloseMenu);
      }
      async disconnectedCallback() {
          this.removeEventListener("sgds-hide", this._handleCloseMenu);
      }
      async firstUpdated() {
          super.firstUpdated();
          if (this.menuIsOpen) {
              this.showMenu();
          }
          this._handleDisabled();
      }
      _handleDisabled() {
          const button = this._toggler[0];
          if (this.disabled) {
              button.setAttribute("disabled", "true");
          }
          else {
              button.hasAttribute("disabled") && button.removeAttribute("disabled");
          }
      }
      render() {
          return html$1 `
      <div class="dropdown">
        <div
          class="toggler-container"
          ${ref(this.myDropdown)}
          @click=${this._handleClick}
          aria-expanded="${this.menuIsOpen}"
          aria-haspopup="menu"
        >
          <slot name="toggler"></slot>
        </div>
        <div class="dropdown-menu" role="menu">
          <slot id="default" @click=${this.handleSelectSlot}></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsDropdown.styles = [...DropdownListElement.styles, css_248z$_, css_248z$$];
  __decorate([
      property({ type: Boolean, reflect: true, state: false })
  ], SgdsDropdown.prototype, "noFlip", void 0);
  __decorate([
      property({ type: Boolean, reflect: true, state: false })
  ], SgdsDropdown.prototype, "menuAlignRight", void 0);
  __decorate([
      property({ type: String, reflect: true, state: false })
  ], SgdsDropdown.prototype, "drop", void 0);
  __decorate([
      queryAssignedElements({ slot: "toggler", flatten: true })
  ], SgdsDropdown.prototype, "_toggler", void 0);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsDropdown.prototype, "_handleDisabled", null);

  var css_248z$Z = css`.dropdown-item{align-items:center;background-color:var(--sgds-bg-transparent);clear:both;color:var(--sgds-color-default);cursor:pointer;display:flex;gap:var(--sgds-gap-sm);padding:var(--sgds-padding-sm) var(--sgds-padding-lg);text-align:inherit;white-space:nowrap}.dropdown-item:not(.nav-link):hover{background-color:var(--sgds-bg-translucent-subtle)}.dropdown-item:not(.nav-link):focus,.dropdown-item:not(.nav-link):focus-visible{background-color:var(--sgds-bg-translucent-subtle);box-shadow:inset var(--sgds-form-box-shadow-focus);outline:0}.dropdown-item:not(.nav-link).active{background-color:var(--sgds-bg-translucent-subtle);color:var(--sgds-primary-color-default);text-decoration:none}.dropdown-item.disabled,.dropdown-item:disabled{opacity:var(--sgds-opacity-50);pointer-events:none}::slotted(*){color:inherit!important;display:flex;gap:var(--sgds-gap-sm);text-decoration:none!important}.nav-link{gap:var(--sgds-gap-xs);padding:var(--sgds-padding-sm) var(--sgds-mainnav-padding-x)}.nav-link:hover{color:var(--sgds-primary-color-default)}.nav-link:focus,.nav-link:focus-visible{outline:0}.nav-link:focus-visible{box-shadow:var(--sgds-box-shadow-focus) inset;color:var(--sgds-primary-color-default)}.nav-link.active{background-color:var(--sgds-bg-translucent-subtle);color:var(--sgds-primary-color-default)}`;

  /**
   * @summary `SgdsDropdownItem` are navigation links built with `HTMLAnchorElement`. It should be used in the default slot of `SgdsDropdown`
   * @slot default - The default slot for SgdsDropdownItem. Pass in a single anchor tag per dropdown item directly for navigation items.
   */
  class SgdsDropdownItem extends SgdsElement {
      constructor() {
          super(...arguments);
          /** when true, sets the active stylings of .nav-link */
          this.active = false;
          /** Disables the SgdsMainnavItem */
          this.disabled = false;
      }
      connectedCallback() {
          super.connectedCallback();
          this.addEventListener("keydown", (e) => {
              if (e.key === "Enter") {
                  this.anchor[0].click();
              }
          });
          this.setAttribute("role", "menuitem");
          this.setAttribute("aria-disabled", `${this.disabled}`);
      }
      render() {
          return html$1 `
      <div
        class="dropdown-item ${classMap({
            disabled: this.disabled,
            active: this.active
        })}"
        tabindex=${this.disabled ? "-1" : "0"}
      >
        <slot></slot>
      </div>
    `;
      }
  }
  SgdsDropdownItem.styles = [css_248z$_, css_248z$Z];
  SgdsDropdownItem.dependencies = {
      "sgds-icon": SgdsIcon
  };
  __decorate([
      queryAssignedElements({ flatten: true })
  ], SgdsDropdownItem.prototype, "anchor", void 0);
  __decorate([
      property({ type: Boolean })
  ], SgdsDropdownItem.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDropdownItem.prototype, "disabled", void 0);

  /**
   * @summary An overflow menu is a UI element, often represented by three dots (⋮ or …), that opens a menu with additional actions or options.
   * @slot default - The overflow menu items. Pass in sgds-dropdown-items in this slot
   */
  class SgdsOverflowMenu extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Specifies a large or small button */
          this.size = "md";
      }
      render() {
          return html$1 `
      <sgds-dropdown>
        <button slot="toggler" class="overflow-btn">
          <sgds-icon name="three-dots" size=${this.size}></sgds-icon>
        </button>
        <slot></slot>
      </sgds-dropdown>
    `;
      }
  }
  SgdsOverflowMenu.styles = [...SgdsElement.styles, css_248z$10];
  /** @internal */
  SgdsOverflowMenu.dependencies = {
      "sgds-dropdown": SgdsDropdown,
      "sgds-dropdown-item": SgdsDropdownItem,
      "sgds-icon": SgdsIcon
  };
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsOverflowMenu.prototype, "size", void 0);

  var css_248z$Y = css`.breadcrumb{display:flex;gap:var(--sgds-gap-xs)}`;

  /**
   * @summary Breadcrumbs help users to navigate and understand where they are on the current website or service.
   *
   * @slot default - The slot to pass in custom elements of `SgdsBreadcrumbItems`.
   *
   */
  class SgdsBreadcrumb extends SgdsElement {
      constructor() {
          super(...arguments);
          /** The aria-label of nav element within breadcrumb component. */
          this.ariaLabel = "breadcrumb";
      }
      /**
       * creates `<sgds-breadcrumb-item>
       *            <sgds-overflow-menu>
       *              <sgds-dropdown-item></sgds-dropdown-item>
       *               ...
       *            </sgds-overflow-menu>
       *          <sgds-breadcrumb-item>`
       */
      _replaceExcessItemsWithDropdown(items) {
          const breadcrumbItem = document.createElement("sgds-breadcrumb-item");
          const overflowMenu = document.createElement("sgds-overflow-menu");
          overflowMenu.setAttribute("aria-haspopup", "menu");
          overflowMenu.setAttribute("size", "sm");
          const mapItems = items.filter((item, index) => {
              if (index > 0 && index < items.length - 2) {
                  const clonedAnchor = item.querySelector("a");
                  const clonedAnchorNode = clonedAnchor.cloneNode(true);
                  const dropdownItem = document.createElement("sgds-dropdown-item");
                  dropdownItem.appendChild(clonedAnchorNode);
                  overflowMenu.appendChild(dropdownItem);
                  return;
              }
              else {
                  return item;
              }
          });
          breadcrumbItem.appendChild(overflowMenu);
          mapItems.splice(1, 0, breadcrumbItem);
          this.defaultSlot.replaceWith(...mapItems);
      }
      _handleSlotChange(e) {
          const items = e.target
              .assignedElements({ flatten: true })
              .filter((item) => item.tagName.toLowerCase() === "sgds-breadcrumb-item");
          items.forEach((item, index) => {
              if (index === items.length - 1) {
                  item.setAttribute("aria-current", "page");
                  item.active = true;
              }
              else {
                  item.removeAttribute("aria-current");
              }
          });
          if (items.length >= 5) {
              this._replaceExcessItemsWithDropdown(items);
          }
      }
      render() {
          return html `
      <div aria-label=${ifDefined(this.ariaLabel)}>
        <div class="breadcrumb">
          <slot @slotchange=${this._handleSlotChange}></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsBreadcrumb.styles = [...SgdsElement.styles, css_248z$Y];
  SgdsBreadcrumb.dependencies = {
      "sgds-overflow-menu": SgdsOverflowMenu
  };
  __decorate([
      property({ type: String })
  ], SgdsBreadcrumb.prototype, "ariaLabel", void 0);
  __decorate([
      query("slot")
  ], SgdsBreadcrumb.prototype, "defaultSlot", void 0);

  var css_248z$X = css`.nav-link::slotted(a){align-items:center;color:var(--sgds-link-color-default);cursor:pointer;display:inline-flex;flex-shrink:0;gap:var(--sgds-gap-2-xs);height:var(--sgds-dimension-24);justify-content:center;text-decoration:none!important}.nav-link::slotted(a:focus),.nav-link::slotted(a:focus-visible),.nav-link::slotted(a:hover),.nav-link::slotted(a[active]){color:var( --sgds-link-color-emphasis)}.nav-link::slotted(a:focus),.nav-link::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus);outline:0}.nav-link::slotted(a[disabled]){cursor:not-allowed;opacity:var(--sgds-opacity-50)}:host([variant=danger]) .nav-link::slotted(a){--sgds-link-color-default:var(--sgds-danger-color-default);color:var(--sgds-link-color-default,--sgds-danger-color-default)}:host([variant=danger]) .nav-link::slotted(a:focus),:host([variant=danger]) .nav-link::slotted(a:focus-visible),:host([variant=danger]) .nav-link::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-danger-color-emphasis);color:var(--sgds-link-color-emphasis,--sgds-danger-color-emphasis)}:host([variant=light]) .nav-link::slotted(a){--sgds-link-color-default:var(--sgds-color-fixed-light);color:var(--sgds-link-color-default,--sgds-color-fixed-light)}:host([variant=light]) .nav-link::slotted(a:focus),:host([variant=light]) .nav-link::slotted(a:focus-visible),:host([variant=light]) .nav-link::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-color-fixed-light);color:var(--sgds-link-color-emphasis,--sgds-color-fixed-light)}:host([variant=dark]) .nav-link::slotted(a){--sgds-link-color-default:var(--sgds-color-fixed-dark);color:var(--sgds-link-color-default,--sgds-color-fixed-dark)}:host([variant=dark]) .nav-link::slotted(a:focus),:host([variant=dark]) .nav-link::slotted(a:focus-visible),:host([variant=dark]) .nav-link::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-color-fixed-dark);color:var(--sgds-link-color-emphasis,--sgds-color-fixed-dark)}:host([size=lg]) .nav-link::slotted(a){font-size:var(--sgds-font-size-3)!important;height:var(--sgds-dimension-32)}:host([size=sm]) .nav-link::slotted(a){font-size:var(--sgds-font-size-1)!important;height:var(--sgds-dimension-20)}`;

  /**
   * @summary Link allows users to click and navigate their way from page to page
   *
   * @slot default - Pass in a single anchor tag here
   */
  class SgdsLink extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Determines the size of the link */
          this.size = "md";
          /** when true, sets the active stylings of the link */
          this.variant = "primary";
      }
      _handleSlotChange(e) {
          const anchor = this.querySelector("a");
          if (anchor) {
              if (anchor.hasAttribute("disabled")) {
                  anchor.setAttribute("href", "javascript:void(0)");
                  anchor.setAttribute("tabindex", "-1");
              }
              else {
                  anchor.setAttribute("tabindex", "0");
              }
          }
      }
      render() {
          /** When removing href, link is no longer focusable */
          return html$1 `<slot class="nav-link" @slotchange=${this._handleSlotChange}></slot>`;
      }
  }
  SgdsLink.styles = [...SgdsElement.styles, css_248z$X];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsLink.prototype, "size", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsLink.prototype, "variant", void 0);

  var css_248z$W = css`:host{align-items:center;display:flex;gap:var(--sgds-gap-xs)}:host([active]) .nav-link::slotted(*){--sgds-link-color-default:var(--sgds-color-default);color:var(--sgds-link-color-default,--sgds-color-default);pointer-events:none}:host([active]) .nav-link::slotted(:focus),:host([active]) .nav-link::slotted(:focus-visible),:host([active]) .nav-link::slotted(:hover){--sgds-link-color-emphasis:var(--sgds-color-default);color:var(--sgds-link-color-emphasis,--sgds-color-default)}.separator svg{display:block}:host(:last-of-type) .separator{display:none}`;

  /**
   * @summary Breadcrumb Item are navigational links used in Breadcrumb component
   *
   * @slot default - The link of the item. Pass in anchor tags into this slot
   */
  class SgdsBreadcrumbItem extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Indicates the link matches the current location of the page. Programmatically handled by SgdsBreadcrumb to set this prop to true for the last breadcrumb item  */
          this.active = false;
      }
      render() {
          return html$1 `
      <slot class="nav-link"></slot>
      <div class="separator">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="none">
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M4.90413 2.13558C4.947 2.0926 4.99793 2.0585 5.05399 2.03524C5.11006 2.01198 5.17016 2 5.23086 2C5.29157 2 5.35167 2.01198 5.40774 2.03524C5.4638 2.0585 5.51473 2.0926 5.55759 2.13558L11.0954 7.67339C11.1384 7.71626 11.1725 7.76718 11.1957 7.82325C11.219 7.87932 11.231 7.93942 11.231 8.00012C11.231 8.06082 11.219 8.12093 11.1957 8.17699C11.1725 8.23306 11.1384 8.28398 11.0954 8.32685L5.55759 13.8647C5.47094 13.9513 5.35341 14 5.23086 14C5.10832 14 4.99079 13.9513 4.90413 13.8647C4.81748 13.778 4.7688 13.6605 4.7688 13.5379C4.7688 13.4154 4.81748 13.2979 4.90413 13.2112L10.1161 8.00012L4.90413 2.78904C4.86116 2.74617 4.82706 2.69525 4.80379 2.63918C4.78053 2.58312 4.76855 2.52301 4.76855 2.46231C4.76855 2.40161 4.78053 2.3415 4.80379 2.28544C4.82706 2.22937 4.86116 2.17845 4.90413 2.13558Z"
            fill="#757575"
          />
        </svg>
      </div>
    `;
      }
  }
  SgdsBreadcrumbItem.styles = [...SgdsLink.styles, css_248z$W];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsBreadcrumbItem.prototype, "active", void 0);

  register("sgds-breadcrumb", SgdsBreadcrumb);
  register("sgds-breadcrumb-item", SgdsBreadcrumbItem);

  var css_248z$V = css`:host{--btn-font-weight:var(--sgds-font-weight-regular);--btn-bg:var(--sgds-primary-surface-default);--btn-hover-bg:var(--sgds-primary-surface-emphasis);--btn-border-radius:var(--sgds-border-radius-md)}:host([variant=primary]){--btn-bg:var(--sgds-primary-surface-default);--btn-color:var(--sgds-color-fixed-light)}:host([variant=outline]){--btn-bg:var(--sgds-bg-transparent);--btn-hover-bg:var(--sgds-primary-surface-translucent);--btn-color:var(--sgds-primary-color-default);--btn-border-width:var(--sgds-border-width-1);--btn-border-color:var(--sgds-primary-border-color-default)}:host([variant=ghost]){--btn-bg:var(--sgds-bg-transparent);--btn-hover-bg:var(--sgds-primary-surface-translucent);--btn-color:var(--sgds-primary-color-default)}:host([variant=danger]){--btn-bg:var(--sgds-danger-surface-default);--btn-hover-bg:var(--sgds-danger-surface-emphasis);--btn-color:var(--sgds-color-fixed-light)}.btn{align-items:center;background-color:var(--btn-bg);border:1px solid var(--sgds-border-color-transparent);border-radius:var(--btn-border-radius);color:var(--sgds-color-fixed-light);cursor:pointer;display:inline-flex;font-size:var(--sgds-font-size-2);font-weight:var(--btn-font-weight);gap:var(--sgds-gap-2-xs);height:var(--sgds-dimension-48);justify-content:center;line-height:var(--sgds-line-height-body);min-width:var(--sgds-dimension-96);padding:0 var(--sgds-padding-lg);text-align:center;text-decoration:none;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;user-select:none;vertical-align:middle}.btn-ghost,.btn-outline,.btn-primary{color:var(--btn-color)}.btn-outline{border:var(--btn-border-width) solid var(--btn-border-color)}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn.active,.btn:hover{background-color:var(--btn-hover-bg)}.btn:focus,.btn:focus-visible{background-color:var(--btn-hover-bg);border-color:transparent;box-shadow:var(--sgds-box-shadow-focus);outline:0}.btn.disabled,.btn:disabled{color:var(--btn-color);cursor:not-allowed;opacity:var(--sgds-opacity-50)}.btn-lg{font-size:var(--sgds-font-size-3);height:var(--sgds-dimension-56);min-width:var(--sgds-dimension-112);padding:0 var(--sgds-padding-xl)}.btn-sm{font-size:var(--sgds-font-size-1);height:var(--sgds-dimension-40);min-width:var(--sgds-dimension-80);padding:0 var(--sgds-padding-md)}.btn slot::slotted(*){color:var(--btn-color)}`;

  class ButtonElement extends SgdsElement {
      constructor() {
          super(...arguments);
          /** One or more button variant combinations buttons may be one of a variety of visual variants such as: `primary`, `danger`, `outline`, `ghost` */
          this.variant = "primary";
          /** Specifies a small, medium or large button, the size is medium by default. */
          this.size = "md";
          /** Manually set the visual state of the button to `:active` */
          this.active = false;
          /** The disabled state of the button */
          this.disabled = false;
          /** Where to display the linked URL, as the name for a browsing context. Forwards to the HTMLAnchor target attribute */
          this.target = "_self";
      }
      /** Sets focus on the button. */
      focus(options) {
          this.button.focus(options);
      }
      /** Simulates a click on the button. */
      click() {
          this.button.click();
      }
      /** Removes focus from the button. */
      blur() {
          this.button.blur();
      }
      _handleBlur() {
          this.emit("sgds-blur");
      }
      _handleFocus() {
          this.emit("sgds-focus");
      }
      _handleClick(event) {
          if (this.disabled) {
              event.preventDefault();
              event.stopPropagation();
              return;
          }
      }
  }
  ButtonElement.styles = [...SgdsElement.styles, css_248z$V];
  __decorate([
      query(".btn")
  ], ButtonElement.prototype, "button", void 0);
  __decorate([
      property({ reflect: true })
  ], ButtonElement.prototype, "variant", void 0);
  __decorate([
      property({ reflect: true })
  ], ButtonElement.prototype, "size", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], ButtonElement.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], ButtonElement.prototype, "disabled", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], ButtonElement.prototype, "href", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], ButtonElement.prototype, "target", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], ButtonElement.prototype, "download", void 0);
  __decorate([
      property({ type: String })
  ], ButtonElement.prototype, "ariaLabel", void 0);

  /**
   * A controller to help with form submission
   */
  class FormSubmitController {
      constructor(host, options) {
          (this.host = host).addController(this);
          this.options = Object.assign({ form: (input) => {
                  return input.closest("form");
              } }, options);
      }
      hostConnected() {
          this.form = this.options.form(this.host);
      }
      hostDisconnected() {
          if (this.form) {
              this.form = undefined;
          }
      }
      /**
       * Creates a temporary native HTML button that can participate in form and invoke form submits and reset
       * Button is removed once action is performed
       */
      doAction(type, invoker) {
          if (this.form) {
              const button = document.createElement("button");
              button.type = type;
              button.style.position = "absolute";
              button.style.width = "0";
              button.style.height = "0";
              button.style.clipPath = "inset(50%)";
              button.style.overflow = "hidden";
              button.style.whiteSpace = "nowrap";
              // Pass form attributes through to the temporary button
              if (invoker) {
                  ["formaction", "formmethod", "formnovalidate", "formtarget"].forEach(attr => {
                      if (invoker.hasAttribute(attr)) {
                          button.setAttribute(attr, invoker.getAttribute(attr));
                      }
                  });
              }
              this.form.append(button);
              button.click();
              button.remove();
          }
      }
      /** Resets the form, restoring all the control to their default value */
      reset(invoker) {
          this.doAction("reset", invoker);
      }
      /** Submits the form, triggering validation and form data injection. */
      submit(invoker) {
          // Calling form.submit() bypasses the submit event and constraint validation. To prevent this, we can inject a
          // native submit button into the form, "click" it, then remove it to simulate a standard form submission.
          this.doAction("submit", invoker);
      }
  }

  var css_248z$U = css`:host{display:inline-block}.btn.full-width,:host([fullWidth]){width:100%}.btn.full-width.has-left-icon{justify-content:flex-start}.btn.full-width.has-right-icon{justify-content:space-between}.btn.full-width.has-left-icon.has-right-icon{justify-content:center}.btn span{padding:0 var(--sgds-padding-2-xs)}`;

  /**
   * @summary Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.
   *
   * @slot default - The button's label.
   * @slot leftIcon - The slot for icon to the left of the button text
   * @slot rightIcon - The slot for icon to the right of the button text
   *
   * @event sgds-blur - Emitted when the button is blurred.
   * @event sgds-focus - Emitted when the button is focused.
   *
   *
   */
  class SgdsButton extends ButtonElement {
      constructor() {
          super(...arguments);
          /** @internal */
          this._hasLeftIcon = false;
          /** @internal */
          this._hasRightIcon = false;
          /** @internal */
          this.formSubmitController = new FormSubmitController(this, {
              form: (input) => {
                  // Buttons support a form attribute that points to an arbitrary form, so if this attribute it set we need to query
                  // the form from the same root using its id
                  if (input.hasAttribute("form")) {
                      const doc = input.getRootNode();
                      const formId = input.getAttribute("form");
                      return doc.getElementById(formId);
                  }
                  // Fall back to the closest containing form
                  return input.closest("form");
              }
          });
          /** The behavior of the button with default as `type='button', `reset` resets all the controls to their initial values and `submit` submits the form data to the server */
          this.type = "button";
          /** When set, the button will be in full width. */
          this.fullWidth = false;
          this._clickHandler = () => {
              if (this.type === "submit") {
                  this.formSubmitController.submit(this);
              }
              if (this.type === "reset") {
                  this.formSubmitController.reset(this);
              }
          };
      }
      _handleClick(event) {
          if (this.disabled) {
              event.preventDefault();
              event.stopPropagation();
              return;
          }
          this.removeEventListener("click", this._clickHandler);
          this.addEventListener("click", this._clickHandler);
      }
      _handleLeftIconSlotchange(e) {
          const childNodes = e.target.assignedNodes({ flatten: true });
          if (childNodes.length > 0) {
              return (this._hasLeftIcon = true);
          }
      }
      _handleRightIconSlotchange(e) {
          const childNodes = e.target.assignedNodes({ flatten: true });
          if (childNodes.length > 0) {
              return (this._hasRightIcon = true);
          }
      }
      render() {
          const isLink = this.href;
          const tag = isLink ? literal `a` : literal `button`;
          return html `
      <${tag}
        class="btn ${classMap({
            disabled: this.disabled,
            active: this.active,
            "full-width": this.fullWidth,
            "has-left-icon": this._hasLeftIcon,
            "has-right-icon": this._hasRightIcon,
            [`btn-${this.variant}`]: this.variant,
            [`btn-${this.size}`]: this.size
        })}"
        ?disabled=${ifDefined(isLink ? undefined : this.disabled)}
        type=${ifDefined(isLink ? undefined : this.type)}
        href=${ifDefined(isLink ? this.href : undefined)}
        target=${ifDefined(isLink ? this.target : undefined)}
        download=${ifDefined(isLink ? this.download : undefined)}
        rel=${ifDefined(isLink && this.target === "_blank" ? "noreferrer noopener" : undefined)}
        role=${ifDefined(isLink ? "button" : undefined)}
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        @click=${this._handleClick}
        @focus=${this._handleFocus}
        @blur=${this._handleBlur}
        aria-label=${ifDefined(this.ariaLabel)}
      >
      <slot name="leftIcon" @slotchange=${this._handleLeftIconSlotchange}></slot>
      <span><slot></slot></span>
      <slot name="rightIcon" @slotchange=${this._handleRightIconSlotchange}></slot>
      </${tag}>
    `;
      }
  }
  SgdsButton.styles = [...ButtonElement.styles, css_248z$12, css_248z$U];
  __decorate([
      state()
  ], SgdsButton.prototype, "_hasLeftIcon", void 0);
  __decorate([
      state()
  ], SgdsButton.prototype, "_hasRightIcon", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsButton.prototype, "type", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsButton.prototype, "form", void 0);
  __decorate([
      property({ type: String, reflect: true, attribute: "formaction" })
  ], SgdsButton.prototype, "formAction", void 0);
  __decorate([
      property({ type: String, reflect: true, attribute: "formmethod" })
  ], SgdsButton.prototype, "formMethod", void 0);
  __decorate([
      property({ attribute: "formnovalidate", type: Boolean, reflect: true })
  ], SgdsButton.prototype, "formNoValidate", void 0);
  __decorate([
      property({ type: String, reflect: true, attribute: "formtarget" })
  ], SgdsButton.prototype, "formTarget", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsButton.prototype, "fullWidth", void 0);

  register("sgds-button", SgdsButton);

  var css_248z$T = css`:host([orientation=horizontal]) .card{flex-direction:row}:host(:not([hideBorder])) .card{border:var(--sgds-border-width-1) solid var(--sgds-border-color-muted)}:host([tinted]) .card{background-color:var(--sgds-bg-translucent-subtle);border:none}:host([orientation=horizontal]) .card-image{width:40%}:host([imagePosition=after]) .card-image{order:1}:host([orientation=vertical][imagePosition=after]) slot[name=image]::slotted(img){border-radius:calc(var(--sgds-border-radius-md) - var(--sgds-border-width-1));border-top-left-radius:var(--sgds-border-radius-none);border-top-right-radius:var(--sgds-border-radius-none)}:host([orientation=horizontal][imagePosition=after]) slot[name=image]::slotted(img){border-radius:calc(var(--sgds-border-radius-md) - var(--sgds-border-width-1));border-bottom-left-radius:var(--sgds-border-radius-none);border-top-left-radius:var(--sgds-border-radius-none)}:host([orientation=vertical][imageAdjustment="padding around"]) .card-image{padding:var(--sgds-padding-xl) var(--sgds-padding-xl) 0}:host([orientation=vertical][imageAdjustment="padding around"]) slot[name=image]::slotted(img){border-radius:calc(var(--sgds-border-radius-md) - var(--sgds-border-width-1))}:host([orientation=vertical]:not([imageAdjustment="aspect ratio"])) slot[name=image]::slotted(img){height:auto}:host([orientation=vertical][imageAdjustment="aspect ratio"]) slot[name=image]::slotted(img){object-fit:cover}.card{word-wrap:break-word;background-clip:border-box;background-color:var(--sgds-surface-default);border-radius:var(--sgds-border-radius-md);box-shadow:none;display:flex;flex-direction:column;height:auto;min-width:0;position:relative;transition:box-shadow .3s ease}a.card{color:initial;text-decoration:none}@media (prefers-reduced-motion:reduce){.card{transition:none}}.card.disabled{cursor:not-allowed;opacity:var(--sgds-opacity-50)}.card:not(.disabled):hover{box-shadow:0 0 1px 0 hsla(0,0%,5%,.12),0 8px 16px 0 hsla(0,0%,5%,.12)}a.card:focus{outline:0}a.card:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus)}.card-image{flex:1}.card-body{display:flex;flex:1;flex-direction:column;gap:var(--sgds-gap-lg);padding:var(--sgds-padding-xl)}.card-body,.card-title{color:var(--sgds-body-color-default)}.card-title{--sgds-font-size-5:var(--sgds-font-size-4);--sgds-font-size-6:var(--sgds-font-size-4);--sgds-margin-2-xs:var(--sgds-margin-none);--sgds-font-weight-bold:var(--sgds-font-weight-semibold);font-size:var(--sgds-font-size-4);font-weight:var(--sgds-font-weight-semibold)}.card-subtitle,.card-text,.card-title{margin-bottom:var(--sgds-margin-none)}slot[name=title]::slotted(a){--sgds-font-size-2:var(--sgds-font-size-4);--sgds-font-weight-regular:var(--sgds-font-weight-semibold);color:var(--sgds-link-color-default);font-size:var(--sgds-font-size-4);font-weight:var(--sgds-font-weight-semibold);text-decoration:none!important}slot[name=description]::slotted(*){color:var(--sgds-color-subtle)}slot[name=image]::slotted(img){border-top-left-radius:calc(var(--sgds-border-radius-md) - var(--sgds-border-width-1));border-top-right-radius:calc(var(--sgds-border-radius-md) - var(--sgds-border-width-1));display:block;width:100%}:host([orientation=horizontal]) slot[name=image]::slotted(img){border-bottom-left-radius:calc(var(--sgds-border-radius-md) - var(--sgds-border-width-1));border-top-right-radius:var(--sgds-border-radius-none);height:100%;object-fit:cover}slot[name=link]::slotted(*){font-weight:700;margin-top:var(--sgds-padding-sm)}slot[name=link]::slotted(a){color:var(--sgds-link-color-default);display:inline-flex;gap:var(--sgds-gap-2-xs);text-decoration:none!important}slot[name=link]::slotted(a:focus),slot[name=link]::slotted(a:hover),slot[name=title]::slotted(a:focus),slot[name=title]::slotted(a:hover){color:var(--sgds-link-color-emphasis)}slot[name=link]::slotted(a:focus),slot[name=title]::slotted(a:focus){outline:0}slot[name=link]::slotted(a:focus-visible),slot[name=title]::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus)}`;

  var css_248z$S = css`.text-primary{color:var(--sgds-primary-rgb)!important}.text-secondary{color:var(--sgds-secondary-rgb)!important}.text-success{color:var(--sgds-success-rgb)!important}.text-info{color:var(--sgds-info-rgb)!important}.text-warning{color:var(--sgds-warning-rgb)!important}.text-danger{color:var(--sgds-danger-rgb)!important}.text-light{color:var(--sgds-light-rgb)!important}.text-dark{color:var(--sgds-dark-rgb)!important}.text-muted{color:var(--sgds-secondary-color)!important}`;

  var css_248z$R = css`.bg-primary{background-color:var(--sgds-primary)!important}.bg-secondary{background-color:var(--sgds-secondary)!important}.bg-success{background-color:var(--sgds-success)!important}.bg-info{background-color:var(--sgds-info)!important}.bg-warning{background-color:var(--sgds-warning)!important}.bg-danger{background-color:var(--sgds-danger)!important}.bg-light{background-color:var(--sgds-light)!important}.bg-dark{background-color:var(--sgds-dark)!important}`;

  var css_248z$Q = css`.border-primary{border-color:var(--sgds-primary)!important}.border-secondary{border-color:var(--sgds-secondary)!important}.border-success{border-color:var(--sgds-success)!important}.border-info{border-color:var(--sgds-info)!important}.border-warning{border-color:var(--sgds-warning)!important}.border-danger{border-color:var(--sgds-danger)!important}.border-light{border-color:var(--sgds-light)!important}.border-dark{border-color:var(--sgds-dark)!important}`;

  var css_248z$P = css`.h1,.h2,.h3,.h4,.h5,.h6 ::slotted(h6),::slotted(h1),::slotted(h2),::slotted(h3),::slotted(h4),::slotted(h5),h1,h2,h3,h4,h5,h6{color:var(--sgds-heading-color);font-weight:700;line-height:1.2;margin-bottom:.5rem;margin-top:0}.h1,::slotted(h1),h1{font-size:calc(1.375rem + 1.5vw)}@media (min-width:1200px){.h1,::slotted(h1),h1{font-size:2.5rem}}.h2,::slotted(h2),h2{font-size:calc(1.325rem + .9vw)}@media (min-width:1200px){.h2,::slotted(h2),h2{font-size:2rem}}.h3,::slotted(h3),h3{font-size:calc(1.275rem + .3vw)}@media (min-width:1200px){.h3,::slotted(h3),h3{font-size:1.5rem}}.h4,::slotted(h4),h4{font-size:1.125rem}.h5,.h6 ::slotted(h6),::slotted(h5),h5,h6{font-size:1rem}.h1,::slotted(h1),h1{line-height:1.2}.h2,::slotted(h2),h2{line-height:1.25}.h3,::slotted(h3),h3{line-height:1.33}.h4,::slotted(h4),h4{line-height:1.78}.h5,.h6 ::slotted(h6),::slotted(h5),h5,h6{line-height:1.2}`;

  var css_248z$O = css`p{margin-bottom:1.5rem;margin-top:0}`;

  class CardElement extends SgdsElement {
      constructor() {
          super(...arguments);
          /** When true, hides the default border of the card. */
          this.hideBorder = false;
          /** When true, applies a tinted background color to the card. */
          this.tinted = false;
      }
  }
  CardElement.styles = [...SgdsElement.styles, css_248z$S, css_248z$R, css_248z$Q, css_248z$P, css_248z$O, css_248z$T];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], CardElement.prototype, "hideBorder", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], CardElement.prototype, "tinted", void 0);

  var css_248z$N = css`:host([orientation=horizontal]) .card-icon{padding:var(--sgds-padding-xl) 0 var(--sgds-padding-xl) var(--sgds-padding-xl)}.card-icon{line-height:0;padding:var(--sgds-padding-xl) var(--sgds-padding-xl) 0}.card-header{display:flex;flex-direction:column;gap:var(--sgds-gap-xs)}slot[name=subtitle]::slotted(*){--sgds-margin-2-xs:var(--sgds-margin-none);--sgds-margin-xs:var(--sgds-margin-none);--sgds-font-size-4:var(--sgds-font-size-1);--sgds-font-size-5:var(--sgds-font-size-1);--sgds-font-size-6:var(--sgds-font-size-1);--sgds-font-weight-bold:var(--sgds-font-weight-semibold);--sgds-line-height-heading:var(--sgds-line-height-min);--sgds-letter-spacing-tight:var(--sgds-letter-spacing-wide);color:var(--sgds-color-default);font-size:var(--sgds-font-size-1);font-weight:var(--sgds-font-weight-semibold);letter-spacing:var(--sgds-letter-spacing-wide);line-height:var(--sgds-line-height-min);margin:var(--sgds-margin-none);text-transform:uppercase}`;

  /**
   * @summary Cards can be used for headers and footers, a wide variety of content, contain contextual background colors and images.
   * @slot image - Accepts an image or svg element of the card. Only a single element is allowed to be passed in.
   * @slot icon - Accepts an icon element to visually represent the card. Only a single element is allowed to be passed in.
   * @slot subtitle - The subtitle of the card
   * @slot title - The title of the card
   * @slot description - The paragrapher text of the card
   * @slot link - Accepts an anchor element. Only a single element is allowed to be passed in.
   */
  class SgdsCard extends CardElement {
      constructor() {
          super(...arguments);
          /** Extends the link passed in slot[name="link"] to the entire card */
          this.stretchedLink = false;
          /** Disables the card  */
          this.disabled = false;
          /** Sets the orientation of the card. Available options: `vertical`, `horizontal` */
          this.orientation = "vertical";
          /** Sets the image position of the card. Available options: `before`, `after` */
          this.imagePosition = "before";
          /** Controls how the image is sized and aligned within the card. Available options: `default`, `padding around`, `aspect ratio` */
          this.imageAdjustment = "default";
      }
      firstUpdated() {
          if (this._imageNode.length === 0) {
              const icon = this.shadowRoot.querySelector(".card-image");
              icon.style.display = "none";
          }
          if (this._iconNode.length === 0) {
              const icon = this.shadowRoot.querySelector(".card-icon");
              icon.style.display = "none";
          }
          if (this.disabled && this._linkNode.length > 0) {
              const hyperlink = this._linkNode[0].querySelector("a");
              hyperlink.setAttribute("disabled", "true");
              hyperlink.removeAttribute("href");
          }
      }
      handleTitleSlotChange(e) {
          const childNodes = e.target.assignedNodes({ flatten: true });
          if (this.stretchedLink && childNodes[0] instanceof HTMLAnchorElement) {
              const hyperlink = childNodes[0].querySelector("a") || childNodes[0];
              hyperlink.removeAttribute("href");
          }
          return;
      }
      handleLinkSlotChange(e) {
          const childNodes = e.target.assignedNodes({ flatten: true });
          if (childNodes.length > 1) {
              return console.error("Multiple elements passed into SgdsCard's link slot");
          }
          if (this.stretchedLink && childNodes[0] instanceof HTMLAnchorElement) {
              const hyperlink = childNodes[0].querySelector("a") || childNodes[0];
              this.card.setAttribute("href", hyperlink.href);
              const linkSlot = this.shadowRoot.querySelector("slot[name='link']");
              linkSlot.style.display = "none";
          }
          return;
      }
      handleImgSlotChange(e) {
          const childNodes = e.target.assignedNodes({ flatten: true });
          if (childNodes.length > 1) {
              return console.error("Multiple elements passed into SgdsCard's image slot");
          }
      }
      render() {
          const tag = this.stretchedLink ? literal `a` : literal `div`;
          const cardTabIndex = !this.stretchedLink || this.disabled ? -1 : 0;
          return html `
      <${tag} 
        class="card ${classMap({
            disabled: this.disabled
        })}"
        tabindex=${cardTabIndex}
      >
        <div class="card-image">
          <slot name="image" @slotchange=${this.handleImgSlotChange}></slot>
        </div>
        <div class="card-icon">
          <slot name="icon"></slot>
        </div>
        <div class="card-body">
          <div class="card-header">
            <slot name="subtitle"></slot>
            <h3 class="card-title"><slot name="title" @slotchange=${this.handleTitleSlotChange}></slot></h3>
          </div>
          <p class="card-text">
            <slot name="description"></slot>
          </p>
          <slot name="link" @slotchange=${this.handleLinkSlotChange}></slot>
        </div>
      </${tag}>
    `;
      }
  }
  SgdsCard.styles = [...CardElement.styles, css_248z$N];
  __decorate([
      query("a.card")
  ], SgdsCard.prototype, "card", void 0);
  __decorate([
      queryAssignedNodes({ slot: "image", flatten: true })
  ], SgdsCard.prototype, "_imageNode", void 0);
  __decorate([
      queryAssignedNodes({ slot: "icon", flatten: true })
  ], SgdsCard.prototype, "_iconNode", void 0);
  __decorate([
      queryAssignedNodes({ slot: "link", flatten: true })
  ], SgdsCard.prototype, "_linkNode", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCard.prototype, "stretchedLink", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCard.prototype, "disabled", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCard.prototype, "orientation", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCard.prototype, "imagePosition", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCard.prototype, "imageAdjustment", void 0);

  register("sgds-card", SgdsCard);

  /**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  class LiveDirective extends Directive {
      constructor(partInfo) {
          super(partInfo);
          if (!(partInfo.type === PartType.PROPERTY ||
              partInfo.type === PartType.ATTRIBUTE ||
              partInfo.type === PartType.BOOLEAN_ATTRIBUTE)) {
              throw new Error('The `live` directive is not allowed on child or event bindings');
          }
          if (!isSingleExpression(partInfo)) {
              throw new Error('`live` bindings can only contain a single expression');
          }
      }
      render(value) {
          return value;
      }
      update(part, [value]) {
          if (value === noChange || value === nothing) {
              return value;
          }
          const element = part.element;
          const name = part.name;
          if (part.type === PartType.PROPERTY) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              if (value === element[name]) {
                  return noChange;
              }
          }
          else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {
              if (!!value === element.hasAttribute(name)) {
                  return noChange;
              }
          }
          else if (part.type === PartType.ATTRIBUTE) {
              if (element.getAttribute(name) === String(value)) {
                  return noChange;
              }
          }
          // Resets the part's value, causing its dirty-check to fail so that it
          // always sets the value.
          setCommittedValue(part);
          return value;
      }
  }
  /**
   * Checks binding values against live DOM values, instead of previously bound
   * values, when determining whether to update the value.
   *
   * This is useful for cases where the DOM value may change from outside of
   * lit-html, such as with a binding to an `<input>` element's `value` property,
   * a content editable elements text, or to a custom element that changes it's
   * own properties or attributes.
   *
   * In these cases if the DOM value changes, but the value set through lit-html
   * bindings hasn't, lit-html won't know to update the DOM value and will leave
   * it alone. If this is not what you want--if you want to overwrite the DOM
   * value with the bound value no matter what--use the `live()` directive:
   *
   * ```js
   * html`<input .value=${live(x)}>`
   * ```
   *
   * `live()` performs a strict equality check against the live DOM value, and if
   * the new value is equal to the live value, does nothing. This means that
   * `live()` should not be used when the binding will cause a type conversion. If
   * you use `live()` with an attribute binding, make sure that only strings are
   * passed in, or the binding will update every render.
   */
  const live = directive(LiveDirective);

  var css_248z$M = css`.invalid-feedback-container{display:flex;gap:var(--sgds-form-gap-sm)}.invalid-feedback,.invalid-feedback-container{color:var(--sgds-form-danger-color-default);line-height:var(--sgds-line-height-min)}.invalid-feedback{font-size:var(--sgds-font-size-1);font-weight:var(--sgds-font-weight-regular)}.valid-icon{color:var(--sgds-form-success-color-default)}`;

  var css_248z$L = css`.form-text{color:var(--sgds-form-color-subtle);font-size:var(--sgds-font-size-1);line-height:var(--sgds-line-height-min)}.form-text.disabled{opacity:var(--sgds-opacity-50)}`;

  // @defaultValue decorator
  const defaultValue = (propertyName = "value") => (proto, key) => {
      const ctor = proto.constructor;
      const attributeChangedCallback = ctor.prototype.attributeChangedCallback;
      ctor.prototype.attributeChangedCallback = function (name, old, value) {
          var _a;
          const options = ctor.getPropertyOptions(propertyName);
          const attributeName = (typeof options.attribute === "string" ? options.attribute : propertyName).toLowerCase();
          if (name === attributeName) {
              const converter = options.converter || defaultConverter;
              const fromAttribute = typeof converter === "function" ? converter : (_a = converter === null || converter === void 0 ? void 0 : converter.fromAttribute) !== null && _a !== void 0 ? _a : defaultConverter.fromAttribute;
              const newValue = fromAttribute(value, options.type);
              if (this[propertyName] !== newValue) {
                  this[key] = newValue;
              }
          }
          attributeChangedCallback.call(this, name, old, value);
      };
  };

  /**
   * SGDS custom form validation methods and behaviours
   */
  class InputValidationController {
      constructor(host, options) {
          (this.host = host).addController(this);
          this._internals = this.host.attachInternals();
          this.options = Object.assign({ setInvalid: (host, value) => {
                  host.invalid = value;
              }, value: (host) => {
                  return host.value;
              }, input: (host) => host.input }, options);
      }
      hostConnected() {
          this.host.addEventListener("invalid", e => this.handleInvalid(e));
      }
      hostDisconnected() {
          this.host.removeEventListener("invalid", e => this.handleInvalid(e));
      }
      /**
       * Prevents the native browser error message pop up when reportValidity() called by
       * associated form or the component's reportValidity during constraint validation
       * Sets invalid reactive prop to true
       */
      handleInvalid(e) {
          e.preventDefault();
          this.options.setInvalid(this.host, true);
      }
      /**
       * Sets invalid to false when invoked and
       * Updates the ValidityState based on new value, but
       * does not update invalid reactive prop
       * @param e
       */
      handleInput(e) {
          const input = e.target;
          this.options.setInvalid(this.host, false);
          this.validateInput(input);
      }
      /**
       * Validate the input's new value after onChange and
       * update invalid reactive prop
       * @param e
       */
      handleChange(e) {
          const input = e.target;
          this.validateInput(input);
          this.options.setInvalid(this.host, !this.checkValidity());
      }
      get form() {
          return this._internals.form;
      }
      get validity() {
          return this._internals.validity;
      }
      get validationMessage() {
          return this._internals.validationMessage;
      }
      get willValidate() {
          return this._internals.willValidate;
      }
      /**
       * Checks the validity and updates the invalid reactive prop of form components
       */
      updateInvalidState() {
          this.options.setInvalid(this.host, !this.checkValidity());
      }
      /**
       * Resets the ValidityState of the control
       */
      resetValidity() {
          return this._internals.setValidity({});
      }
      /**
       * Reports the validity
       */
      checkValidity() {
          return this._internals.checkValidity();
      }
      /**
       * Reports the validity with a error popup message
       */
      reportValidity() {
          return this._internals.reportValidity();
      }
      setValidity(flags, message, anchor) {
          return this._internals.setValidity(flags, message, anchor);
      }
      /**
       * Sets the form control value into FormData,
       * making the value of control accessible via FormData
       */
      setFormValue() {
          const value = this.options.value(this.host);
          this._internals.setFormValue(value);
      }
      /**
       * Updates the ValidityState of the input in form component at current state
       */
      validateInput(input) {
          /** When the form control is disabled, its always valid */
          if (this.options.input(this.host).disabled) {
              return this._internals.setValidity({});
          }
          // get the validity of the internal <input>
          const validState = input.validity;
          // if the input is invalid, show the correct error
          if (!validState.valid) {
              // loop through the error reasons
              for (const state in validState) {
                  // if there is an error and corresponding attribute holding
                  // the message
                  if (validState[state]) {
                      this.validationError = state.toString();
                      // set the validity error reason and the corresponding
                      // message
                      this._internals.setValidity({ [this.validationError]: true }, input.validationMessage, input);
                  }
              }
          }
          else {
              this._internals.setValidity({});
          }
      }
  }

  /**
   * @summary The FormValidationMixin used by the form components
   * @param superClass
   * @returns
   */
  const SgdsFormValidatorMixin = (superClass) => {
      class ToBeValidatedElement extends superClass {
          constructor() {
              super(...arguments);
              this._isTouched = false;
          }
          connectedCallback() {
              super.connectedCallback();
              this.inputValidationController = new InputValidationController(this);
          }
          async firstUpdated(changedProperties) {
              super.firstUpdated(changedProperties);
              /* Either input or sgds-input. For example, quantity-toggle uses sgds-input */
              this.input =
                  this.shadowRoot.querySelector("input") ||
                      (await this.sgdsInput) ||
                      this.shadowRoot.querySelector("textarea") ||
                      (await this.sgdsDatepickerInput);
              this._mixinValidate(this.input);
          }
          /**
           * Native lifecycle of Form-Associated Custom Element Callbacks
           */
          formResetCallback() {
              if (this._mixinResetFormControl) {
                  this._mixinResetFormControl();
              }
              else {
                  this.value = this.defaultValue;
                  this._mixinResetValidity(this.input);
              }
              this._mixinSetFormValue();
          }
          /**
           *
           * Methods use by classes using this mixin
           */
          /**
           * OnChange of form component
           * 1. Make value of control accessible via FormData
           * 2. Run change handler
           */
          _mixinHandleChange(e) {
              this._mixinSetFormValue();
              this.inputValidationController.handleChange(e);
          }
          /**
           * OnChange of form component
           * 1. Make value of control accessible via FormData
           * 2. Run input handler
           */
          _mixinHandleInputChange(e) {
              this._mixinSetFormValue();
              this.inputValidationController.handleInput(e);
          }
          /**
           * During form resetting,
           * 1. ValidityState is reset
           * 2. invalid reactive prop is updated after the reset
           * 3. Revalidates the ValidityState (but do not update invalid prop)
           * to prepare for the next validity check
           * 4. Reset touched state to false for a pristine form
           */
          _mixinResetValidity(input) {
              this.inputValidationController.resetValidity();
              this.inputValidationController.updateInvalidState();
              this.inputValidationController.validateInput(input);
              this._isTouched ? (this._isTouched = false) : null;
          }
          _mixinValidate(input) {
              this.inputValidationController.validateInput(input);
          }
          _mixinSetFormValue() {
              this.inputValidationController.setFormValue();
          }
          _mixinCheckValidity() {
              return this.inputValidationController.checkValidity();
          }
          _mixinReportValidity() {
              return this.inputValidationController.reportValidity();
          }
          _mixinGetValidity() {
              return this.inputValidationController.validity;
          }
          _mixinGetValidationMessage() {
              return this.inputValidationController.validationMessage;
          }
          _mixinSetValidity(flags, message, anchor) {
              return this.inputValidationController.setValidity(flags, message, anchor);
          }
      }
      ToBeValidatedElement.formAssociated = true;
      __decorate([
          queryAsync("sgds-input")
      ], ToBeValidatedElement.prototype, "sgdsInput", void 0);
      __decorate([
          queryAsync("sgds-datepicker-input")
      ], ToBeValidatedElement.prototype, "sgdsDatepickerInput", void 0);
      return ToBeValidatedElement;
  };

  var css_248z$K = css`.form-label{color:var(--sgds-form-color-default);margin-bottom:0}.form-label.disabled{opacity:var(--sgds-opacity-50)}.form-check-label{color:var(--sgds-form-color-default)}.form-check-input:disabled~.form-check-label,.form-check-input[disabled]~.form-check-label{cursor:not-allowed}`;

  var css_248z$J = css`.form-control::placeholder{color:var(--sgds-form-color-subtle);font-family:var(--sgds-font-family-brand);font-weight:var(--sgds-font-weight-light);line-height:var(--sgds-line-height-body)}`;

  class FormControlElement extends SgdsElement {
      constructor() {
          super(...arguments);
          /** The input's label  */
          this.label = "";
          /** The input's hint text */
          this.hintText = "";
          /** Disables the input. */
          this.disabled = false;
          /** Marks the component as invalid. Replace the pseudo :invalid selector for absent in custom elements */
          this.invalid = false;
          this._controlId = genId("input");
          this._labelId = genId("label");
      }
      /** Programatically sets the invalid state of the input. Pass in boolean value in the argument */
      setInvalid(bool) {
          this.invalid = bool;
          if (bool) {
              this.emit("sgds-invalid");
          }
          else {
              this.emit("sgds-valid");
          }
      }
  }
  FormControlElement.styles = [...SgdsElement.styles, css_248z$M, css_248z$L, css_248z$K, css_248z$J];
  __decorate([
      property({ reflect: true })
  ], FormControlElement.prototype, "label", void 0);
  __decorate([
      property({ reflect: true })
  ], FormControlElement.prototype, "hintText", void 0);
  __decorate([
      property({ reflect: true })
  ], FormControlElement.prototype, "name", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], FormControlElement.prototype, "disabled", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], FormControlElement.prototype, "invalid", void 0);

  var css_248z$I = css`input{margin:0}.form-check{display:flex;gap:var(--sgds-form-gap-md);padding:var(--sgds-form-padding-inline-sm) 0}.form-check-input,.form-check-input-container{height:var(--sgds-form-height-sm);width:var(--sgds-form-width-xs)}.form-check-input{appearance:none;background-color:var(--sgds-form-surface-default);background-image:var(--sgds-radio-bg-image);background-position:50%;background-repeat:no-repeat;background-size:auto;border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-default);border-radius:var(--sgds-form-border-radius-md)}:host(:not([disabled]):not([invalid]):not([checked]):not([indeterminate])) .form-check-input:hover{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis)}.form-check-input:focus,.form-check-input:focus-visible{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis);box-shadow:var(--sgds-form-box-shadow-focus);outline:0}.form-check-input:checked,.form-check-input[checked]{--sgds-radio-bg-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" fill="none"><path d="M14.347 3.979a.522.522 0 0 1 0 .739L7.043 12.02a.521.521 0 0 1-.738 0L2.653 8.369a.522.522 0 1 1 .739-.738l3.282 3.283 6.934-6.935a.52.52 0 0 1 .739 0Z" fill="%23fff"/></svg>');background-color:var(--sgds-form-primary-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-transparent)}.form-check-input:checked:focus,.form-check-input:checked:hover,.form-check-input[checked]:focus-visible,.form-check-input[checked]:hover{background-color:var(--sgds-form-primary-surface-emphasis)}.form-check-input:indeterminate,.form-check-input[indeterminate]{--sgds-radio-bg-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" fill="none"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.5 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5Z" fill="%23fff"/></svg>');background-color:var(--sgds-form-primary-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-transparent)}.form-check-input:indeterminate:focus,.form-check-input:indeterminate:hover,.form-check-input[indeterminate]:focus-visible,.form-check-input[indeterminate]:hover{background-color:var(--sgds-form-primary-surface-emphasis)}:host([disabled]) .form-check{cursor:not-allowed;opacity:var(--sgds-opacity-50)}.form-check-input.is-invalid{border:var(--sgds-form-border-width-thick) solid var(--sgds-form-danger-border-color-default)}.form-check-input:checked.is-invalid,.form-check-input:indeterminate.is-invalid,.form-check-input[checked].is-invalid,.form-check-input[indeterminate].is-invalid{background-color:var(--sgds-form-danger-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-transparent)}.form-check-label{width:100%}`;

  /**
   * @summary Checkbox component is used when you require users to select multiple items from a list.
   *
   * @slot default - The label of checkbox.
   *
   * @event sgds-change - Emitted when the checked state changes.
   * @event sgds-blur - Emitted when input is not in focus.
   * @event sgds-focus - Emitted when input is in focus.
   * @event sgds-validity-change - Emitted when the invalid state changes. This event is used by sgds-checkbox-group to check the invalid state change of its children
   */
  class SgdsCheckbox extends SgdsFormValidatorMixin(FormControlElement) {
      constructor() {
          super(...arguments);
          /** Draws the checkbox in a checked state. */
          this.checked = false;
          /** Allows invalidFeedback, invalid and valid styles to be visible with the input */
          this.hasFeedback = false;
          /** Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
          this.defaultChecked = false;
          /** Marks the checkbox input as indeterminate , with indeterminate logo  */
          this.indeterminate = false;
          /** Makes the checkbox a required field. */
          this.required = false;
          this._isTouched = false;
      }
      _handleInvalidChange() {
          this.emit("sgds-validity-change", {
              detail: { invalid: this.invalid, validationMessage: this.input.validationMessage }
          });
      }
      /** Simulates a click on the checkbox. */
      click() {
          this.input.click();
      }
      /** Sets focus on the checkbox. */
      focus(options) {
          this.input.focus(options);
      }
      /** Removes focus from the checkbox. */
      blur() {
          this.input.blur();
      }
      _handleChange(e) {
          if (this.indeterminate) {
              this.indeterminate = !this.indeterminate;
          }
          this.checked = !this.checked;
          this.value = this.input.value;
          super._mixinHandleChange(e);
          this.emit("sgds-change", { detail: { checked: this.checked, value: this.value } });
      }
      _handleKeyDown(event) {
          const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
          if (event.key === "Enter" && !hasModifier) {
              this.click();
          }
      }
      _handleBlur() {
          this._isTouched = true;
          this.emit("sgds-blur");
      }
      _handleFocus() {
          this.emit("sgds-focus");
      }
      _handleInvalid(e) {
          e.preventDefault();
          this.invalid = true;
      }
      /** @internal */
      _handleDisabledChange() {
          // Disabled form controls are always valid, so we need to recheck validity when the state changes
          this.setInvalid(false);
      }
      _handleIsTouched() {
          if (this._isTouched) {
              this.invalid = !this.input.checkValidity();
          }
      }
      _mixinResetFormControl() {
          this._isTouched = false;
          this.checked = this.input.checked = this.defaultChecked;
          this.input.dispatchEvent(new InputEvent("reset"));
          this._mixinResetValidity(this.input);
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      render() {
          return html$1 `
      <div class="form-check">
        <div class="form-check-input-container">
          <input
            class=${classMap({
            "form-check-input": true,
            "is-invalid": this.hasFeedback && this.invalid
        })}
            type="checkbox"
            id=${this._controlId}
            aria-invalid=${this.invalid ? "true" : "false"}
            name=${ifDefined(this.name)}
            ?indeterminate=${this.indeterminate}
            ?required=${this.required}
            aria-disabled=${this.disabled ? "true" : "false"}
            aria-checked=${this.checked ? "true" : "false"}
            @change=${(e) => this._handleChange(e)}
            @keydown=${this._handleKeyDown}
            @invalid=${(e) => this._handleInvalid(e)}
            .checked=${live(this.checked)}
            .disabled=${this.disabled}
            .required=${this.required}
            @blur=${this._handleBlur}
            @focus=${this._handleFocus}
          />
        </div>
        <label for="${this._controlId}" class="form-check-label" id="${this._labelId}"><slot></slot></label>
      </div>
    `;
      }
  }
  SgdsCheckbox.styles = [...FormControlElement.styles, css_248z$I];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCheckbox.prototype, "value", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCheckbox.prototype, "checked", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCheckbox.prototype, "hasFeedback", void 0);
  __decorate([
      defaultValue("checked")
  ], SgdsCheckbox.prototype, "defaultChecked", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCheckbox.prototype, "indeterminate", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCheckbox.prototype, "required", void 0);
  __decorate([
      state()
  ], SgdsCheckbox.prototype, "_isTouched", void 0);
  __decorate([
      watch("invalid", { waitUntilFirstUpdate: true })
  ], SgdsCheckbox.prototype, "_handleInvalidChange", null);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsCheckbox.prototype, "_handleDisabledChange", null);
  __decorate([
      watch("_isTouched", { waitUntilFirstUpdate: true })
  ], SgdsCheckbox.prototype, "_handleIsTouched", null);

  var css_248z$H = css`:host([active]) .dropdown-item{background-color:var(--sgds-primary-surface-translucent)}.dropdown-item{background-color:var(--sgds-bg-transparent);clear:both;color:var(--sgds-color-default);cursor:pointer;height:100%;padding:var(--sgds-padding-sm) var(--sgds-padding-lg);text-align:inherit;white-space:nowrap}.dropdown-item .normal-item-content{align-items:center;display:flex;justify-content:space-between}:host([active]) .dropdown-item .normal-item-content{color:var(--sgds-primary-bg-default)}:host([active]) .dropdown-item .normal-item-content sgds-icon{fill:var(--sgds-primary-bg-default);color:var(--sgds-primary-bg-default)}.dropdown-item:hover{background:var(--sgds-bg-translucent-subtle)}.dropdown-item:focus,.dropdown-item:focus-visible{background:var(--sgds-bg-translucent-subtle);box-shadow:inset var(--sgds-form-box-shadow-focus);outline:0}`;

  class ComboBoxItem extends SgdsElement {
      constructor() {
          super(...arguments);
          /** when true, sets the active stylings */
          this.active = false;
          /** Disables the Item */
          this.disabled = false;
          /** If true, this item is rendered as a checkbox item */
          this.checkbox = false;
      }
      connectedCallback() {
          super.connectedCallback();
          this.setAttribute("role", "menuitem");
          this.setAttribute("aria-disabled", `${this.disabled}`);
          this.addEventListener("keydown", (e) => {
              if (e.key === "Enter") {
                  this.checkbox ? this._handleCheckboxClick() : this._handleNonCheckboxClick();
              }
          });
      }
      _handleNonCheckboxClick() {
          if (!this.checkbox) {
              this.emit("sgds-select");
          }
      }
      _handleCheckboxClick() {
          this.shadowRoot.querySelector("sgds-checkbox").click();
      }
      _handleCheckboxChange(e) {
          const checkbox = e.target;
          this.active = checkbox.checked;
          this.active ? this.emit("sgds-select") : this.emit("sgds-unselect");
      }
      render() {
          const classes = {
              disabled: this.disabled,
              active: this.active,
              checkbox: this.checkbox
          };
          return html$1 `
      <div class="dropdown-item ${classMap(classes)}" tabindex=${this.disabled ? "-1" : "0"}>
        ${this.checkbox
            ? html$1 `
              <sgds-checkbox
                .checked=${this.active}
                .disabled=${this.disabled}
                @sgds-change=${this._handleCheckboxChange}
              >
                <slot></slot>
              </sgds-checkbox>
            `
            : html$1 `
              <div class="normal-item-content" @click=${this._handleNonCheckboxClick}>
                <slot></slot>
                ${this.active ? html$1 ` <sgds-icon name="check"></sgds-icon> ` : nothing}
              </div>
            `}
      </div>
    `;
      }
  }
  /** @internal */
  ComboBoxItem.dependencies = {
      "sgds-icon": SgdsIcon,
      "sgds-checkbox": SgdsCheckbox
  };
  ComboBoxItem.styles = [css_248z$H];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], ComboBoxItem.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], ComboBoxItem.prototype, "disabled", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], ComboBoxItem.prototype, "checkbox", void 0);

  var css_248z$G = css`:host{display:block;position:relative}.combobox{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}.combobox .dropdown-menu{min-width:100%}.dropdown{display:flex;height:100%}.combobox .form-control-icon{align-items:center}.sgds.combobox{align-items:stretch;display:flex;flex-wrap:wrap;justify-content:flex-end;position:relative;width:-webkit-fill-available;width:-moz-available}.dropdown-menu{box-sizing:border-box;max-height:10rem;overflow-x:hidden;overflow-y:auto}.form-control-icon{bottom:0}.combobox-caret{color:var(--sgds-form-color-default)}.visually-hidden{clip:rect(0,0,0,0)!important;border:0!important;height:1px!important;margin:-1px!important;overflow:hidden!important;padding:0!important;position:absolute!important;white-space:nowrap!important;width:1px!important}.form-control-group.disabled{cursor:not-allowed;opacity:var(--sgds-opacity-50)}.form-control-group{align-items:center;background-color:var(--sgds-form-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-default);border-radius:var(--sgds-form-border-radius-md);display:flex;gap:var(--sgds-form-gap-md);justify-content:space-between;min-height:var(--sgds-dimension-48);min-width:var(--sgds-dimension-256);padding:var(--sgds-form-padding-y) var(--sgds-form-padding-x);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:-webkit-fill-available;width:-moz-available}.form-control{appearance:none;background-clip:padding-box;background:none;border:none;color:var(--sgds-form-color-default);display:inline;flex-grow:1;font-size:var(--sgds-font-size-2);line-height:var(--sgds-line-height-body);outline:none;padding:0}.combobox-input-container{display:flex;flex-wrap:wrap;gap:var(--sgds-gap-xs);width:100%}.empty-menu{padding:var(--sgds-padding-sm) var(--sgds-padding-lg,20px)}.form-control-group.readonly{border-color:var(--sgds-border-color-muted)}.form-control-group:not(.disabled):not(.is-invalid):hover{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis)}.form-control-group:not(.disabled):not(.is-invalid):focus,.form-control-group:not(.disabled):not(.is-invalid):focus-within{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis);box-shadow:var(--sgds-form-box-shadow-focus);outline:0}.form-control-group.is-invalid{border:var(--sgds-form-border-width-thick) solid var(--sgds-form-danger-border-color-default)}.form-control-group.disabled{background-color:var(--sgds-form-surface-muted)}`;

  /**
   * @summary ComboBox component is used for users to make one or more selections from a list.
   *
   * @slot icon - slot for form control icon to be displayed on the right of the input box.
   *
   * @event sgds-select - Emitted when the combo box's selected value changes.
   * @event sgds-input -  Emitted when user input is received and its value changes.
   */
  class SgdsComboBox extends SgdsFormValidatorMixin(DropdownListElement) {
      constructor() {
          super();
          /** The input's label  */
          this.label = "";
          /** The input's hint text below the label */
          this.hintText = "";
          /** Autofocus the input */
          this.autofocus = false;
          /** Disables the input. */
          this.disabled = false;
          /** Makes the input a required field. */
          this.required = false;
          /** Makes the input readonly. */
          this.readonly = false;
          /**
           * IMPORTANT:
           * We still expose `.value` externally, but this is now the underlying ID or data
           * (e.g. 1, 2, 'abc', ...), not the label that appears in the input box.
           */
          this.value = "";
          this.displayValue = "";
          /** @internal Gets or sets the default value used to reset this element. */
          this.defaultValue = "";
          /** Allows invalidFeedback, invalid and valid styles to be visible with the input */
          this.hasFeedback = false;
          /** Feedback text for error state when validated */
          this.invalidFeedback = "";
          /** Marks the component as invalid. Replace the pseudo :invalid selector. */
          this.invalid = false;
          /** The list of items to display in the dropdown.
           * `interface SgdsComboBoxItemData {
           * label: string;
           * value: string;
           * }`
           */
          this.menuList = [];
          /** If true, renders multiple checkbox selection items. If false, single-select. */
          this.multiSelect = false;
          /** The function used to filter the menu list, given the user's input value. */
          this.filterFunction = (inputValue, item) => {
              return item.label.toLowerCase().startsWith(inputValue.toLowerCase());
          };
          /** @internal Managed filtered menu on the fly with input change*/
          this.filteredMenuList = [];
          /** @internal Managed menu to render depending on the activity. On input change, show filteredMenu, on selections and initial state show full menu list. */
          this._renderedMenu = [];
          /** Track selected items (even for single-select, but it will have at most one). */
          this.selectedItems = [];
          this._isTouched = false;
          this._controlId = genId("input");
          this._labelId = genId("label");
          /** @internal */
          this.modifierOpt = [
              {
                  name: "offset",
                  options: {
                      offset: [0, 8]
                  }
              }
          ];
      }
      connectedCallback() {
          super.connectedCallback();
          this.addEventListener("blur", async () => {
              this.invalid = !this._mixinReportValidity();
          });
          this.addEventListener("sgds-hide", async () => {
              const sgdsInput = await this._sgdsInput;
              sgdsInput.focus();
              this._renderedMenu = this.menuList;
          });
          /** @internal */
          if (this.readonly) {
              this._handleKeyboardMenuEvent = null;
              this._handleKeyboardMenuItemsEvent = null;
          }
      }
      async firstUpdated() {
          super.firstUpdated();
          this._renderedMenu = this.menuList;
          if (this.value) {
              const valueArray = this.value.split(";");
              const initialSelectedItem = this.menuList.filter(({ value }) => valueArray.includes(value));
              this.selectedItems = [...initialSelectedItem, ...this.selectedItems];
              if (!this.multiSelect) {
                  this.displayValue = initialSelectedItem[0].label;
              }
          }
          this.multiSelect ? (this.input = await this._multiSelectInput) : (this.input = await this._sgdsInput);
          this._mixinValidate(this.input);
          if (this.menuIsOpen && !this.readonly) {
              this.showMenu();
          }
      }
      async _handleValueChange() {
          if (this.value) {
              this.emit("sgds-select");
          }
          const sgdsInput = await this._sgdsInput;
          this._mixinSetFormValue();
          if (this.multiSelect) {
              this._mixinValidate(this.input);
          }
          else {
              // this._mixinValidate(sgdsInput.input);
              this._mixinValidate(sgdsInput);
          }
          if (!this._isTouched && this.value === "")
              return;
          this.invalid = !this._mixinReportValidity();
      }
      // Called each time the user types in the <sgds-input>, we set .value and show the menu
      async _handleInputChange(e) {
          this.emit("sgds-input");
          const input = e.target;
          this.displayValue = input.value;
          this.filteredMenuList = this.menuList.filter(item => this.filterFunction(this.displayValue, item));
          // reset menu list when displayValue
          if (this.displayValue === "" && !this.multiSelect) {
              this.selectedItems = [];
              this.value = this.selectedItems.join(";");
          }
          this.invalid = false;
          this.showMenu();
          this.displayValue = e.target.value;
          this._renderedMenu = this.filteredMenuList;
          if (this.displayValue === "") {
              this._renderedMenu = this.menuList;
              await this.updateComplete;
          }
      }
      /**
       * Called whenever an <sgds-combo-box-item> dispatches sgds-select"
       */
      async _handleItemSelected(e) {
          var _a, _b, _c;
          const itemEl = e.target;
          const itemLabel = (_b = (_a = itemEl.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : "";
          const itemValueAttr = (_c = itemEl.getAttribute("value")) !== null && _c !== void 0 ? _c : itemLabel;
          const foundItem = this.filteredMenuList.find(i => i.value.toString() === itemValueAttr) || {
              label: itemLabel,
              value: itemValueAttr
          };
          if (this.multiSelect) {
              if (!this.selectedItems.some(i => i.value === foundItem.value)) {
                  this.selectedItems = [...this.selectedItems, foundItem];
                  setTimeout(() => (this.displayValue = ""));
              }
              this.hideMenu();
              this.value = this.selectedItems.map(i => i.value).join(";");
          }
          else {
              // Single-select
              this.selectedItems = [foundItem];
              this.value = foundItem.value.toString();
              this.displayValue = this.selectedItems[0].label;
              this.hideMenu();
          }
      }
      _handleItemUnselect(e) {
          var _a, _b, _c;
          const itemEl = e.target;
          const itemLabel = (_b = (_a = itemEl.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : "";
          const itemValueAttr = (_c = itemEl.getAttribute("value")) !== null && _c !== void 0 ? _c : itemLabel;
          const foundItem = this.filteredMenuList.find(i => i.value.toString() === itemValueAttr) || {
              label: itemLabel,
              value: itemValueAttr
          };
          this.selectedItems = this.selectedItems.filter(i => i.value !== foundItem.value);
          this.value = this.selectedItems.map(i => i.value).join(";");
      }
      async _handleBadgeDismissed(item) {
          this.selectedItems = this.selectedItems.filter(i => i.value !== item.value);
          this.value = this.selectedItems.map(i => i.value).join(";");
      }
      async _handleMultiSelectKeyDown(e) {
          // Only do this in multi-select mode
          if (!this.multiSelect) {
              return;
          }
          if (e.key === "Backspace" && this.multiSelect) {
              if (this.displayValue.trim() === "" && this.selectedItems.length > 0) {
                  this.selectedItems = this.selectedItems.slice(0, -1);
                  this.value = this.selectedItems.map(i => i.value).join(";");
              }
          }
      }
      async _handleInputBlur(e) {
          e.preventDefault();
          if (this.multiSelect) {
              const displayValueMatchedSelectedItems = this.selectedItems.filter(({ label }) => this.displayValue === label);
              if (displayValueMatchedSelectedItems.length <= 0) {
                  this.displayValue = "";
              }
          }
          else {
              // Single select
              if (this.selectedItems.length > 0) {
                  this.displayValue = this.selectedItems[0].label;
              }
              else {
                  this.displayValue = "";
              }
          }
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      _renderFeedback() {
          return this.invalid && this.hasFeedback
              ? html$1 ` <div class="invalid-feedback-container">
          <slot name="invalidIcon">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path
                d="M17.5 10C17.5 14.1421 14.1421 17.5 10 17.5C5.85786 17.5 2.5 14.1421 2.5 10C2.5 5.85786 5.85786 2.5 10 2.5C14.1421 2.5 17.5 5.85786 17.5 10ZM10 6.25C9.49805 6.25 9.10584 6.68339 9.15578 7.18285L9.48461 10.4711C9.51109 10.7359 9.7339 10.9375 10 10.9375C10.2661 10.9375 10.4889 10.7359 10.5154 10.4711L10.8442 7.18285C10.8942 6.68339 10.5019 6.25 10 6.25ZM10.0014 11.875C9.48368 11.875 9.06394 12.2947 9.06394 12.8125C9.06394 13.3303 9.48368 13.75 10.0014 13.75C10.5192 13.75 10.9389 13.3303 10.9389 12.8125C10.9389 12.2947 10.5192 11.875 10.0014 11.875Z"
                fill="currentColor"
              />
            </svg>
          </slot>
          <div id="${this._controlId}-invalid" class="invalid-feedback">
            ${this.invalidFeedback ? this.invalidFeedback : this.validationMessage}
          </div>
        </div>`
              : html$1 `${this._renderHintText()}`;
      }
      _renderHintText() {
          const hintTextTemplate = html$1 ` <div id="${this._controlId}Help" class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      /** For form reset  */
      async _mixinResetFormControl() {
          this.value = this.defaultValue;
          if (!this.multiSelect) {
              const initialItem = this.menuList.filter(({ value }) => value === this.value);
              if (initialItem.length <= 0) {
                  this.displayValue = "";
              }
              else {
                  this.displayValue = initialItem[0].label;
              }
              this._mixinResetValidity(await this._sgdsInput);
          }
          else {
              const valueArray = this.value.split(";");
              const initialItem = this.menuList.filter(({ value }) => valueArray.includes(value));
              this.selectedItems = initialItem;
              this._mixinResetValidity(await this._multiSelectInput);
          }
      }
      _menu() {
          const emptyMenu = html$1 ` <div class="empty-menu">No options</div> `;
          const menu = this._renderedMenu.map(item => {
              let isActive = false;
              if (this.multiSelect) {
                  const selectedItemValueArray = this.selectedItems.map(i => i.value);
                  isActive = selectedItemValueArray.includes(item.value);
              }
              else {
                  isActive = item.value === this.value;
              }
              return html$1 `
        <sgds-combo-box-item
          ?active=${isActive}
          ?checkbox=${this.multiSelect}
          value=${item.value}
          @sgds-select=${this._handleItemSelected}
          @sgds-unselect=${this._handleItemUnselect}
        >
          ${item.label}
        </sgds-combo-box-item>
      `;
          });
          return this._renderedMenu.length === 0 ? emptyMenu : menu;
      }
      _handleClick() {
          if (this.readonly) {
              return null;
          }
          if (!this.menuIsOpen) {
              this.showMenu();
          }
          else {
              this.hideMenu();
          }
      }
      _renderLabel() {
          const labelTemplate = html$1 `
      <label
        for=${this._controlId}
        id=${this._labelId}
        class=${classMap({
            "form-label": true,
            required: this.required
        })}
        >${this.label}</label
      >
    `;
          return this.label && labelTemplate;
      }
      _renderInput() {
          const wantFeedbackStyle = this.hasFeedback;
          return html$1 `
      <div
        ${ref(this.myDropdown)}
        class="form-control-group ${classMap({
            disabled: this.disabled,
            readonly: this.readonly,
            "is-invalid": this.invalid && wantFeedbackStyle
        })}"
        @click=${this._handleClick}
      >
        <div class="combobox-input-container">
          ${this.multiSelect
            ? html$1 `
                ${this.selectedItems.map(item => html$1 `<sgds-badge
                      outlined
                      variant="neutral"
                      show
                      dismissible
                      @sgds-hide=${() => this._handleBadgeDismissed(item)}
                      >${item.label}</sgds-badge
                    >`)}
              `
            : nothing}
          <input
            class="form-control"
            type="text"
            id=${this._controlId}
            name=${ifDefined(this.name)}
            placeholder=${ifDefined(this.placeholder)}
            aria-invalid=${this.invalid ? "true" : "false"}
            ?autofocus=${this.autofocus}
            ?disabled=${this.disabled}
            ?readonly=${this.readonly}
            ?required=${this.required}
            .value=${this.displayValue}
            @input=${this._handleInputChange}
            @blur=${this._handleInputBlur}
            aria-describedby=${ifDefined(this.invalid && this.hasFeedback ? `${this._controlId}-invalid` : undefined)}
            aria-labelledby="${this._labelId} ${this._controlId}Help ${this.invalid && this.hasFeedback
            ? `${this._controlId}-invalid`
            : ""}"
          />
        </div>
        <sgds-icon name="chevron-down" size="md"></sgds-icon>
      </div>
    `;
      }
      render() {
          return html$1 `
      <div class="combobox" @keydown=${this._handleMultiSelectKeyDown}>
        ${this._renderLabel()}
        <!-- The input -->
        ${this._renderInput()} ${this._renderFeedback()}
        <ul id=${this.dropdownMenuId} class="dropdown-menu" part="menu" tabindex="-1">
          ${this._menu()}
        </ul>
      </div>
      <!-- Required an input element for constraint validation -->
      ${this.multiSelect
            ? html$1 `<input
            .value=${live(this.value)}
            id="multi-select-input-tracker"
            class="visually-hidden"
            ?required=${this.required}
          />`
            : nothing}
    `;
      }
  }
  SgdsComboBox.styles = [...DropdownListElement.styles, css_248z$$, css_248z$L, css_248z$M, css_248z$G];
  /** @internal */
  SgdsComboBox.dependencies = {
      "sgds-combo-box-item": ComboBoxItem,
      "sgds-icon": SgdsIcon,
      "sgds-badge": SgdsBadge
  };
  __decorate([
      property({ reflect: true })
  ], SgdsComboBox.prototype, "label", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsComboBox.prototype, "hintText", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsComboBox.prototype, "name", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsComboBox.prototype, "placeholder", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "autofocus", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "disabled", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "required", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "readonly", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsComboBox.prototype, "value", void 0);
  __decorate([
      state()
  ], SgdsComboBox.prototype, "displayValue", void 0);
  __decorate([
      defaultValue()
  ], SgdsComboBox.prototype, "defaultValue", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "hasFeedback", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsComboBox.prototype, "invalidFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "invalid", void 0);
  __decorate([
      property({ type: Array })
  ], SgdsComboBox.prototype, "menuList", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsComboBox.prototype, "multiSelect", void 0);
  __decorate([
      property()
  ], SgdsComboBox.prototype, "filterFunction", void 0);
  __decorate([
      state()
  ], SgdsComboBox.prototype, "filteredMenuList", void 0);
  __decorate([
      state()
  ], SgdsComboBox.prototype, "_renderedMenu", void 0);
  __decorate([
      state()
  ], SgdsComboBox.prototype, "selectedItems", void 0);
  __decorate([
      queryAsync("input.form-control")
  ], SgdsComboBox.prototype, "_sgdsInput", void 0);
  __decorate([
      queryAsync("input#multi-select-input-tracker")
  ], SgdsComboBox.prototype, "_multiSelectInput", void 0);
  __decorate([
      watch("value", { waitUntilFirstUpdate: true })
  ], SgdsComboBox.prototype, "_handleValueChange", null);

  register("sgds-combo-box", SgdsComboBox);

  var css_248z$F = css`:host{--sgds-checkbox-group-gap:var(--sgds-spacer-2)}fieldset{border:0;gap:var(--sgds-form-gap-md);margin:0;min-width:0;padding:0}.label-hint-container,fieldset{display:flex;flex-direction:column}.label-hint-container{gap:var(--sgds-form-gap-sm)}.label-hint-container .form-label{color:var(--sgds-form-color-default);font-size:var(--sgds-font-size-2);font-weight:var(--sgds-font-weight-regular)}.checkbox-container{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}`;

  /**
   * @summary CheckboxGroup is the container that group multiple checkboxes under a single question field.
   * It handles the display of validation feedback of its checkboxes children.
   *
   * @slot default - Pass in `sgds-checkbox` into the default slot
   * @slot invalidIcon - The slot for invalid icon
   *
   */
  class SgdsCheckboxGroup extends SgdsElement {
      constructor() {
          super();
          this.hasInvalidCheckbox = false;
          /** The checkbox group's label  */
          this.label = "";
          /**Feedback text for error state when validated */
          this.invalidFeedback = "";
          /** Allows invalidFeedback, invalid styles to be visible. When SgdsCheckboxGroup is used, it overrides the value of hasFeedback on SgdsCheckbox with its own value. */
          this.hasFeedback = false;
          /** The checkbox group's hint text */
          this.hintText = "";
          this.addEventListener("sgds-validity-change", (e) => {
              this.hasInvalidCheckbox = e.detail.invalid;
              this.validationMessage = e.detail.validationMessage;
          });
      }
      _checkInvalidState() {
          this.hasInvalidCheckbox = Array.from(this.checkboxes).some(checkbox => checkbox.invalid);
      }
      /** Overrides hasFeedback from individual SgdsCheckbox  */
      _forwardHasFeedback() {
          Array.from(this.checkboxes).forEach(checkbox => (checkbox.hasFeedback = this.hasFeedback));
      }
      _renderHintText() {
          const hintTextTemplate = html$1 ` <div class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      firstUpdated() {
          this._forwardHasFeedback();
      }
      updated() {
          this._checkInvalidState();
      }
      render() {
          return html$1 `
      <fieldset>
        <div class="label-hint-container">
          <label class="form-label">${this.label}</label>
          ${this._renderHintText()}
        </div>
        <div class="checkbox-container">
          <slot></slot>
        </div>
        ${this.hasInvalidCheckbox && this.hasFeedback
            ? html$1 `
              <div class="invalid-feedback-container">
                <slot name="invalidIcon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path
                      d="M17.5 10C17.5 14.1421 14.1421 17.5 10 17.5C5.85786 17.5 2.5 14.1421 2.5 10C2.5 5.85786 5.85786 2.5 10 2.5C14.1421 2.5 17.5 5.85786 17.5 10ZM10 6.25C9.49805 6.25 9.10584 6.68339 9.15578 7.18285L9.48461 10.4711C9.51109 10.7359 9.7339 10.9375 10 10.9375C10.2661 10.9375 10.4889 10.7359 10.5154 10.4711L10.8442 7.18285C10.8942 6.68339 10.5019 6.25 10 6.25ZM10.0014 11.875C9.48368 11.875 9.06394 12.2947 9.06394 12.8125C9.06394 13.3303 9.48368 13.75 10.0014 13.75C10.5192 13.75 10.9389 13.3303 10.9389 12.8125C10.9389 12.2947 10.5192 11.875 10.0014 11.875Z"
                      fill="currentColor"
                    />
                  </svg>
                </slot>
                <div id="checkbox-feedback" tabindex="0" class="invalid-feedback">
                  ${this.invalidFeedback ? this.invalidFeedback : this.validationMessage}
                </div>
              </div>
            `
            : nothing}
      </fieldset>
    `;
      }
  }
  SgdsCheckboxGroup.styles = [...SgdsElement.styles, css_248z$M, css_248z$K, css_248z$F, css_248z$L];
  __decorate([
      queryAssignedElements({ flatten: true })
  ], SgdsCheckboxGroup.prototype, "checkboxes", void 0);
  __decorate([
      state()
  ], SgdsCheckboxGroup.prototype, "hasInvalidCheckbox", void 0);
  __decorate([
      state()
  ], SgdsCheckboxGroup.prototype, "validationMessage", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsCheckboxGroup.prototype, "label", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsCheckboxGroup.prototype, "invalidFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsCheckboxGroup.prototype, "hasFeedback", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsCheckboxGroup.prototype, "hintText", void 0);

  register("sgds-checkbox", SgdsCheckbox);
  register("sgds-checkbox-group", SgdsCheckboxGroup);

  /**
   * @name toDate
   * @category Common Helpers
   * @summary Convert the given argument to an instance of Date.
   *
   * @description
   * Convert the given argument to an instance of Date.
   *
   * If the argument is an instance of Date, the function returns its clone.
   *
   * If the argument is a number, it is treated as a timestamp.
   *
   * If the argument is none of the above, the function returns Invalid Date.
   *
   * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param argument - The value to convert
   *
   * @returns The parsed date in the local time zone
   *
   * @example
   * // Clone the date:
   * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
   * //=> Tue Feb 11 2014 11:30:30
   *
   * @example
   * // Convert the timestamp to date:
   * const result = toDate(1392098430000)
   * //=> Tue Feb 11 2014 11:30:30
   */
  function toDate(argument) {
    const argStr = Object.prototype.toString.call(argument);

    // Clone the date
    if (
      argument instanceof Date ||
      (typeof argument === "object" && argStr === "[object Date]")
    ) {
      // Prevent the date to lose the milliseconds when passed to new Date() in IE10
      return new argument.constructor(+argument);
    } else if (
      typeof argument === "number" ||
      argStr === "[object Number]" ||
      typeof argument === "string" ||
      argStr === "[object String]"
    ) {
      // TODO: Can we get rid of as?
      return new Date(argument);
    } else {
      // TODO: Can we get rid of as?
      return new Date(NaN);
    }
  }

  /**
   * @name constructFrom
   * @category Generic Helpers
   * @summary Constructs a date using the reference date and the value
   *
   * @description
   * The function constructs a new date using the constructor from the reference
   * date and the given value. It helps to build generic functions that accept
   * date extensions.
   *
   * It defaults to `Date` if the passed reference date is a number or a string.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The reference date to take constructor from
   * @param value - The value to create the date
   *
   * @returns Date initialized using the given date and value
   *
   * @example
   * import { constructFrom } from 'date-fns'
   *
   * // A function that clones a date preserving the original type
   * function cloneDate<DateType extends Date(date: DateType): DateType {
   *   return constructFrom(
   *     date, // Use contrustor from the given date
   *     date.getTime() // Use the date value to create a new date
   *   )
   * }
   */
  function constructFrom(date, value) {
    if (date instanceof Date) {
      return new date.constructor(value);
    } else {
      return new Date(value);
    }
  }

  /**
   * @name addDays
   * @category Day Helpers
   * @summary Add the specified number of days to the given date.
   *
   * @description
   * Add the specified number of days to the given date.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to be changed
   * @param amount - The amount of days to be added.
   *
   * @returns The new date with the days added
   *
   * @example
   * // Add 10 days to 1 September 2014:
   * const result = addDays(new Date(2014, 8, 1), 10)
   * //=> Thu Sep 11 2014 00:00:00
   */
  function addDays(date, amount) {
    const _date = toDate(date);
    if (isNaN(amount)) return constructFrom(date, NaN);
    if (!amount) {
      // If 0 days, no-op to avoid changing times in the hour before end of DST
      return _date;
    }
    _date.setDate(_date.getDate() + amount);
    return _date;
  }

  /**
   * @module constants
   * @summary Useful constants
   * @description
   * Collection of useful date constants.
   *
   * The constants could be imported from `date-fns/constants`:
   *
   * ```ts
   * import { maxTime, minTime } from "./constants/date-fns/constants";
   *
   * function isAllowedTime(time) {
   *   return time <= maxTime && time >= minTime;
   * }
   * ```
   */

  /**
   * @constant
   * @name millisecondsInWeek
   * @summary Milliseconds in 1 week.
   */
  const millisecondsInWeek = 604800000;

  /**
   * @constant
   * @name millisecondsInDay
   * @summary Milliseconds in 1 day.
   */
  const millisecondsInDay = 86400000;

  /**
   * @constant
   * @name millisecondsInMinute
   * @summary Milliseconds in 1 minute
   */
  const millisecondsInMinute = 60000;

  /**
   * @constant
   * @name millisecondsInHour
   * @summary Milliseconds in 1 hour
   */
  const millisecondsInHour = 3600000;

  /**
   * @constant
   * @name millisecondsInSecond
   * @summary Milliseconds in 1 second
   */
  const millisecondsInSecond = 1000;

  let defaultOptions = {};

  function getDefaultOptions$1() {
    return defaultOptions;
  }

  /**
   * The {@link startOfWeek} function options.
   */

  /**
   * @name startOfWeek
   * @category Week Helpers
   * @summary Return the start of a week for the given date.
   *
   * @description
   * Return the start of a week for the given date.
   * The result will be in the local timezone.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   * @param options - An object with options
   *
   * @returns The start of a week
   *
   * @example
   * // The start of a week for 2 September 2014 11:55:00:
   * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Sun Aug 31 2014 00:00:00
   *
   * @example
   * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
   * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
   * //=> Mon Sep 01 2014 00:00:00
   */
  function startOfWeek(date, options) {
    const defaultOptions = getDefaultOptions$1();
    const weekStartsOn =
      options?.weekStartsOn ??
      options?.locale?.options?.weekStartsOn ??
      defaultOptions.weekStartsOn ??
      defaultOptions.locale?.options?.weekStartsOn ??
      0;

    const _date = toDate(date);
    const day = _date.getDay();
    const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

    _date.setDate(_date.getDate() - diff);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }

  /**
   * @name startOfISOWeek
   * @category ISO Week Helpers
   * @summary Return the start of an ISO week for the given date.
   *
   * @description
   * Return the start of an ISO week for the given date.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The start of an ISO week
   *
   * @example
   * // The start of an ISO week for 2 September 2014 11:55:00:
   * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Mon Sep 01 2014 00:00:00
   */
  function startOfISOWeek(date) {
    return startOfWeek(date, { weekStartsOn: 1 });
  }

  /**
   * @name getISOWeekYear
   * @category ISO Week-Numbering Year Helpers
   * @summary Get the ISO week-numbering year of the given date.
   *
   * @description
   * Get the ISO week-numbering year of the given date,
   * which always starts 3 days before the year's first Thursday.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   *
   * @returns The ISO week-numbering year
   *
   * @example
   * // Which ISO-week numbering year is 2 January 2005?
   * const result = getISOWeekYear(new Date(2005, 0, 2))
   * //=> 2004
   */
  function getISOWeekYear(date) {
    const _date = toDate(date);
    const year = _date.getFullYear();

    const fourthOfJanuaryOfNextYear = constructFrom(date, 0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);

    const fourthOfJanuaryOfThisYear = constructFrom(date, 0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);

    if (_date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (_date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }

  /**
   * @name startOfDay
   * @category Day Helpers
   * @summary Return the start of a day for the given date.
   *
   * @description
   * Return the start of a day for the given date.
   * The result will be in the local timezone.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The start of a day
   *
   * @example
   * // The start of a day for 2 September 2014 11:55:00:
   * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 02 2014 00:00:00
   */
  function startOfDay(date) {
    const _date = toDate(date);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }

  /**
   * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
   * They usually appear for dates that denote time before the timezones were introduced
   * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
   * and GMT+01:00:00 after that date)
   *
   * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
   * which would lead to incorrect calculations.
   *
   * This function returns the timezone offset in milliseconds that takes seconds in account.
   */
  function getTimezoneOffsetInMilliseconds(date) {
    const _date = toDate(date);
    const utcDate = new Date(
      Date.UTC(
        _date.getFullYear(),
        _date.getMonth(),
        _date.getDate(),
        _date.getHours(),
        _date.getMinutes(),
        _date.getSeconds(),
        _date.getMilliseconds(),
      ),
    );
    utcDate.setUTCFullYear(_date.getFullYear());
    return +date - +utcDate;
  }

  /**
   * @name differenceInCalendarDays
   * @category Day Helpers
   * @summary Get the number of calendar days between the given dates.
   *
   * @description
   * Get the number of calendar days between the given dates. This means that the times are removed
   * from the dates and then the difference in days is calculated.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param dateLeft - The later date
   * @param dateRight - The earlier date
   *
   * @returns The number of calendar days
   *
   * @example
   * // How many calendar days are between
   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
   * const result = differenceInCalendarDays(
   *   new Date(2012, 6, 2, 0, 0),
   *   new Date(2011, 6, 2, 23, 0)
   * )
   * //=> 366
   * // How many calendar days are between
   * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
   * const result = differenceInCalendarDays(
   *   new Date(2011, 6, 3, 0, 1),
   *   new Date(2011, 6, 2, 23, 59)
   * )
   * //=> 1
   */
  function differenceInCalendarDays(dateLeft, dateRight) {
    const startOfDayLeft = startOfDay(dateLeft);
    const startOfDayRight = startOfDay(dateRight);

    const timestampLeft =
      +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);
    const timestampRight =
      +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);

    // Round the number of days to the nearest integer because the number of
    // milliseconds in a day is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round((timestampLeft - timestampRight) / millisecondsInDay);
  }

  /**
   * @name startOfISOWeekYear
   * @category ISO Week-Numbering Year Helpers
   * @summary Return the start of an ISO week-numbering year for the given date.
   *
   * @description
   * Return the start of an ISO week-numbering year,
   * which always starts 3 days before the year's first Thursday.
   * The result will be in the local timezone.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The start of an ISO week-numbering year
   *
   * @example
   * // The start of an ISO week-numbering year for 2 July 2005:
   * const result = startOfISOWeekYear(new Date(2005, 6, 2))
   * //=> Mon Jan 03 2005 00:00:00
   */
  function startOfISOWeekYear(date) {
    const year = getISOWeekYear(date);
    const fourthOfJanuary = constructFrom(date, 0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    return startOfISOWeek(fourthOfJanuary);
  }

  /**
   * @name isDate
   * @category Common Helpers
   * @summary Is the given value a date?
   *
   * @description
   * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
   *
   * @param value - The value to check
   *
   * @returns True if the given value is a date
   *
   * @example
   * // For a valid date:
   * const result = isDate(new Date())
   * //=> true
   *
   * @example
   * // For an invalid date:
   * const result = isDate(new Date(NaN))
   * //=> true
   *
   * @example
   * // For some value:
   * const result = isDate('2014-02-31')
   * //=> false
   *
   * @example
   * // For an object:
   * const result = isDate({})
   * //=> false
   */
  function isDate(value) {
    return (
      value instanceof Date ||
      (typeof value === "object" &&
        Object.prototype.toString.call(value) === "[object Date]")
    );
  }

  /**
   * @name isValid
   * @category Common Helpers
   * @summary Is the given date valid?
   *
   * @description
   * Returns false if argument is Invalid Date and true otherwise.
   * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)
   * Invalid Date is a Date, whose time value is NaN.
   *
   * Time value of Date: http://es5.github.io/#x15.9.1.1
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to check
   *
   * @returns The date is valid
   *
   * @example
   * // For the valid date:
   * const result = isValid(new Date(2014, 1, 31))
   * //=> true
   *
   * @example
   * // For the value, convertable into a date:
   * const result = isValid(1393804800000)
   * //=> true
   *
   * @example
   * // For the invalid date:
   * const result = isValid(new Date(''))
   * //=> false
   */
  function isValid(date) {
    if (!isDate(date) && typeof date !== "number") {
      return false;
    }
    const _date = toDate(date);
    return !isNaN(Number(_date));
  }

  /**
   * @name endOfDay
   * @category Day Helpers
   * @summary Return the end of a day for the given date.
   *
   * @description
   * Return the end of a day for the given date.
   * The result will be in the local timezone.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The end of a day
   *
   * @example
   * // The end of a day for 2 September 2014 11:55:00:
   * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 02 2014 23:59:59.999
   */
  function endOfDay(date) {
    const _date = toDate(date);
    _date.setHours(23, 59, 59, 999);
    return _date;
  }

  /**
   * @name endOfMonth
   * @category Month Helpers
   * @summary Return the end of a month for the given date.
   *
   * @description
   * Return the end of a month for the given date.
   * The result will be in the local timezone.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The end of a month
   *
   * @example
   * // The end of a month for 2 September 2014 11:55:00:
   * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 30 2014 23:59:59.999
   */
  function endOfMonth(date) {
    const _date = toDate(date);
    const month = _date.getMonth();
    _date.setFullYear(_date.getFullYear(), month + 1, 0);
    _date.setHours(23, 59, 59, 999);
    return _date;
  }

  /**
   * @name isLastDayOfMonth
   * @category Month Helpers
   * @summary Is the given date the last day of a month?
   *
   * @description
   * Is the given date the last day of a month?
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to check

   * @returns The date is the last day of a month
   *
   * @example
   * // Is 28 February 2014 the last day of a month?
   * const result = isLastDayOfMonth(new Date(2014, 1, 28))
   * //=> true
   */
  function isLastDayOfMonth(date) {
    const _date = toDate(date);
    return +endOfDay(_date) === +endOfMonth(_date);
  }

  /**
   * @name startOfYear
   * @category Year Helpers
   * @summary Return the start of a year for the given date.
   *
   * @description
   * Return the start of a year for the given date.
   * The result will be in the local timezone.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The start of a year
   *
   * @example
   * // The start of a year for 2 September 2014 11:55:00:
   * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
   * //=> Wed Jan 01 2014 00:00:00
   */
  function startOfYear(date) {
    const cleanDate = toDate(date);
    const _date = constructFrom(date, 0);
    _date.setFullYear(cleanDate.getFullYear(), 0, 1);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }

  const formatDistanceLocale = {
    lessThanXSeconds: {
      one: "less than a second",
      other: "less than {{count}} seconds",
    },

    xSeconds: {
      one: "1 second",
      other: "{{count}} seconds",
    },

    halfAMinute: "half a minute",

    lessThanXMinutes: {
      one: "less than a minute",
      other: "less than {{count}} minutes",
    },

    xMinutes: {
      one: "1 minute",
      other: "{{count}} minutes",
    },

    aboutXHours: {
      one: "about 1 hour",
      other: "about {{count}} hours",
    },

    xHours: {
      one: "1 hour",
      other: "{{count}} hours",
    },

    xDays: {
      one: "1 day",
      other: "{{count}} days",
    },

    aboutXWeeks: {
      one: "about 1 week",
      other: "about {{count}} weeks",
    },

    xWeeks: {
      one: "1 week",
      other: "{{count}} weeks",
    },

    aboutXMonths: {
      one: "about 1 month",
      other: "about {{count}} months",
    },

    xMonths: {
      one: "1 month",
      other: "{{count}} months",
    },

    aboutXYears: {
      one: "about 1 year",
      other: "about {{count}} years",
    },

    xYears: {
      one: "1 year",
      other: "{{count}} years",
    },

    overXYears: {
      one: "over 1 year",
      other: "over {{count}} years",
    },

    almostXYears: {
      one: "almost 1 year",
      other: "almost {{count}} years",
    },
  };

  const formatDistance = (token, count, options) => {
    let result;

    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") {
      result = tokenValue;
    } else if (count === 1) {
      result = tokenValue.one;
    } else {
      result = tokenValue.other.replace("{{count}}", count.toString());
    }

    if (options?.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "in " + result;
      } else {
        return result + " ago";
      }
    }

    return result;
  };

  function buildFormatLongFn(args) {
    return (options = {}) => {
      // TODO: Remove String()
      const width = options.width ? String(options.width) : args.defaultWidth;
      const format = args.formats[width] || args.formats[args.defaultWidth];
      return format;
    };
  }

  const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy",
  };

  const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a",
  };

  const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}",
  };

  const formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: "full",
    }),

    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: "full",
    }),

    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: "full",
    }),
  };

  const formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P",
  };

  const formatRelative = (token, _date, _baseDate, _options) =>
    formatRelativeLocale[token];

  /* eslint-disable no-unused-vars */

  /**
   * The localize function argument callback which allows to convert raw value to
   * the actual type.
   *
   * @param value - The value to convert
   *
   * @returns The converted value
   */

  /**
   * The map of localized values for each width.
   */

  /**
   * The index type of the locale unit value. It types conversion of units of
   * values that don't start at 0 (i.e. quarters).
   */

  /**
   * Converts the unit value to the tuple of values.
   */

  /**
   * The tuple of localized era values. The first element represents BC,
   * the second element represents AD.
   */

  /**
   * The tuple of localized quarter values. The first element represents Q1.
   */

  /**
   * The tuple of localized day values. The first element represents Sunday.
   */

  /**
   * The tuple of localized month values. The first element represents January.
   */

  function buildLocalizeFn(args) {
    return (value, options) => {
      const context = options?.context ? String(options.context) : "standalone";

      let valuesArray;
      if (context === "formatting" && args.formattingValues) {
        const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        const width = options?.width ? String(options.width) : defaultWidth;

        valuesArray =
          args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        const defaultWidth = args.defaultWidth;
        const width = options?.width ? String(options.width) : args.defaultWidth;

        valuesArray = args.values[width] || args.values[defaultWidth];
      }
      const index = args.argumentCallback ? args.argumentCallback(value) : value;

      // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
      return valuesArray[index];
    };
  }

  const eraValues = {
    narrow: ["B", "A"],
    abbreviated: ["BC", "AD"],
    wide: ["Before Christ", "Anno Domini"],
  };

  const quarterValues = {
    narrow: ["1", "2", "3", "4"],
    abbreviated: ["Q1", "Q2", "Q3", "Q4"],
    wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],
  };

  // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.
  const monthValues = {
    narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
    abbreviated: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec",
    ],

    wide: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ],
  };

  const dayValues = {
    narrow: ["S", "M", "T", "W", "T", "F", "S"],
    short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    wide: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ],
  };

  const dayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night",
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night",
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night",
    },
  };

  const formattingDayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night",
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night",
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night",
    },
  };

  const ordinalNumber = (dirtyNumber, _options) => {
    const number = Number(dirtyNumber);

    // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`.
    //
    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'.

    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + "st";
        case 2:
          return number + "nd";
        case 3:
          return number + "rd";
      }
    }
    return number + "th";
  };

  const localize = {
    ordinalNumber,

    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: "wide",
    }),

    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: "wide",
      argumentCallback: (quarter) => quarter - 1,
    }),

    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: "wide",
    }),

    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: "wide",
    }),

    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: "wide",
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: "wide",
    }),
  };

  function buildMatchFn(args) {
    return (string, options = {}) => {
      const width = options.width;

      const matchPattern =
        (width && args.matchPatterns[width]) ||
        args.matchPatterns[args.defaultMatchWidth];
      const matchResult = string.match(matchPattern);

      if (!matchResult) {
        return null;
      }
      const matchedString = matchResult[0];

      const parsePatterns =
        (width && args.parsePatterns[width]) ||
        args.parsePatterns[args.defaultParseWidth];

      const key = Array.isArray(parsePatterns)
        ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
          findKey(parsePatterns, (pattern) => pattern.test(matchedString));

      let value;

      value = args.valueCallback ? args.valueCallback(key) : key;
      value = options.valueCallback
        ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
          options.valueCallback(value)
        : value;

      const rest = string.slice(matchedString.length);

      return { value, rest };
    };
  }

  function findKey(object, predicate) {
    for (const key in object) {
      if (
        Object.prototype.hasOwnProperty.call(object, key) &&
        predicate(object[key])
      ) {
        return key;
      }
    }
    return undefined;
  }

  function findIndex(array, predicate) {
    for (let key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
    return undefined;
  }

  function buildMatchPatternFn(args) {
    return (string, options = {}) => {
      const matchResult = string.match(args.matchPattern);
      if (!matchResult) return null;
      const matchedString = matchResult[0];

      const parseResult = string.match(args.parsePattern);
      if (!parseResult) return null;
      let value = args.valueCallback
        ? args.valueCallback(parseResult[0])
        : parseResult[0];

      // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
      value = options.valueCallback ? options.valueCallback(value) : value;

      const rest = string.slice(matchedString.length);

      return { value, rest };
    };
  }

  const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  const parseOrdinalNumberPattern = /\d+/i;

  const matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i,
  };
  const parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i],
  };

  const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i,
  };
  const parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i],
  };

  const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
  };
  const parseMonthPatterns = {
    narrow: [
      /^j/i,
      /^f/i,
      /^m/i,
      /^a/i,
      /^m/i,
      /^j/i,
      /^j/i,
      /^a/i,
      /^s/i,
      /^o/i,
      /^n/i,
      /^d/i,
    ],

    any: [
      /^ja/i,
      /^f/i,
      /^mar/i,
      /^ap/i,
      /^may/i,
      /^jun/i,
      /^jul/i,
      /^au/i,
      /^s/i,
      /^o/i,
      /^n/i,
      /^d/i,
    ],
  };

  const matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
  };
  const parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
  };

  const matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
  };
  const parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i,
    },
  };

  const match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: (value) => parseInt(value, 10),
    }),

    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseEraPatterns,
      defaultParseWidth: "any",
    }),

    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: "any",
      valueCallback: (index) => index + 1,
    }),

    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: "any",
    }),

    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseDayPatterns,
      defaultParseWidth: "any",
    }),

    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: "any",
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: "any",
    }),
  };

  /**
   * @category Locales
   * @summary English locale (United States).
   * @language English
   * @iso-639-2 eng
   * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
   * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
   */
  const enUS = {
    code: "en-US",
    formatDistance: formatDistance,
    formatLong: formatLong,
    formatRelative: formatRelative,
    localize: localize,
    match: match,
    options: {
      weekStartsOn: 0 /* Sunday */,
      firstWeekContainsDate: 1,
    },
  };

  /**
   * @name getDayOfYear
   * @category Day Helpers
   * @summary Get the day of the year of the given date.
   *
   * @description
   * Get the day of the year of the given date.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   *
   * @returns The day of year
   *
   * @example
   * // Which day of the year is 2 July 2014?
   * const result = getDayOfYear(new Date(2014, 6, 2))
   * //=> 183
   */
  function getDayOfYear(date) {
    const _date = toDate(date);
    const diff = differenceInCalendarDays(_date, startOfYear(_date));
    const dayOfYear = diff + 1;
    return dayOfYear;
  }

  /**
   * @name getISOWeek
   * @category ISO Week Helpers
   * @summary Get the ISO week of the given date.
   *
   * @description
   * Get the ISO week of the given date.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   *
   * @returns The ISO week
   *
   * @example
   * // Which week of the ISO-week numbering year is 2 January 2005?
   * const result = getISOWeek(new Date(2005, 0, 2))
   * //=> 53
   */
  function getISOWeek(date) {
    const _date = toDate(date);
    const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);

    // Round the number of weeks to the nearest integer because the number of
    // milliseconds in a week is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round(diff / millisecondsInWeek) + 1;
  }

  /**
   * The {@link getWeekYear} function options.
   */

  /**
   * @name getWeekYear
   * @category Week-Numbering Year Helpers
   * @summary Get the local week-numbering year of the given date.
   *
   * @description
   * Get the local week-numbering year of the given date.
   * The exact calculation depends on the values of
   * `options.weekStartsOn` (which is the index of the first day of the week)
   * and `options.firstWeekContainsDate` (which is the day of January, which is always in
   * the first week of the week-numbering year)
   *
   * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   * @param options - An object with options.
   *
   * @returns The local week-numbering year
   *
   * @example
   * // Which week numbering year is 26 December 2004 with the default settings?
   * const result = getWeekYear(new Date(2004, 11, 26))
   * //=> 2005
   *
   * @example
   * // Which week numbering year is 26 December 2004 if week starts on Saturday?
   * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
   * //=> 2004
   *
   * @example
   * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
   * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
   * //=> 2004
   */
  function getWeekYear(date, options) {
    const _date = toDate(date);
    const year = _date.getFullYear();

    const defaultOptions = getDefaultOptions$1();
    const firstWeekContainsDate =
      options?.firstWeekContainsDate ??
      options?.locale?.options?.firstWeekContainsDate ??
      defaultOptions.firstWeekContainsDate ??
      defaultOptions.locale?.options?.firstWeekContainsDate ??
      1;

    const firstWeekOfNextYear = constructFrom(date, 0);
    firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setHours(0, 0, 0, 0);
    const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);

    const firstWeekOfThisYear = constructFrom(date, 0);
    firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setHours(0, 0, 0, 0);
    const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);

    if (_date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (_date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }

  /**
   * The {@link startOfWeekYear} function options.
   */

  /**
   * @name startOfWeekYear
   * @category Week-Numbering Year Helpers
   * @summary Return the start of a local week-numbering year for the given date.
   *
   * @description
   * Return the start of a local week-numbering year.
   * The exact calculation depends on the values of
   * `options.weekStartsOn` (which is the index of the first day of the week)
   * and `options.firstWeekContainsDate` (which is the day of January, which is always in
   * the first week of the week-numbering year)
   *
   * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   * @param options - An object with options
   *
   * @returns The start of a week-numbering year
   *
   * @example
   * // The start of an a week-numbering year for 2 July 2005 with default settings:
   * const result = startOfWeekYear(new Date(2005, 6, 2))
   * //=> Sun Dec 26 2004 00:00:00
   *
   * @example
   * // The start of a week-numbering year for 2 July 2005
   * // if Monday is the first day of week
   * // and 4 January is always in the first week of the year:
   * const result = startOfWeekYear(new Date(2005, 6, 2), {
   *   weekStartsOn: 1,
   *   firstWeekContainsDate: 4
   * })
   * //=> Mon Jan 03 2005 00:00:00
   */
  function startOfWeekYear(date, options) {
    const defaultOptions = getDefaultOptions$1();
    const firstWeekContainsDate =
      options?.firstWeekContainsDate ??
      options?.locale?.options?.firstWeekContainsDate ??
      defaultOptions.firstWeekContainsDate ??
      defaultOptions.locale?.options?.firstWeekContainsDate ??
      1;

    const year = getWeekYear(date, options);
    const firstWeek = constructFrom(date, 0);
    firstWeek.setFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setHours(0, 0, 0, 0);
    const _date = startOfWeek(firstWeek, options);
    return _date;
  }

  /**
   * The {@link getWeek} function options.
   */

  /**
   * @name getWeek
   * @category Week Helpers
   * @summary Get the local week index of the given date.
   *
   * @description
   * Get the local week index of the given date.
   * The exact calculation depends on the values of
   * `options.weekStartsOn` (which is the index of the first day of the week)
   * and `options.firstWeekContainsDate` (which is the day of January, which is always in
   * the first week of the week-numbering year)
   *
   * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   * @param options - An object with options
   *
   * @returns The week
   *
   * @example
   * // Which week of the local week numbering year is 2 January 2005 with default options?
   * const result = getWeek(new Date(2005, 0, 2))
   * //=> 2
   *
   * @example
   * // Which week of the local week numbering year is 2 January 2005,
   * // if Monday is the first day of the week,
   * // and the first week of the year always contains 4 January?
   * const result = getWeek(new Date(2005, 0, 2), {
   *   weekStartsOn: 1,
   *   firstWeekContainsDate: 4
   * })
   * //=> 53
   */

  function getWeek(date, options) {
    const _date = toDate(date);
    const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);

    // Round the number of weeks to the nearest integer because the number of
    // milliseconds in a week is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round(diff / millisecondsInWeek) + 1;
  }

  function addLeadingZeros(number, targetLength) {
    const sign = number < 0 ? "-" : "";
    const output = Math.abs(number).toString().padStart(targetLength, "0");
    return sign + output;
  }

  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* |                                |
   * |  d  | Day of month                   |  D  |                                |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  m  | Minute                         |  M  | Month                          |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  y  | Year (abs)                     |  Y  |                                |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   */

  const lightFormatters = {
    // Year
    y(date, token) {
      // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
      // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
      // |----------|-------|----|-------|-------|-------|
      // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
      // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
      // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
      // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
      // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

      const signedYear = date.getFullYear();
      // Returns 1 for 1 BC (which is year 0 in JavaScript)
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
    },

    // Month
    M(date, token) {
      const month = date.getMonth();
      return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
    },

    // Day of the month
    d(date, token) {
      return addLeadingZeros(date.getDate(), token.length);
    },

    // AM or PM
    a(date, token) {
      const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";

      switch (token) {
        case "a":
        case "aa":
          return dayPeriodEnumValue.toUpperCase();
        case "aaa":
          return dayPeriodEnumValue;
        case "aaaaa":
          return dayPeriodEnumValue[0];
        case "aaaa":
        default:
          return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
      }
    },

    // Hour [1-12]
    h(date, token) {
      return addLeadingZeros(date.getHours() % 12 || 12, token.length);
    },

    // Hour [0-23]
    H(date, token) {
      return addLeadingZeros(date.getHours(), token.length);
    },

    // Minute
    m(date, token) {
      return addLeadingZeros(date.getMinutes(), token.length);
    },

    // Second
    s(date, token) {
      return addLeadingZeros(date.getSeconds(), token.length);
    },

    // Fraction of second
    S(date, token) {
      const numberOfDigits = token.length;
      const milliseconds = date.getMilliseconds();
      const fractionalSeconds = Math.trunc(
        milliseconds * Math.pow(10, numberOfDigits - 3),
      );
      return addLeadingZeros(fractionalSeconds, token.length);
    },
  };

  const dayPeriodEnum = {
    am: "am",
    pm: "pm",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  };

  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
   * |  p! | Long localized time            |  P! | Long localized date            |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   * - `P` is long localized date format
   * - `p` is long localized time format
   */

  const formatters = {
    // Era
    G: function (date, token, localize) {
      const era = date.getFullYear() > 0 ? 1 : 0;
      switch (token) {
        // AD, BC
        case "G":
        case "GG":
        case "GGG":
          return localize.era(era, { width: "abbreviated" });
        // A, B
        case "GGGGG":
          return localize.era(era, { width: "narrow" });
        // Anno Domini, Before Christ
        case "GGGG":
        default:
          return localize.era(era, { width: "wide" });
      }
    },

    // Year
    y: function (date, token, localize) {
      // Ordinal number
      if (token === "yo") {
        const signedYear = date.getFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        const year = signedYear > 0 ? signedYear : 1 - signedYear;
        return localize.ordinalNumber(year, { unit: "year" });
      }

      return lightFormatters.y(date, token);
    },

    // Local week-numbering year
    Y: function (date, token, localize, options) {
      const signedWeekYear = getWeekYear(date, options);
      // Returns 1 for 1 BC (which is year 0 in JavaScript)
      const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

      // Two digit year
      if (token === "YY") {
        const twoDigitYear = weekYear % 100;
        return addLeadingZeros(twoDigitYear, 2);
      }

      // Ordinal number
      if (token === "Yo") {
        return localize.ordinalNumber(weekYear, { unit: "year" });
      }

      // Padding
      return addLeadingZeros(weekYear, token.length);
    },

    // ISO week-numbering year
    R: function (date, token) {
      const isoWeekYear = getISOWeekYear(date);

      // Padding
      return addLeadingZeros(isoWeekYear, token.length);
    },

    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function (date, token) {
      const year = date.getFullYear();
      return addLeadingZeros(year, token.length);
    },

    // Quarter
    Q: function (date, token, localize) {
      const quarter = Math.ceil((date.getMonth() + 1) / 3);
      switch (token) {
        // 1, 2, 3, 4
        case "Q":
          return String(quarter);
        // 01, 02, 03, 04
        case "QQ":
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th
        case "Qo":
          return localize.ordinalNumber(quarter, { unit: "quarter" });
        // Q1, Q2, Q3, Q4
        case "QQQ":
          return localize.quarter(quarter, {
            width: "abbreviated",
            context: "formatting",
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "QQQQQ":
          return localize.quarter(quarter, {
            width: "narrow",
            context: "formatting",
          });
        // 1st quarter, 2nd quarter, ...
        case "QQQQ":
        default:
          return localize.quarter(quarter, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // Stand-alone quarter
    q: function (date, token, localize) {
      const quarter = Math.ceil((date.getMonth() + 1) / 3);
      switch (token) {
        // 1, 2, 3, 4
        case "q":
          return String(quarter);
        // 01, 02, 03, 04
        case "qq":
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th
        case "qo":
          return localize.ordinalNumber(quarter, { unit: "quarter" });
        // Q1, Q2, Q3, Q4
        case "qqq":
          return localize.quarter(quarter, {
            width: "abbreviated",
            context: "standalone",
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "qqqqq":
          return localize.quarter(quarter, {
            width: "narrow",
            context: "standalone",
          });
        // 1st quarter, 2nd quarter, ...
        case "qqqq":
        default:
          return localize.quarter(quarter, {
            width: "wide",
            context: "standalone",
          });
      }
    },

    // Month
    M: function (date, token, localize) {
      const month = date.getMonth();
      switch (token) {
        case "M":
        case "MM":
          return lightFormatters.M(date, token);
        // 1st, 2nd, ..., 12th
        case "Mo":
          return localize.ordinalNumber(month + 1, { unit: "month" });
        // Jan, Feb, ..., Dec
        case "MMM":
          return localize.month(month, {
            width: "abbreviated",
            context: "formatting",
          });
        // J, F, ..., D
        case "MMMMM":
          return localize.month(month, {
            width: "narrow",
            context: "formatting",
          });
        // January, February, ..., December
        case "MMMM":
        default:
          return localize.month(month, { width: "wide", context: "formatting" });
      }
    },

    // Stand-alone month
    L: function (date, token, localize) {
      const month = date.getMonth();
      switch (token) {
        // 1, 2, ..., 12
        case "L":
          return String(month + 1);
        // 01, 02, ..., 12
        case "LL":
          return addLeadingZeros(month + 1, 2);
        // 1st, 2nd, ..., 12th
        case "Lo":
          return localize.ordinalNumber(month + 1, { unit: "month" });
        // Jan, Feb, ..., Dec
        case "LLL":
          return localize.month(month, {
            width: "abbreviated",
            context: "standalone",
          });
        // J, F, ..., D
        case "LLLLL":
          return localize.month(month, {
            width: "narrow",
            context: "standalone",
          });
        // January, February, ..., December
        case "LLLL":
        default:
          return localize.month(month, { width: "wide", context: "standalone" });
      }
    },

    // Local week of year
    w: function (date, token, localize, options) {
      const week = getWeek(date, options);

      if (token === "wo") {
        return localize.ordinalNumber(week, { unit: "week" });
      }

      return addLeadingZeros(week, token.length);
    },

    // ISO week of year
    I: function (date, token, localize) {
      const isoWeek = getISOWeek(date);

      if (token === "Io") {
        return localize.ordinalNumber(isoWeek, { unit: "week" });
      }

      return addLeadingZeros(isoWeek, token.length);
    },

    // Day of the month
    d: function (date, token, localize) {
      if (token === "do") {
        return localize.ordinalNumber(date.getDate(), { unit: "date" });
      }

      return lightFormatters.d(date, token);
    },

    // Day of year
    D: function (date, token, localize) {
      const dayOfYear = getDayOfYear(date);

      if (token === "Do") {
        return localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
      }

      return addLeadingZeros(dayOfYear, token.length);
    },

    // Day of week
    E: function (date, token, localize) {
      const dayOfWeek = date.getDay();
      switch (token) {
        // Tue
        case "E":
        case "EE":
        case "EEE":
          return localize.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting",
          });
        // T
        case "EEEEE":
          return localize.day(dayOfWeek, {
            width: "narrow",
            context: "formatting",
          });
        // Tu
        case "EEEEEE":
          return localize.day(dayOfWeek, {
            width: "short",
            context: "formatting",
          });
        // Tuesday
        case "EEEE":
        default:
          return localize.day(dayOfWeek, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // Local day of week
    e: function (date, token, localize, options) {
      const dayOfWeek = date.getDay();
      const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        // Numerical value (Nth day of week with current locale or weekStartsOn)
        case "e":
          return String(localDayOfWeek);
        // Padded numerical value
        case "ee":
          return addLeadingZeros(localDayOfWeek, 2);
        // 1st, 2nd, ..., 7th
        case "eo":
          return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
        case "eee":
          return localize.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting",
          });
        // T
        case "eeeee":
          return localize.day(dayOfWeek, {
            width: "narrow",
            context: "formatting",
          });
        // Tu
        case "eeeeee":
          return localize.day(dayOfWeek, {
            width: "short",
            context: "formatting",
          });
        // Tuesday
        case "eeee":
        default:
          return localize.day(dayOfWeek, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // Stand-alone local day of week
    c: function (date, token, localize, options) {
      const dayOfWeek = date.getDay();
      const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        // Numerical value (same as in `e`)
        case "c":
          return String(localDayOfWeek);
        // Padded numerical value
        case "cc":
          return addLeadingZeros(localDayOfWeek, token.length);
        // 1st, 2nd, ..., 7th
        case "co":
          return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
        case "ccc":
          return localize.day(dayOfWeek, {
            width: "abbreviated",
            context: "standalone",
          });
        // T
        case "ccccc":
          return localize.day(dayOfWeek, {
            width: "narrow",
            context: "standalone",
          });
        // Tu
        case "cccccc":
          return localize.day(dayOfWeek, {
            width: "short",
            context: "standalone",
          });
        // Tuesday
        case "cccc":
        default:
          return localize.day(dayOfWeek, {
            width: "wide",
            context: "standalone",
          });
      }
    },

    // ISO day of week
    i: function (date, token, localize) {
      const dayOfWeek = date.getDay();
      const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
      switch (token) {
        // 2
        case "i":
          return String(isoDayOfWeek);
        // 02
        case "ii":
          return addLeadingZeros(isoDayOfWeek, token.length);
        // 2nd
        case "io":
          return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });
        // Tue
        case "iii":
          return localize.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting",
          });
        // T
        case "iiiii":
          return localize.day(dayOfWeek, {
            width: "narrow",
            context: "formatting",
          });
        // Tu
        case "iiiiii":
          return localize.day(dayOfWeek, {
            width: "short",
            context: "formatting",
          });
        // Tuesday
        case "iiii":
        default:
          return localize.day(dayOfWeek, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // AM or PM
    a: function (date, token, localize) {
      const hours = date.getHours();
      const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";

      switch (token) {
        case "a":
        case "aa":
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          });
        case "aaa":
          return localize
            .dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting",
            })
            .toLowerCase();
        case "aaaaa":
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting",
          });
        case "aaaa":
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // AM, PM, midnight, noon
    b: function (date, token, localize) {
      const hours = date.getHours();
      let dayPeriodEnumValue;
      if (hours === 12) {
        dayPeriodEnumValue = dayPeriodEnum.noon;
      } else if (hours === 0) {
        dayPeriodEnumValue = dayPeriodEnum.midnight;
      } else {
        dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
      }

      switch (token) {
        case "b":
        case "bb":
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          });
        case "bbb":
          return localize
            .dayPeriod(dayPeriodEnumValue, {
              width: "abbreviated",
              context: "formatting",
            })
            .toLowerCase();
        case "bbbbb":
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting",
          });
        case "bbbb":
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // in the morning, in the afternoon, in the evening, at night
    B: function (date, token, localize) {
      const hours = date.getHours();
      let dayPeriodEnumValue;
      if (hours >= 17) {
        dayPeriodEnumValue = dayPeriodEnum.evening;
      } else if (hours >= 12) {
        dayPeriodEnumValue = dayPeriodEnum.afternoon;
      } else if (hours >= 4) {
        dayPeriodEnumValue = dayPeriodEnum.morning;
      } else {
        dayPeriodEnumValue = dayPeriodEnum.night;
      }

      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting",
          });
        case "BBBBB":
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting",
          });
        case "BBBB":
        default:
          return localize.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting",
          });
      }
    },

    // Hour [1-12]
    h: function (date, token, localize) {
      if (token === "ho") {
        let hours = date.getHours() % 12;
        if (hours === 0) hours = 12;
        return localize.ordinalNumber(hours, { unit: "hour" });
      }

      return lightFormatters.h(date, token);
    },

    // Hour [0-23]
    H: function (date, token, localize) {
      if (token === "Ho") {
        return localize.ordinalNumber(date.getHours(), { unit: "hour" });
      }

      return lightFormatters.H(date, token);
    },

    // Hour [0-11]
    K: function (date, token, localize) {
      const hours = date.getHours() % 12;

      if (token === "Ko") {
        return localize.ordinalNumber(hours, { unit: "hour" });
      }

      return addLeadingZeros(hours, token.length);
    },

    // Hour [1-24]
    k: function (date, token, localize) {
      let hours = date.getHours();
      if (hours === 0) hours = 24;

      if (token === "ko") {
        return localize.ordinalNumber(hours, { unit: "hour" });
      }

      return addLeadingZeros(hours, token.length);
    },

    // Minute
    m: function (date, token, localize) {
      if (token === "mo") {
        return localize.ordinalNumber(date.getMinutes(), { unit: "minute" });
      }

      return lightFormatters.m(date, token);
    },

    // Second
    s: function (date, token, localize) {
      if (token === "so") {
        return localize.ordinalNumber(date.getSeconds(), { unit: "second" });
      }

      return lightFormatters.s(date, token);
    },

    // Fraction of second
    S: function (date, token) {
      return lightFormatters.S(date, token);
    },

    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function (date, token, _localize) {
      const timezoneOffset = date.getTimezoneOffset();

      if (timezoneOffset === 0) {
        return "Z";
      }

      switch (token) {
        // Hours and optional minutes
        case "X":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);

        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XX`
        case "XXXX":
        case "XX": // Hours and minutes without `:` delimiter
          return formatTimezone(timezoneOffset);

        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XXX`
        case "XXXXX":
        case "XXX": // Hours and minutes with `:` delimiter
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    },

    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function (date, token, _localize) {
      const timezoneOffset = date.getTimezoneOffset();

      switch (token) {
        // Hours and optional minutes
        case "x":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);

        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xx`
        case "xxxx":
        case "xx": // Hours and minutes without `:` delimiter
          return formatTimezone(timezoneOffset);

        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xxx`
        case "xxxxx":
        case "xxx": // Hours and minutes with `:` delimiter
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    },

    // Timezone (GMT)
    O: function (date, token, _localize) {
      const timezoneOffset = date.getTimezoneOffset();

      switch (token) {
        // Short
        case "O":
        case "OO":
        case "OOO":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        // Long
        case "OOOO":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    },

    // Timezone (specific non-location)
    z: function (date, token, _localize) {
      const timezoneOffset = date.getTimezoneOffset();

      switch (token) {
        // Short
        case "z":
        case "zz":
        case "zzz":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        // Long
        case "zzzz":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    },

    // Seconds timestamp
    t: function (date, token, _localize) {
      const timestamp = Math.trunc(date.getTime() / 1000);
      return addLeadingZeros(timestamp, token.length);
    },

    // Milliseconds timestamp
    T: function (date, token, _localize) {
      const timestamp = date.getTime();
      return addLeadingZeros(timestamp, token.length);
    },
  };

  function formatTimezoneShort(offset, delimiter = "") {
    const sign = offset > 0 ? "-" : "+";
    const absOffset = Math.abs(offset);
    const hours = Math.trunc(absOffset / 60);
    const minutes = absOffset % 60;
    if (minutes === 0) {
      return sign + String(hours);
    }
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
  }

  function formatTimezoneWithOptionalMinutes(offset, delimiter) {
    if (offset % 60 === 0) {
      const sign = offset > 0 ? "-" : "+";
      return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
    }
    return formatTimezone(offset, delimiter);
  }

  function formatTimezone(offset, delimiter = "") {
    const sign = offset > 0 ? "-" : "+";
    const absOffset = Math.abs(offset);
    const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);
    const minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
  }

  const dateLongFormatter = (pattern, formatLong) => {
    switch (pattern) {
      case "P":
        return formatLong.date({ width: "short" });
      case "PP":
        return formatLong.date({ width: "medium" });
      case "PPP":
        return formatLong.date({ width: "long" });
      case "PPPP":
      default:
        return formatLong.date({ width: "full" });
    }
  };

  const timeLongFormatter = (pattern, formatLong) => {
    switch (pattern) {
      case "p":
        return formatLong.time({ width: "short" });
      case "pp":
        return formatLong.time({ width: "medium" });
      case "ppp":
        return formatLong.time({ width: "long" });
      case "pppp":
      default:
        return formatLong.time({ width: "full" });
    }
  };

  const dateTimeLongFormatter = (pattern, formatLong) => {
    const matchResult = pattern.match(/(P+)(p+)?/) || [];
    const datePattern = matchResult[1];
    const timePattern = matchResult[2];

    if (!timePattern) {
      return dateLongFormatter(pattern, formatLong);
    }

    let dateTimeFormat;

    switch (datePattern) {
      case "P":
        dateTimeFormat = formatLong.dateTime({ width: "short" });
        break;
      case "PP":
        dateTimeFormat = formatLong.dateTime({ width: "medium" });
        break;
      case "PPP":
        dateTimeFormat = formatLong.dateTime({ width: "long" });
        break;
      case "PPPP":
      default:
        dateTimeFormat = formatLong.dateTime({ width: "full" });
        break;
    }

    return dateTimeFormat
      .replace("{{date}}", dateLongFormatter(datePattern, formatLong))
      .replace("{{time}}", timeLongFormatter(timePattern, formatLong));
  };

  const longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter,
  };

  const dayOfYearTokenRE = /^D+$/;
  const weekYearTokenRE = /^Y+$/;

  const throwTokens = ["D", "DD", "YY", "YYYY"];

  function isProtectedDayOfYearToken(token) {
    return dayOfYearTokenRE.test(token);
  }

  function isProtectedWeekYearToken(token) {
    return weekYearTokenRE.test(token);
  }

  function warnOrThrowProtectedError(token, format, input) {
    const _message = message(token, format, input);
    console.warn(_message);
    if (throwTokens.includes(token)) throw new RangeError(_message);
  }

  function message(token, format, input) {
    const subject = token[0] === "Y" ? "years" : "days of the month";
    return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
  }

  // This RegExp consists of three parts separated by `|`:
  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
  //   (one of the certain letters followed by `o`)
  // - (\w)\1* matches any sequences of the same letter
  // - '' matches two quote characters in a row
  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
  //   except a single quote symbol, which ends the sequence.
  //   Two quote characters do not end the sequence.
  //   If there is no matching single quote
  //   then the sequence will continue until the end of the string.
  // - . matches any single character unmatched by previous parts of the RegExps
  const formattingTokensRegExp$1 =
    /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

  // This RegExp catches symbols escaped by quotes, and also
  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
  const longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

  const escapedStringRegExp$1 = /^'([^]*?)'?$/;
  const doubleQuoteRegExp$1 = /''/g;
  const unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;

  /**
   * The {@link format} function options.
   */

  /**
   * @name format
   * @alias formatDate
   * @category Common Helpers
   * @summary Format the date.
   *
   * @description
   * Return the formatted date string in the given format. The result may vary by locale.
   *
   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
   * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * The characters wrapped between two single quotes characters (') are escaped.
   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
   * (see the last example)
   *
   * Format of the string is based on Unicode Technical Standard #35:
   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
   * with a few additions (see note 7 below the table).
   *
   * Accepted patterns:
   * | Unit                            | Pattern | Result examples                   | Notes |
   * |---------------------------------|---------|-----------------------------------|-------|
   * | Era                             | G..GGG  | AD, BC                            |       |
   * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
   * |                                 | GGGGG   | A, B                              |       |
   * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
   * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
   * |                                 | yy      | 44, 01, 00, 17                    | 5     |
   * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
   * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
   * |                                 | yyyyy   | ...                               | 3,5   |
   * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
   * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
   * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
   * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
   * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
   * |                                 | YYYYY   | ...                               | 3,5   |
   * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
   * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
   * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
   * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
   * |                                 | RRRRR   | ...                               | 3,5,7 |
   * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
   * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
   * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
   * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
   * |                                 | uuuuu   | ...                               | 3,5   |
   * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
   * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
   * |                                 | QQ      | 01, 02, 03, 04                    |       |
   * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
   * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
   * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
   * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
   * |                                 | qq      | 01, 02, 03, 04                    |       |
   * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
   * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
   * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
   * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
   * |                                 | MM      | 01, 02, ..., 12                   |       |
   * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
   * |                                 | MMMM    | January, February, ..., December  | 2     |
   * |                                 | MMMMM   | J, F, ..., D                      |       |
   * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
   * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
   * |                                 | LL      | 01, 02, ..., 12                   |       |
   * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
   * |                                 | LLLL    | January, February, ..., December  | 2     |
   * |                                 | LLLLL   | J, F, ..., D                      |       |
   * | Local week of year              | w       | 1, 2, ..., 53                     |       |
   * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
   * |                                 | ww      | 01, 02, ..., 53                   |       |
   * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
   * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
   * |                                 | II      | 01, 02, ..., 53                   | 7     |
   * | Day of month                    | d       | 1, 2, ..., 31                     |       |
   * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
   * |                                 | dd      | 01, 02, ..., 31                   |       |
   * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
   * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
   * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
   * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
   * |                                 | DDDD    | ...                               | 3     |
   * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
   * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
   * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
   * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
   * |                                 | ii      | 01, 02, ..., 07                   | 7     |
   * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
   * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
   * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
   * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
   * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
   * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
   * |                                 | ee      | 02, 03, ..., 01                   |       |
   * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
   * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
   * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
   * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
   * |                                 | cc      | 02, 03, ..., 01                   |       |
   * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
   * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
   * | AM, PM                          | a..aa   | AM, PM                            |       |
   * |                                 | aaa     | am, pm                            |       |
   * |                                 | aaaa    | a.m., p.m.                        | 2     |
   * |                                 | aaaaa   | a, p                              |       |
   * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
   * |                                 | bbb     | am, pm, noon, midnight            |       |
   * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
   * |                                 | bbbbb   | a, p, n, mi                       |       |
   * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
   * |                                 | BBBB    | at night, in the morning, ...     | 2     |
   * |                                 | BBBBB   | at night, in the morning, ...     |       |
   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
   * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
   * |                                 | hh      | 01, 02, ..., 11, 12               |       |
   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
   * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
   * |                                 | HH      | 00, 01, 02, ..., 23               |       |
   * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
   * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
   * |                                 | KK      | 01, 02, ..., 11, 00               |       |
   * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
   * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
   * |                                 | kk      | 24, 01, 02, ..., 23               |       |
   * | Minute                          | m       | 0, 1, ..., 59                     |       |
   * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
   * |                                 | mm      | 00, 01, ..., 59                   |       |
   * | Second                          | s       | 0, 1, ..., 59                     |       |
   * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
   * |                                 | ss      | 00, 01, ..., 59                   |       |
   * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
   * |                                 | SS      | 00, 01, ..., 99                   |       |
   * |                                 | SSS     | 000, 001, ..., 999                |       |
   * |                                 | SSSS    | ...                               | 3     |
   * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
   * |                                 | XX      | -0800, +0530, Z                   |       |
   * |                                 | XXX     | -08:00, +05:30, Z                 |       |
   * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
   * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
   * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
   * |                                 | xx      | -0800, +0530, +0000               |       |
   * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
   * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
   * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
   * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
   * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
   * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
   * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
   * | Seconds timestamp               | t       | 512969520                         | 7     |
   * |                                 | tt      | ...                               | 3,7   |
   * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
   * |                                 | TT      | ...                               | 3,7   |
   * | Long localized date             | P       | 04/29/1453                        | 7     |
   * |                                 | PP      | Apr 29, 1453                      | 7     |
   * |                                 | PPP     | April 29th, 1453                  | 7     |
   * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
   * | Long localized time             | p       | 12:00 AM                          | 7     |
   * |                                 | pp      | 12:00:00 AM                       | 7     |
   * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
   * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
   * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
   * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
   * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
   * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
   * Notes:
   * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
   *    are the same as "stand-alone" units, but are different in some languages.
   *    "Formatting" units are declined according to the rules of the language
   *    in the context of a date. "Stand-alone" units are always nominative singular:
   *
   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
   *
   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
   *
   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
   *    the single quote characters (see below).
   *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
   *    the output will be the same as default pattern for this unit, usually
   *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
   *    are marked with "2" in the last column of the table.
   *
   *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
   *
   *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
   *
   * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
   *    The output will be padded with zeros to match the length of the pattern.
   *
   *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
   *
   * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
   *    These tokens represent the shortest form of the quarter.
   *
   * 5. The main difference between `y` and `u` patterns are B.C. years:
   *
   *    | Year | `y` | `u` |
   *    |------|-----|-----|
   *    | AC 1 |   1 |   1 |
   *    | BC 1 |   1 |   0 |
   *    | BC 2 |   2 |  -1 |
   *
   *    Also `yy` always returns the last two digits of a year,
   *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
   *
   *    | Year | `yy` | `uu` |
   *    |------|------|------|
   *    | 1    |   01 |   01 |
   *    | 14   |   14 |   14 |
   *    | 376  |   76 |  376 |
   *    | 1453 |   53 | 1453 |
   *
   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
   *    except local week-numbering years are dependent on `options.weekStartsOn`
   *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
   *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
   *
   * 6. Specific non-location timezones are currently unavailable in `date-fns`,
   *    so right now these tokens fall back to GMT timezones.
   *
   * 7. These patterns are not in the Unicode Technical Standard #35:
   *    - `i`: ISO day of week
   *    - `I`: ISO week of year
   *    - `R`: ISO week-numbering year
   *    - `t`: seconds timestamp
   *    - `T`: milliseconds timestamp
   *    - `o`: ordinal number modifier
   *    - `P`: long localized date
   *    - `p`: long localized time
   *
   * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   * @param format - The string of tokens
   * @param options - An object with options
   *
   * @returns The formatted date string
   *
   * @throws `date` must not be Invalid Date
   * @throws `options.locale` must contain `localize` property
   * @throws `options.locale` must contain `formatLong` property
   * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws format string contains an unescaped latin alphabet character
   *
   * @example
   * // Represent 11 February 2014 in middle-endian format:
   * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
   * //=> '02/11/2014'
   *
   * @example
   * // Represent 2 July 2014 in Esperanto:
   * import { eoLocale } from 'date-fns/locale/eo'
   * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
   *   locale: eoLocale
   * })
   * //=> '2-a de julio 2014'
   *
   * @example
   * // Escape string by single quote characters:
   * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
   * //=> "3 o'clock"
   */
  function format(date, formatStr, options) {
    const defaultOptions = getDefaultOptions$1();
    const locale = options?.locale ?? defaultOptions.locale ?? enUS;

    const firstWeekContainsDate =
      options?.firstWeekContainsDate ??
      options?.locale?.options?.firstWeekContainsDate ??
      defaultOptions.firstWeekContainsDate ??
      defaultOptions.locale?.options?.firstWeekContainsDate ??
      1;

    const weekStartsOn =
      options?.weekStartsOn ??
      options?.locale?.options?.weekStartsOn ??
      defaultOptions.weekStartsOn ??
      defaultOptions.locale?.options?.weekStartsOn ??
      0;

    const originalDate = toDate(date);

    if (!isValid(originalDate)) {
      throw new RangeError("Invalid time value");
    }

    let parts = formatStr
      .match(longFormattingTokensRegExp$1)
      .map((substring) => {
        const firstCharacter = substring[0];
        if (firstCharacter === "p" || firstCharacter === "P") {
          const longFormatter = longFormatters[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      })
      .join("")
      .match(formattingTokensRegExp$1)
      .map((substring) => {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return { isToken: false, value: "'" };
        }

        const firstCharacter = substring[0];
        if (firstCharacter === "'") {
          return { isToken: false, value: cleanEscapedString$1(substring) };
        }

        if (formatters[firstCharacter]) {
          return { isToken: true, value: substring };
        }

        if (firstCharacter.match(unescapedLatinCharacterRegExp$1)) {
          throw new RangeError(
            "Format string contains an unescaped latin alphabet character `" +
              firstCharacter +
              "`",
          );
        }

        return { isToken: false, value: substring };
      });

    // invoke localize preprocessor (only for french locales at the moment)
    if (locale.localize.preprocessor) {
      parts = locale.localize.preprocessor(originalDate, parts);
    }

    const formatterOptions = {
      firstWeekContainsDate,
      weekStartsOn,
      locale,
    };

    return parts
      .map((part) => {
        if (!part.isToken) return part.value;

        const token = part.value;

        if (
          (!options?.useAdditionalWeekYearTokens &&
            isProtectedWeekYearToken(token)) ||
          (!options?.useAdditionalDayOfYearTokens &&
            isProtectedDayOfYearToken(token))
        ) {
          warnOrThrowProtectedError(token, formatStr, String(date));
        }

        const formatter = formatters[token[0]];
        return formatter(originalDate, token, locale.localize, formatterOptions);
      })
      .join("");
  }

  function cleanEscapedString$1(input) {
    const matched = input.match(escapedStringRegExp$1);

    if (!matched) {
      return input;
    }

    return matched[1].replace(doubleQuoteRegExp$1, "'");
  }

  /**
   * @name getDaysInMonth
   * @category Month Helpers
   * @summary Get the number of days in a month of the given date.
   *
   * @description
   * Get the number of days in a month of the given date.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   *
   * @returns The number of days in a month
   *
   * @example
   * // How many days are in February 2000?
   * const result = getDaysInMonth(new Date(2000, 1))
   * //=> 29
   */
  function getDaysInMonth(date) {
    const _date = toDate(date);
    const year = _date.getFullYear();
    const monthIndex = _date.getMonth();
    const lastDayOfMonth = constructFrom(date, 0);
    lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
    lastDayOfMonth.setHours(0, 0, 0, 0);
    return lastDayOfMonth.getDate();
  }

  /**
   * @name getDefaultOptions
   * @category Common Helpers
   * @summary Get default options.
   * @pure false
   *
   * @description
   * Returns an object that contains defaults for
   * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
   * arguments for all functions.
   *
   * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).
   *
   * @returns The default options
   *
   * @example
   * const result = getDefaultOptions()
   * //=> {}
   *
   * @example
   * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })
   * const result = getDefaultOptions()
   * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }
   */
  function getDefaultOptions() {
    return Object.assign({}, getDefaultOptions$1());
  }

  /**
   * @name getISODay
   * @category Weekday Helpers
   * @summary Get the day of the ISO week of the given date.
   *
   * @description
   * Get the day of the ISO week of the given date,
   * which is 7 for Sunday, 1 for Monday etc.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The given date
   *
   * @returns The day of ISO week
   *
   * @example
   * // Which day of the ISO week is 26 February 2012?
   * const result = getISODay(new Date(2012, 1, 26))
   * //=> 7
   */
  function getISODay(date) {
    const _date = toDate(date);
    let day = _date.getDay();

    if (day === 0) {
      day = 7;
    }

    return day;
  }

  /**
   * @name lastDayOfMonth
   * @category Month Helpers
   * @summary Return the last day of a month for the given date.
   *
   * @description
   * Return the last day of a month for the given date.
   * The result will be in the local timezone.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The original date
   *
   * @returns The last day of a month
   *
   * @example
   * // The last day of a month for 2 September 2014 11:55:00:
   * const result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
   * //=> Tue Sep 30 2014 00:00:00
   */
  function lastDayOfMonth(date) {
    const _date = toDate(date);
    const month = _date.getMonth();
    _date.setFullYear(_date.getFullYear(), month + 1, 0);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }

  /**
   * @name isAfter
   * @category Common Helpers
   * @summary Is the first date after the second one?
   *
   * @description
   * Is the first date after the second one?
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date that should be after the other one to return true
   * @param dateToCompare - The date to compare with
   *
   * @returns The first date is after the second date
   *
   * @example
   * // Is 10 July 1989 after 11 February 1987?
   * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
   * //=> true
   */
  function isAfter(date, dateToCompare) {
    const _date = toDate(date);
    const _dateToCompare = toDate(dateToCompare);
    return _date.getTime() > _dateToCompare.getTime();
  }

  /**
   * @name isBefore
   * @category Common Helpers
   * @summary Is the first date before the second one?
   *
   * @description
   * Is the first date before the second one?
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date that should be before the other one to return true
   * @param dateToCompare - The date to compare with
   *
   * @returns The first date is before the second date
   *
   * @example
   * // Is 10 July 1989 before 11 February 1987?
   * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
   * //=> false
   */
  function isBefore(date, dateToCompare) {
    const _date = toDate(date);
    const _dateToCompare = toDate(dateToCompare);
    return +_date < +_dateToCompare;
  }

  /**
   * @name isEqual
   * @category Common Helpers
   * @summary Are the given dates equal?
   *
   * @description
   * Are the given dates equal?
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param dateLeft - The first date to compare
   * @param dateRight - The second date to compare
   *
   * @returns The dates are equal
   *
   * @example
   * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
   * const result = isEqual(
   *   new Date(2014, 6, 2, 6, 30, 45, 0),
   *   new Date(2014, 6, 2, 6, 30, 45, 500)
   * )
   * //=> false
   */
  function isEqual(leftDate, rightDate) {
    const _dateLeft = toDate(leftDate);
    const _dateRight = toDate(rightDate);
    return +_dateLeft === +_dateRight;
  }

  /**
   * @name transpose
   * @category Generic Helpers
   * @summary Transpose the date to the given constructor.
   *
   * @description
   * The function transposes the date to the given constructor. It helps you
   * to transpose the date in the system time zone to say `UTCDate` or any other
   * date extension.
   *
   * @typeParam DateInputType - The input `Date` type derived from the passed argument.
   * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.
   *
   * @param fromDate - The date to use values from
   * @param constructor - The date constructor to use
   *
   * @returns Date transposed to the given constructor
   *
   * @example
   * // Create July 10, 2022 00:00 in locale time zone
   * const date = new Date(2022, 6, 10)
   * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'
   *
   * @example
   * // Transpose the date to July 10, 2022 00:00 in UTC
   * transpose(date, UTCDate)
   * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'
   */
  function transpose(fromDate, constructor) {
    const date =
      constructor instanceof Date
        ? constructFrom(constructor, 0)
        : new constructor(0);
    date.setFullYear(
      fromDate.getFullYear(),
      fromDate.getMonth(),
      fromDate.getDate(),
    );
    date.setHours(
      fromDate.getHours(),
      fromDate.getMinutes(),
      fromDate.getSeconds(),
      fromDate.getMilliseconds(),
    );
    return date;
  }

  const TIMEZONE_UNIT_PRIORITY = 10;

  class Setter {
    subPriority = 0;

    validate(_utcDate, _options) {
      return true;
    }
  }

  class ValueSetter extends Setter {
    constructor(
      value,

      validateValue,

      setValue,

      priority,
      subPriority,
    ) {
      super();
      this.value = value;
      this.validateValue = validateValue;
      this.setValue = setValue;
      this.priority = priority;
      if (subPriority) {
        this.subPriority = subPriority;
      }
    }

    validate(date, options) {
      return this.validateValue(date, this.value, options);
    }

    set(date, flags, options) {
      return this.setValue(date, flags, this.value, options);
    }
  }

  class DateToSystemTimezoneSetter extends Setter {
    priority = TIMEZONE_UNIT_PRIORITY;
    subPriority = -1;
    set(date, flags) {
      if (flags.timestampIsSet) return date;
      return constructFrom(date, transpose(date, Date));
    }
  }

  class Parser {
    run(dateString, token, match, options) {
      const result = this.parse(dateString, token, match, options);
      if (!result) {
        return null;
      }

      return {
        setter: new ValueSetter(
          result.value,
          this.validate,
          this.set,
          this.priority,
          this.subPriority,
        ),
        rest: result.rest,
      };
    }

    validate(_utcDate, _value, _options) {
      return true;
    }
  }

  class EraParser extends Parser {
    priority = 140;

    parse(dateString, token, match) {
      switch (token) {
        // AD, BC
        case "G":
        case "GG":
        case "GGG":
          return (
            match.era(dateString, { width: "abbreviated" }) ||
            match.era(dateString, { width: "narrow" })
          );

        // A, B
        case "GGGGG":
          return match.era(dateString, { width: "narrow" });
        // Anno Domini, Before Christ
        case "GGGG":
        default:
          return (
            match.era(dateString, { width: "wide" }) ||
            match.era(dateString, { width: "abbreviated" }) ||
            match.era(dateString, { width: "narrow" })
          );
      }
    }

    set(date, flags, value) {
      flags.era = value;
      date.setFullYear(value, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["R", "u", "t", "T"];
  }

  const numericPatterns = {
    month: /^(1[0-2]|0?\d)/, // 0 to 12
    date: /^(3[0-1]|[0-2]?\d)/, // 0 to 31
    dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/, // 0 to 366
    week: /^(5[0-3]|[0-4]?\d)/, // 0 to 53
    hour23h: /^(2[0-3]|[0-1]?\d)/, // 0 to 23
    hour24h: /^(2[0-4]|[0-1]?\d)/, // 0 to 24
    hour11h: /^(1[0-1]|0?\d)/, // 0 to 11
    hour12h: /^(1[0-2]|0?\d)/, // 0 to 12
    minute: /^[0-5]?\d/, // 0 to 59
    second: /^[0-5]?\d/, // 0 to 59

    singleDigit: /^\d/, // 0 to 9
    twoDigits: /^\d{1,2}/, // 0 to 99
    threeDigits: /^\d{1,3}/, // 0 to 999
    fourDigits: /^\d{1,4}/, // 0 to 9999

    anyDigitsSigned: /^-?\d+/,
    singleDigitSigned: /^-?\d/, // 0 to 9, -0 to -9
    twoDigitsSigned: /^-?\d{1,2}/, // 0 to 99, -0 to -99
    threeDigitsSigned: /^-?\d{1,3}/, // 0 to 999, -0 to -999
    fourDigitsSigned: /^-?\d{1,4}/, // 0 to 9999, -0 to -9999
  };

  const timezonePatterns = {
    basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
    basic: /^([+-])(\d{2})(\d{2})|Z/,
    basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
    extended: /^([+-])(\d{2}):(\d{2})|Z/,
    extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/,
  };

  function mapValue(parseFnResult, mapFn) {
    if (!parseFnResult) {
      return parseFnResult;
    }

    return {
      value: mapFn(parseFnResult.value),
      rest: parseFnResult.rest,
    };
  }

  function parseNumericPattern(pattern, dateString) {
    const matchResult = dateString.match(pattern);

    if (!matchResult) {
      return null;
    }

    return {
      value: parseInt(matchResult[0], 10),
      rest: dateString.slice(matchResult[0].length),
    };
  }

  function parseTimezonePattern(pattern, dateString) {
    const matchResult = dateString.match(pattern);

    if (!matchResult) {
      return null;
    }

    // Input is 'Z'
    if (matchResult[0] === "Z") {
      return {
        value: 0,
        rest: dateString.slice(1),
      };
    }

    const sign = matchResult[1] === "+" ? 1 : -1;
    const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
    const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
    const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;

    return {
      value:
        sign *
        (hours * millisecondsInHour +
          minutes * millisecondsInMinute +
          seconds * millisecondsInSecond),
      rest: dateString.slice(matchResult[0].length),
    };
  }

  function parseAnyDigitsSigned(dateString) {
    return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
  }

  function parseNDigits(n, dateString) {
    switch (n) {
      case 1:
        return parseNumericPattern(numericPatterns.singleDigit, dateString);
      case 2:
        return parseNumericPattern(numericPatterns.twoDigits, dateString);
      case 3:
        return parseNumericPattern(numericPatterns.threeDigits, dateString);
      case 4:
        return parseNumericPattern(numericPatterns.fourDigits, dateString);
      default:
        return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
    }
  }

  function parseNDigitsSigned(n, dateString) {
    switch (n) {
      case 1:
        return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
      case 2:
        return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
      case 3:
        return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
      case 4:
        return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
      default:
        return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
    }
  }

  function dayPeriodEnumToHours(dayPeriod) {
    switch (dayPeriod) {
      case "morning":
        return 4;
      case "evening":
        return 17;
      case "pm":
      case "noon":
      case "afternoon":
        return 12;
      case "am":
      case "midnight":
      case "night":
      default:
        return 0;
    }
  }

  function normalizeTwoDigitYear(twoDigitYear, currentYear) {
    const isCommonEra = currentYear > 0;
    // Absolute number of the current year:
    // 1 -> 1 AC
    // 0 -> 1 BC
    // -1 -> 2 BC
    const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;

    let result;
    if (absCurrentYear <= 50) {
      result = twoDigitYear || 100;
    } else {
      const rangeEnd = absCurrentYear + 50;
      const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;
      const isPreviousCentury = twoDigitYear >= rangeEnd % 100;
      result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
    }

    return isCommonEra ? result : 1 - result;
  }

  function isLeapYearIndex(year) {
    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);
  }

  // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
  // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
  // |----------|-------|----|-------|-------|-------|
  // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
  // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
  // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
  // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
  // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
  class YearParser extends Parser {
    priority = 130;
    incompatibleTokens = ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"];

    parse(dateString, token, match) {
      const valueCallback = (year) => ({
        year,
        isTwoDigitYear: token === "yy",
      });

      switch (token) {
        case "y":
          return mapValue(parseNDigits(4, dateString), valueCallback);
        case "yo":
          return mapValue(
            match.ordinalNumber(dateString, {
              unit: "year",
            }),
            valueCallback,
          );
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
      }
    }

    validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }

    set(date, flags, value) {
      const currentYear = date.getFullYear();

      if (value.isTwoDigitYear) {
        const normalizedTwoDigitYear = normalizeTwoDigitYear(
          value.year,
          currentYear,
        );
        date.setFullYear(normalizedTwoDigitYear, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
      }

      const year =
        !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setFullYear(year, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
  }

  // Local week-numbering year
  class LocalWeekYearParser extends Parser {
    priority = 130;

    parse(dateString, token, match) {
      const valueCallback = (year) => ({
        year,
        isTwoDigitYear: token === "YY",
      });

      switch (token) {
        case "Y":
          return mapValue(parseNDigits(4, dateString), valueCallback);
        case "Yo":
          return mapValue(
            match.ordinalNumber(dateString, {
              unit: "year",
            }),
            valueCallback,
          );
        default:
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
      }
    }

    validate(_date, value) {
      return value.isTwoDigitYear || value.year > 0;
    }

    set(date, flags, value, options) {
      const currentYear = getWeekYear(date, options);

      if (value.isTwoDigitYear) {
        const normalizedTwoDigitYear = normalizeTwoDigitYear(
          value.year,
          currentYear,
        );
        date.setFullYear(
          normalizedTwoDigitYear,
          0,
          options.firstWeekContainsDate,
        );
        date.setHours(0, 0, 0, 0);
        return startOfWeek(date, options);
      }

      const year =
        !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setFullYear(year, 0, options.firstWeekContainsDate);
      date.setHours(0, 0, 0, 0);
      return startOfWeek(date, options);
    }

    incompatibleTokens = [
      "y",
      "R",
      "u",
      "Q",
      "q",
      "M",
      "L",
      "I",
      "d",
      "D",
      "i",
      "t",
      "T",
    ];
  }

  // ISO week-numbering year
  class ISOWeekYearParser extends Parser {
    priority = 130;

    parse(dateString, token) {
      if (token === "R") {
        return parseNDigitsSigned(4, dateString);
      }

      return parseNDigitsSigned(token.length, dateString);
    }

    set(date, _flags, value) {
      const firstWeekOfYear = constructFrom(date, 0);
      firstWeekOfYear.setFullYear(value, 0, 4);
      firstWeekOfYear.setHours(0, 0, 0, 0);
      return startOfISOWeek(firstWeekOfYear);
    }

    incompatibleTokens = [
      "G",
      "y",
      "Y",
      "u",
      "Q",
      "q",
      "M",
      "L",
      "w",
      "d",
      "D",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  class ExtendedYearParser extends Parser {
    priority = 130;

    parse(dateString, token) {
      if (token === "u") {
        return parseNDigitsSigned(4, dateString);
      }

      return parseNDigitsSigned(token.length, dateString);
    }

    set(date, _flags, value) {
      date.setFullYear(value, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"];
  }

  class QuarterParser extends Parser {
    priority = 120;

    parse(dateString, token, match) {
      switch (token) {
        // 1, 2, 3, 4
        case "Q":
        case "QQ": // 01, 02, 03, 04
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case "Qo":
          return match.ordinalNumber(dateString, { unit: "quarter" });
        // Q1, Q2, Q3, Q4
        case "QQQ":
          return (
            match.quarter(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.quarter(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );

        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "QQQQQ":
          return match.quarter(dateString, {
            width: "narrow",
            context: "formatting",
          });
        // 1st quarter, 2nd quarter, ...
        case "QQQQ":
        default:
          return (
            match.quarter(dateString, {
              width: "wide",
              context: "formatting",
            }) ||
            match.quarter(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.quarter(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 4;
    }

    set(date, _flags, value) {
      date.setMonth((value - 1) * 3, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "Y",
      "R",
      "q",
      "M",
      "L",
      "w",
      "I",
      "d",
      "D",
      "i",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  class StandAloneQuarterParser extends Parser {
    priority = 120;

    parse(dateString, token, match) {
      switch (token) {
        // 1, 2, 3, 4
        case "q":
        case "qq": // 01, 02, 03, 04
          return parseNDigits(token.length, dateString);
        // 1st, 2nd, 3rd, 4th
        case "qo":
          return match.ordinalNumber(dateString, { unit: "quarter" });
        // Q1, Q2, Q3, Q4
        case "qqq":
          return (
            match.quarter(dateString, {
              width: "abbreviated",
              context: "standalone",
            }) ||
            match.quarter(dateString, {
              width: "narrow",
              context: "standalone",
            })
          );

        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "qqqqq":
          return match.quarter(dateString, {
            width: "narrow",
            context: "standalone",
          });
        // 1st quarter, 2nd quarter, ...
        case "qqqq":
        default:
          return (
            match.quarter(dateString, {
              width: "wide",
              context: "standalone",
            }) ||
            match.quarter(dateString, {
              width: "abbreviated",
              context: "standalone",
            }) ||
            match.quarter(dateString, {
              width: "narrow",
              context: "standalone",
            })
          );
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 4;
    }

    set(date, _flags, value) {
      date.setMonth((value - 1) * 3, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "Y",
      "R",
      "Q",
      "M",
      "L",
      "w",
      "I",
      "d",
      "D",
      "i",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  class MonthParser extends Parser {
    incompatibleTokens = [
      "Y",
      "R",
      "q",
      "Q",
      "L",
      "w",
      "I",
      "D",
      "i",
      "e",
      "c",
      "t",
      "T",
    ];

    priority = 110;

    parse(dateString, token, match) {
      const valueCallback = (value) => value - 1;

      switch (token) {
        // 1, 2, ..., 12
        case "M":
          return mapValue(
            parseNumericPattern(numericPatterns.month, dateString),
            valueCallback,
          );
        // 01, 02, ..., 12
        case "MM":
          return mapValue(parseNDigits(2, dateString), valueCallback);
        // 1st, 2nd, ..., 12th
        case "Mo":
          return mapValue(
            match.ordinalNumber(dateString, {
              unit: "month",
            }),
            valueCallback,
          );
        // Jan, Feb, ..., Dec
        case "MMM":
          return (
            match.month(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.month(dateString, { width: "narrow", context: "formatting" })
          );

        // J, F, ..., D
        case "MMMMM":
          return match.month(dateString, {
            width: "narrow",
            context: "formatting",
          });
        // January, February, ..., December
        case "MMMM":
        default:
          return (
            match.month(dateString, { width: "wide", context: "formatting" }) ||
            match.month(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.month(dateString, { width: "narrow", context: "formatting" })
          );
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 11;
    }

    set(date, _flags, value) {
      date.setMonth(value, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
  }

  class StandAloneMonthParser extends Parser {
    priority = 110;

    parse(dateString, token, match) {
      const valueCallback = (value) => value - 1;

      switch (token) {
        // 1, 2, ..., 12
        case "L":
          return mapValue(
            parseNumericPattern(numericPatterns.month, dateString),
            valueCallback,
          );
        // 01, 02, ..., 12
        case "LL":
          return mapValue(parseNDigits(2, dateString), valueCallback);
        // 1st, 2nd, ..., 12th
        case "Lo":
          return mapValue(
            match.ordinalNumber(dateString, {
              unit: "month",
            }),
            valueCallback,
          );
        // Jan, Feb, ..., Dec
        case "LLL":
          return (
            match.month(dateString, {
              width: "abbreviated",
              context: "standalone",
            }) ||
            match.month(dateString, { width: "narrow", context: "standalone" })
          );

        // J, F, ..., D
        case "LLLLL":
          return match.month(dateString, {
            width: "narrow",
            context: "standalone",
          });
        // January, February, ..., December
        case "LLLL":
        default:
          return (
            match.month(dateString, { width: "wide", context: "standalone" }) ||
            match.month(dateString, {
              width: "abbreviated",
              context: "standalone",
            }) ||
            match.month(dateString, { width: "narrow", context: "standalone" })
          );
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 11;
    }

    set(date, _flags, value) {
      date.setMonth(value, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "Y",
      "R",
      "q",
      "Q",
      "M",
      "w",
      "I",
      "D",
      "i",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  /**
   * The {@link setWeek} function options.
   */

  /**
   * @name setWeek
   * @category Week Helpers
   * @summary Set the local week to the given date.
   *
   * @description
   * Set the local week to the given date, saving the weekday number.
   * The exact calculation depends on the values of
   * `options.weekStartsOn` (which is the index of the first day of the week)
   * and `options.firstWeekContainsDate` (which is the day of January, which is always in
   * the first week of the week-numbering year)
   *
   * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to be changed
   * @param week - The week of the new date
   * @param options - An object with options
   *
   * @returns The new date with the local week set
   *
   * @example
   * // Set the 1st week to 2 January 2005 with default options:
   * const result = setWeek(new Date(2005, 0, 2), 1)
   * //=> Sun Dec 26 2004 00:00:00
   *
   * @example
   * // Set the 1st week to 2 January 2005,
   * // if Monday is the first day of the week,
   * // and the first week of the year always contains 4 January:
   * const result = setWeek(new Date(2005, 0, 2), 1, {
   *   weekStartsOn: 1,
   *   firstWeekContainsDate: 4
   * })
   * //=> Sun Jan 4 2004 00:00:00
   */
  function setWeek(date, week, options) {
    const _date = toDate(date);
    const diff = getWeek(_date, options) - week;
    _date.setDate(_date.getDate() - diff * 7);
    return _date;
  }

  // Local week of year
  class LocalWeekParser extends Parser {
    priority = 100;

    parse(dateString, token, match) {
      switch (token) {
        case "w":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "wo":
          return match.ordinalNumber(dateString, { unit: "week" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 53;
    }

    set(date, _flags, value, options) {
      return startOfWeek(setWeek(date, value, options), options);
    }

    incompatibleTokens = [
      "y",
      "R",
      "u",
      "q",
      "Q",
      "M",
      "L",
      "I",
      "d",
      "D",
      "i",
      "t",
      "T",
    ];
  }

  /**
   * @name setISOWeek
   * @category ISO Week Helpers
   * @summary Set the ISO week to the given date.
   *
   * @description
   * Set the ISO week to the given date, saving the weekday number.
   *
   * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to be changed
   * @param week - The ISO week of the new date
   *
   * @returns The new date with the ISO week set
   *
   * @example
   * // Set the 53rd ISO week to 7 August 2004:
   * const result = setISOWeek(new Date(2004, 7, 7), 53)
   * //=> Sat Jan 01 2005 00:00:00
   */
  function setISOWeek(date, week) {
    const _date = toDate(date);
    const diff = getISOWeek(_date) - week;
    _date.setDate(_date.getDate() - diff * 7);
    return _date;
  }

  // ISO week of year
  class ISOWeekParser extends Parser {
    priority = 100;

    parse(dateString, token, match) {
      switch (token) {
        case "I":
          return parseNumericPattern(numericPatterns.week, dateString);
        case "Io":
          return match.ordinalNumber(dateString, { unit: "week" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 53;
    }

    set(date, _flags, value) {
      return startOfISOWeek(setISOWeek(date, value));
    }

    incompatibleTokens = [
      "y",
      "Y",
      "u",
      "q",
      "Q",
      "M",
      "L",
      "w",
      "d",
      "D",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  const DAYS_IN_MONTH_LEAP_YEAR = [
    31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,
  ];

  // Day of the month
  class DateParser extends Parser {
    priority = 90;
    subPriority = 1;

    parse(dateString, token, match) {
      switch (token) {
        case "d":
          return parseNumericPattern(numericPatterns.date, dateString);
        case "do":
          return match.ordinalNumber(dateString, { unit: "date" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(date, value) {
      const year = date.getFullYear();
      const isLeapYear = isLeapYearIndex(year);
      const month = date.getMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    }

    set(date, _flags, value) {
      date.setDate(value);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "Y",
      "R",
      "q",
      "Q",
      "w",
      "I",
      "D",
      "i",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  class DayOfYearParser extends Parser {
    priority = 90;

    subpriority = 1;

    parse(dateString, token, match) {
      switch (token) {
        case "D":
        case "DD":
          return parseNumericPattern(numericPatterns.dayOfYear, dateString);
        case "Do":
          return match.ordinalNumber(dateString, { unit: "date" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(date, value) {
      const year = date.getFullYear();
      const isLeapYear = isLeapYearIndex(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    }

    set(date, _flags, value) {
      date.setMonth(0, value);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "Y",
      "R",
      "q",
      "Q",
      "M",
      "L",
      "w",
      "I",
      "d",
      "E",
      "i",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  /**
   * The {@link setDay} function options.
   */

  /**
   * @name setDay
   * @category Weekday Helpers
   * @summary Set the day of the week to the given date.
   *
   * @description
   * Set the day of the week to the given date.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to be changed
   * @param day - The day of the week of the new date
   * @param options - An object with options.
   *
   * @returns The new date with the day of the week set
   *
   * @example
   * // Set week day to Sunday, with the default weekStartsOn of Sunday:
   * const result = setDay(new Date(2014, 8, 1), 0)
   * //=> Sun Aug 31 2014 00:00:00
   *
   * @example
   * // Set week day to Sunday, with a weekStartsOn of Monday:
   * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })
   * //=> Sun Sep 07 2014 00:00:00
   */
  function setDay(date, day, options) {
    const defaultOptions = getDefaultOptions$1();
    const weekStartsOn =
      options?.weekStartsOn ??
      options?.locale?.options?.weekStartsOn ??
      defaultOptions.weekStartsOn ??
      defaultOptions.locale?.options?.weekStartsOn ??
      0;

    const _date = toDate(date);
    const currentDay = _date.getDay();

    const remainder = day % 7;
    const dayIndex = (remainder + 7) % 7;

    const delta = 7 - weekStartsOn;
    const diff =
      day < 0 || day > 6
        ? day - ((currentDay + delta) % 7)
        : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);
    return addDays(_date, diff);
  }

  // Day of week
  class DayParser extends Parser {
    priority = 90;

    parse(dateString, token, match) {
      switch (token) {
        // Tue
        case "E":
        case "EE":
        case "EEE":
          return (
            match.day(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.day(dateString, { width: "short", context: "formatting" }) ||
            match.day(dateString, { width: "narrow", context: "formatting" })
          );

        // T
        case "EEEEE":
          return match.day(dateString, {
            width: "narrow",
            context: "formatting",
          });
        // Tu
        case "EEEEEE":
          return (
            match.day(dateString, { width: "short", context: "formatting" }) ||
            match.day(dateString, { width: "narrow", context: "formatting" })
          );

        // Tuesday
        case "EEEE":
        default:
          return (
            match.day(dateString, { width: "wide", context: "formatting" }) ||
            match.day(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.day(dateString, { width: "short", context: "formatting" }) ||
            match.day(dateString, { width: "narrow", context: "formatting" })
          );
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 6;
    }

    set(date, _flags, value, options) {
      date = setDay(date, value, options);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["D", "i", "e", "c", "t", "T"];
  }

  // Local day of week
  class LocalDayParser extends Parser {
    priority = 90;
    parse(dateString, token, match, options) {
      const valueCallback = (value) => {
        // We want here floor instead of trunc, so we get -7 for value 0 instead of 0
        const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;
      };

      switch (token) {
        // 3
        case "e":
        case "ee": // 03
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        // 3rd
        case "eo":
          return mapValue(
            match.ordinalNumber(dateString, {
              unit: "day",
            }),
            valueCallback,
          );
        // Tue
        case "eee":
          return (
            match.day(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.day(dateString, { width: "short", context: "formatting" }) ||
            match.day(dateString, { width: "narrow", context: "formatting" })
          );

        // T
        case "eeeee":
          return match.day(dateString, {
            width: "narrow",
            context: "formatting",
          });
        // Tu
        case "eeeeee":
          return (
            match.day(dateString, { width: "short", context: "formatting" }) ||
            match.day(dateString, { width: "narrow", context: "formatting" })
          );

        // Tuesday
        case "eeee":
        default:
          return (
            match.day(dateString, { width: "wide", context: "formatting" }) ||
            match.day(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.day(dateString, { width: "short", context: "formatting" }) ||
            match.day(dateString, { width: "narrow", context: "formatting" })
          );
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 6;
    }

    set(date, _flags, value, options) {
      date = setDay(date, value, options);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "y",
      "R",
      "u",
      "q",
      "Q",
      "M",
      "L",
      "I",
      "d",
      "D",
      "E",
      "i",
      "c",
      "t",
      "T",
    ];
  }

  // Stand-alone local day of week
  class StandAloneLocalDayParser extends Parser {
    priority = 90;

    parse(dateString, token, match, options) {
      const valueCallback = (value) => {
        // We want here floor instead of trunc, so we get -7 for value 0 instead of 0
        const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;
      };

      switch (token) {
        // 3
        case "c":
        case "cc": // 03
          return mapValue(parseNDigits(token.length, dateString), valueCallback);
        // 3rd
        case "co":
          return mapValue(
            match.ordinalNumber(dateString, {
              unit: "day",
            }),
            valueCallback,
          );
        // Tue
        case "ccc":
          return (
            match.day(dateString, {
              width: "abbreviated",
              context: "standalone",
            }) ||
            match.day(dateString, { width: "short", context: "standalone" }) ||
            match.day(dateString, { width: "narrow", context: "standalone" })
          );

        // T
        case "ccccc":
          return match.day(dateString, {
            width: "narrow",
            context: "standalone",
          });
        // Tu
        case "cccccc":
          return (
            match.day(dateString, { width: "short", context: "standalone" }) ||
            match.day(dateString, { width: "narrow", context: "standalone" })
          );

        // Tuesday
        case "cccc":
        default:
          return (
            match.day(dateString, { width: "wide", context: "standalone" }) ||
            match.day(dateString, {
              width: "abbreviated",
              context: "standalone",
            }) ||
            match.day(dateString, { width: "short", context: "standalone" }) ||
            match.day(dateString, { width: "narrow", context: "standalone" })
          );
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 6;
    }

    set(date, _flags, value, options) {
      date = setDay(date, value, options);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "y",
      "R",
      "u",
      "q",
      "Q",
      "M",
      "L",
      "I",
      "d",
      "D",
      "E",
      "i",
      "e",
      "t",
      "T",
    ];
  }

  /**
   * @name setISODay
   * @category Weekday Helpers
   * @summary Set the day of the ISO week to the given date.
   *
   * @description
   * Set the day of the ISO week to the given date.
   * ISO week starts with Monday.
   * 7 is the index of Sunday, 1 is the index of Monday etc.
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param date - The date to be changed
   * @param day - The day of the ISO week of the new date
   *
   * @returns The new date with the day of the ISO week set
   *
   * @example
   * // Set Sunday to 1 September 2014:
   * const result = setISODay(new Date(2014, 8, 1), 7)
   * //=> Sun Sep 07 2014 00:00:00
   */
  function setISODay(date, day) {
    const _date = toDate(date);
    const currentDay = getISODay(_date);
    const diff = day - currentDay;
    return addDays(_date, diff);
  }

  // ISO day of week
  class ISODayParser extends Parser {
    priority = 90;

    parse(dateString, token, match) {
      const valueCallback = (value) => {
        if (value === 0) {
          return 7;
        }
        return value;
      };

      switch (token) {
        // 2
        case "i":
        case "ii": // 02
          return parseNDigits(token.length, dateString);
        // 2nd
        case "io":
          return match.ordinalNumber(dateString, { unit: "day" });
        // Tue
        case "iii":
          return mapValue(
            match.day(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
              match.day(dateString, {
                width: "short",
                context: "formatting",
              }) ||
              match.day(dateString, {
                width: "narrow",
                context: "formatting",
              }),
            valueCallback,
          );
        // T
        case "iiiii":
          return mapValue(
            match.day(dateString, {
              width: "narrow",
              context: "formatting",
            }),
            valueCallback,
          );
        // Tu
        case "iiiiii":
          return mapValue(
            match.day(dateString, {
              width: "short",
              context: "formatting",
            }) ||
              match.day(dateString, {
                width: "narrow",
                context: "formatting",
              }),
            valueCallback,
          );
        // Tuesday
        case "iiii":
        default:
          return mapValue(
            match.day(dateString, {
              width: "wide",
              context: "formatting",
            }) ||
              match.day(dateString, {
                width: "abbreviated",
                context: "formatting",
              }) ||
              match.day(dateString, {
                width: "short",
                context: "formatting",
              }) ||
              match.day(dateString, {
                width: "narrow",
                context: "formatting",
              }),
            valueCallback,
          );
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 7;
    }

    set(date, _flags, value) {
      date = setISODay(date, value);
      date.setHours(0, 0, 0, 0);
      return date;
    }

    incompatibleTokens = [
      "y",
      "Y",
      "u",
      "q",
      "Q",
      "M",
      "L",
      "w",
      "d",
      "D",
      "E",
      "e",
      "c",
      "t",
      "T",
    ];
  }

  class AMPMParser extends Parser {
    priority = 80;

    parse(dateString, token, match) {
      switch (token) {
        case "a":
        case "aa":
        case "aaa":
          return (
            match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );

        case "aaaaa":
          return match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          });
        case "aaaa":
        default:
          return (
            match.dayPeriod(dateString, {
              width: "wide",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );
      }
    }

    set(date, _flags, value) {
      date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["b", "B", "H", "k", "t", "T"];
  }

  class AMPMMidnightParser extends Parser {
    priority = 80;

    parse(dateString, token, match) {
      switch (token) {
        case "b":
        case "bb":
        case "bbb":
          return (
            match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );

        case "bbbbb":
          return match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          });
        case "bbbb":
        default:
          return (
            match.dayPeriod(dateString, {
              width: "wide",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );
      }
    }

    set(date, _flags, value) {
      date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["a", "B", "H", "k", "t", "T"];
  }

  // in the morning, in the afternoon, in the evening, at night
  class DayPeriodParser extends Parser {
    priority = 80;

    parse(dateString, token, match) {
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return (
            match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );

        case "BBBBB":
          return match.dayPeriod(dateString, {
            width: "narrow",
            context: "formatting",
          });
        case "BBBB":
        default:
          return (
            match.dayPeriod(dateString, {
              width: "wide",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "abbreviated",
              context: "formatting",
            }) ||
            match.dayPeriod(dateString, {
              width: "narrow",
              context: "formatting",
            })
          );
      }
    }

    set(date, _flags, value) {
      date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["a", "b", "t", "T"];
  }

  class Hour1to12Parser extends Parser {
    priority = 70;

    parse(dateString, token, match) {
      switch (token) {
        case "h":
          return parseNumericPattern(numericPatterns.hour12h, dateString);
        case "ho":
          return match.ordinalNumber(dateString, { unit: "hour" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 12;
    }

    set(date, _flags, value) {
      const isPM = date.getHours() >= 12;
      if (isPM && value < 12) {
        date.setHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setHours(0, 0, 0, 0);
      } else {
        date.setHours(value, 0, 0, 0);
      }
      return date;
    }

    incompatibleTokens = ["H", "K", "k", "t", "T"];
  }

  class Hour0to23Parser extends Parser {
    priority = 70;

    parse(dateString, token, match) {
      switch (token) {
        case "H":
          return parseNumericPattern(numericPatterns.hour23h, dateString);
        case "Ho":
          return match.ordinalNumber(dateString, { unit: "hour" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 23;
    }

    set(date, _flags, value) {
      date.setHours(value, 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["a", "b", "h", "K", "k", "t", "T"];
  }

  class Hour0To11Parser extends Parser {
    priority = 70;

    parse(dateString, token, match) {
      switch (token) {
        case "K":
          return parseNumericPattern(numericPatterns.hour11h, dateString);
        case "Ko":
          return match.ordinalNumber(dateString, { unit: "hour" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 11;
    }

    set(date, _flags, value) {
      const isPM = date.getHours() >= 12;
      if (isPM && value < 12) {
        date.setHours(value + 12, 0, 0, 0);
      } else {
        date.setHours(value, 0, 0, 0);
      }
      return date;
    }

    incompatibleTokens = ["h", "H", "k", "t", "T"];
  }

  class Hour1To24Parser extends Parser {
    priority = 70;

    parse(dateString, token, match) {
      switch (token) {
        case "k":
          return parseNumericPattern(numericPatterns.hour24h, dateString);
        case "ko":
          return match.ordinalNumber(dateString, { unit: "hour" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 1 && value <= 24;
    }

    set(date, _flags, value) {
      const hours = value <= 24 ? value % 24 : value;
      date.setHours(hours, 0, 0, 0);
      return date;
    }

    incompatibleTokens = ["a", "b", "h", "H", "K", "t", "T"];
  }

  class MinuteParser extends Parser {
    priority = 60;

    parse(dateString, token, match) {
      switch (token) {
        case "m":
          return parseNumericPattern(numericPatterns.minute, dateString);
        case "mo":
          return match.ordinalNumber(dateString, { unit: "minute" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 59;
    }

    set(date, _flags, value) {
      date.setMinutes(value, 0, 0);
      return date;
    }

    incompatibleTokens = ["t", "T"];
  }

  class SecondParser extends Parser {
    priority = 50;

    parse(dateString, token, match) {
      switch (token) {
        case "s":
          return parseNumericPattern(numericPatterns.second, dateString);
        case "so":
          return match.ordinalNumber(dateString, { unit: "second" });
        default:
          return parseNDigits(token.length, dateString);
      }
    }

    validate(_date, value) {
      return value >= 0 && value <= 59;
    }

    set(date, _flags, value) {
      date.setSeconds(value, 0);
      return date;
    }

    incompatibleTokens = ["t", "T"];
  }

  class FractionOfSecondParser extends Parser {
    priority = 30;

    parse(dateString, token) {
      const valueCallback = (value) =>
        Math.trunc(value * Math.pow(10, -token.length + 3));
      return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }

    set(date, _flags, value) {
      date.setMilliseconds(value);
      return date;
    }

    incompatibleTokens = ["t", "T"];
  }

  // Timezone (ISO-8601. +00:00 is `'Z'`)
  class ISOTimezoneWithZParser extends Parser {
    priority = 10;

    parse(dateString, token) {
      switch (token) {
        case "X":
          return parseTimezonePattern(
            timezonePatterns.basicOptionalMinutes,
            dateString,
          );
        case "XX":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "XXXX":
          return parseTimezonePattern(
            timezonePatterns.basicOptionalSeconds,
            dateString,
          );
        case "XXXXX":
          return parseTimezonePattern(
            timezonePatterns.extendedOptionalSeconds,
            dateString,
          );
        case "XXX":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }

    set(date, flags, value) {
      if (flags.timestampIsSet) return date;
      return constructFrom(
        date,
        date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,
      );
    }

    incompatibleTokens = ["t", "T", "x"];
  }

  // Timezone (ISO-8601)
  class ISOTimezoneParser extends Parser {
    priority = 10;

    parse(dateString, token) {
      switch (token) {
        case "x":
          return parseTimezonePattern(
            timezonePatterns.basicOptionalMinutes,
            dateString,
          );
        case "xx":
          return parseTimezonePattern(timezonePatterns.basic, dateString);
        case "xxxx":
          return parseTimezonePattern(
            timezonePatterns.basicOptionalSeconds,
            dateString,
          );
        case "xxxxx":
          return parseTimezonePattern(
            timezonePatterns.extendedOptionalSeconds,
            dateString,
          );
        case "xxx":
        default:
          return parseTimezonePattern(timezonePatterns.extended, dateString);
      }
    }

    set(date, flags, value) {
      if (flags.timestampIsSet) return date;
      return constructFrom(
        date,
        date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,
      );
    }

    incompatibleTokens = ["t", "T", "X"];
  }

  class TimestampSecondsParser extends Parser {
    priority = 40;

    parse(dateString) {
      return parseAnyDigitsSigned(dateString);
    }

    set(date, _flags, value) {
      return [constructFrom(date, value * 1000), { timestampIsSet: true }];
    }

    incompatibleTokens = "*";
  }

  class TimestampMillisecondsParser extends Parser {
    priority = 20;

    parse(dateString) {
      return parseAnyDigitsSigned(dateString);
    }

    set(date, _flags, value) {
      return [constructFrom(date, value), { timestampIsSet: true }];
    }

    incompatibleTokens = "*";
  }

  /*
   * |     | Unit                           |     | Unit                           |
   * |-----|--------------------------------|-----|--------------------------------|
   * |  a  | AM, PM                         |  A* | Milliseconds in day            |
   * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
   * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
   * |  d  | Day of month                   |  D  | Day of year                    |
   * |  e  | Local day of week              |  E  | Day of week                    |
   * |  f  |                                |  F* | Day of week in month           |
   * |  g* | Modified Julian day            |  G  | Era                            |
   * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
   * |  i! | ISO day of week                |  I! | ISO week of year               |
   * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
   * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
   * |  l* | (deprecated)                   |  L  | Stand-alone month              |
   * |  m  | Minute                         |  M  | Month                          |
   * |  n  |                                |  N  |                                |
   * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
   * |  p  |                                |  P  |                                |
   * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
   * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
   * |  s  | Second                         |  S  | Fraction of second             |
   * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
   * |  u  | Extended year                  |  U* | Cyclic year                    |
   * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
   * |  w  | Local week of year             |  W* | Week of month                  |
   * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
   * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
   * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
   *
   * Letters marked by * are not implemented but reserved by Unicode standard.
   *
   * Letters marked by ! are non-standard, but implemented by date-fns:
   * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
   * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
   *   i.e. 7 for Sunday, 1 for Monday, etc.
   * - `I` is ISO week of year, as opposed to `w` which is local week of year.
   * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
   *   `R` is supposed to be used in conjunction with `I` and `i`
   *   for universal ISO week-numbering date, whereas
   *   `Y` is supposed to be used in conjunction with `w` and `e`
   *   for week-numbering date specific to the locale.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- It's ok, we want any here
  const parsers = {
    G: new EraParser(),
    y: new YearParser(),
    Y: new LocalWeekYearParser(),
    R: new ISOWeekYearParser(),
    u: new ExtendedYearParser(),
    Q: new QuarterParser(),
    q: new StandAloneQuarterParser(),
    M: new MonthParser(),
    L: new StandAloneMonthParser(),
    w: new LocalWeekParser(),
    I: new ISOWeekParser(),
    d: new DateParser(),
    D: new DayOfYearParser(),
    E: new DayParser(),
    e: new LocalDayParser(),
    c: new StandAloneLocalDayParser(),
    i: new ISODayParser(),
    a: new AMPMParser(),
    b: new AMPMMidnightParser(),
    B: new DayPeriodParser(),
    h: new Hour1to12Parser(),
    H: new Hour0to23Parser(),
    K: new Hour0To11Parser(),
    k: new Hour1To24Parser(),
    m: new MinuteParser(),
    s: new SecondParser(),
    S: new FractionOfSecondParser(),
    X: new ISOTimezoneWithZParser(),
    x: new ISOTimezoneParser(),
    t: new TimestampSecondsParser(),
    T: new TimestampMillisecondsParser(),
  };

  /**
   * The {@link parse} function options.
   */

  // This RegExp consists of three parts separated by `|`:
  // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
  //   (one of the certain letters followed by `o`)
  // - (\w)\1* matches any sequences of the same letter
  // - '' matches two quote characters in a row
  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
  //   except a single quote symbol, which ends the sequence.
  //   Two quote characters do not end the sequence.
  //   If there is no matching single quote
  //   then the sequence will continue until the end of the string.
  // - . matches any single character unmatched by previous parts of the RegExps
  const formattingTokensRegExp =
    /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

  // This RegExp catches symbols escaped by quotes, and also
  // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
  const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

  const escapedStringRegExp = /^'([^]*?)'?$/;
  const doubleQuoteRegExp = /''/g;

  const notWhitespaceRegExp = /\S/;
  const unescapedLatinCharacterRegExp = /[a-zA-Z]/;

  /**
   * @name parse
   * @category Common Helpers
   * @summary Parse the date.
   *
   * @description
   * Return the date parsed from string using the given format string.
   *
   * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
   * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * The characters in the format string wrapped between two single quotes characters (') are escaped.
   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
   *
   * Format of the format string is based on Unicode Technical Standard #35:
   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
   * with a few additions (see note 5 below the table).
   *
   * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
   * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
   *
   * ```javascript
   * parse('23 AM', 'HH a', new Date())
   * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
   * ```
   *
   * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
   *
   * Accepted format string patterns:
   * | Unit                            |Prior| Pattern | Result examples                   | Notes |
   * |---------------------------------|-----|---------|-----------------------------------|-------|
   * | Era                             | 140 | G..GGG  | AD, BC                            |       |
   * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
   * |                                 |     | GGGGG   | A, B                              |       |
   * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
   * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
   * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
   * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
   * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
   * |                                 |     | yyyyy   | ...                               | 2,4   |
   * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
   * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
   * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
   * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
   * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
   * |                                 |     | YYYYY   | ...                               | 2,4   |
   * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
   * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
   * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
   * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
   * |                                 |     | RRRRR   | ...                               | 2,4,5 |
   * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
   * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
   * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
   * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
   * |                                 |     | uuuuu   | ...                               | 2,4   |
   * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
   * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
   * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
   * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
   * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
   * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
   * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
   * |                                 |     | qq      | 01, 02, 03, 04                    |       |
   * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
   * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
   * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
   * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
   * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
   * |                                 |     | MM      | 01, 02, ..., 12                   |       |
   * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
   * |                                 |     | MMMM    | January, February, ..., December  | 2     |
   * |                                 |     | MMMMM   | J, F, ..., D                      |       |
   * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
   * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
   * |                                 |     | LL      | 01, 02, ..., 12                   |       |
   * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
   * |                                 |     | LLLL    | January, February, ..., December  | 2     |
   * |                                 |     | LLLLL   | J, F, ..., D                      |       |
   * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
   * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
   * |                                 |     | ww      | 01, 02, ..., 53                   |       |
   * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
   * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
   * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
   * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
   * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
   * |                                 |     | dd      | 01, 02, ..., 31                   |       |
   * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
   * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
   * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
   * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
   * |                                 |     | DDDD    | ...                               | 2     |
   * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
   * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
   * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
   * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
   * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
   * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
   * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
   * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
   * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
   * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
   * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
   * |                                 |     | ee      | 02, 03, ..., 01                   |       |
   * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
   * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
   * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
   * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
   * |                                 |     | cc      | 02, 03, ..., 01                   |       |
   * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
   * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
   * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
   * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
   * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
   * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
   * |                                 |     | aaaaa   | a, p                              |       |
   * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
   * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
   * |                                 |     | bbbbb   | a, p, n, mi                       |       |
   * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
   * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
   * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
   * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
   * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
   * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
   * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
   * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
   * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
   * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
   * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
   * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
   * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
   * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
   * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
   * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
   * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
   * |                                 |     | mm      | 00, 01, ..., 59                   |       |
   * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
   * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
   * |                                 |     | ss      | 00, 01, ..., 59                   |       |
   * | Seconds timestamp               |  40 | t       | 512969520                         |       |
   * |                                 |     | tt      | ...                               | 2     |
   * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
   * |                                 |     | SS      | 00, 01, ..., 99                   |       |
   * |                                 |     | SSS     | 000, 001, ..., 999                |       |
   * |                                 |     | SSSS    | ...                               | 2     |
   * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
   * |                                 |     | TT      | ...                               | 2     |
   * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
   * |                                 |     | XX      | -0800, +0530, Z                   |       |
   * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
   * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
   * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
   * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
   * |                                 |     | xx      | -0800, +0530, +0000               |       |
   * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
   * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
   * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
   * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
   * |                                 |     | PP      | May 29, 1453                      |       |
   * |                                 |     | PPP     | May 29th, 1453                    |       |
   * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
   * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
   * |                                 |     | pp      | 12:00:00 AM                       |       |
   * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
   * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
   * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
   * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
   * Notes:
   * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
   *    are the same as "stand-alone" units, but are different in some languages.
   *    "Formatting" units are declined according to the rules of the language
   *    in the context of a date. "Stand-alone" units are always nominative singular.
   *    In `format` function, they will produce different result:
   *
   *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
   *
   *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
   *
   *    `parse` will try to match both formatting and stand-alone units interchangably.
   *
   * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
   *    the single quote characters (see below).
   *    If the sequence is longer than listed in table:
   *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
   *      as wide as the sequence
   *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
   *      These variations are marked with "2" in the last column of the table.
   *
   * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
   *    These tokens represent the shortest form of the quarter.
   *
   * 4. The main difference between `y` and `u` patterns are B.C. years:
   *
   *    | Year | `y` | `u` |
   *    |------|-----|-----|
   *    | AC 1 |   1 |   1 |
   *    | BC 1 |   1 |   0 |
   *    | BC 2 |   2 |  -1 |
   *
   *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
   *
   *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
   *
   *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
   *
   *    while `uu` will just assign the year as is:
   *
   *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
   *
   *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
   *
   *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
   *    except local week-numbering years are dependent on `options.weekStartsOn`
   *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)
   *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).
   *
   * 5. These patterns are not in the Unicode Technical Standard #35:
   *    - `i`: ISO day of week
   *    - `I`: ISO week of year
   *    - `R`: ISO week-numbering year
   *    - `o`: ordinal number modifier
   *    - `P`: long localized date
   *    - `p`: long localized time
   *
   * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
   *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
   *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
   *    on the given locale.
   *
   *    using `en-US` locale: `P` => `MM/dd/yyyy`
   *    using `en-US` locale: `p` => `hh:mm a`
   *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
   *    using `pt-BR` locale: `p` => `HH:mm`
   *
   * Values will be assigned to the date in the descending order of its unit's priority.
   * Units of an equal priority overwrite each other in the order of appearance.
   *
   * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
   * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
   *
   * `referenceDate` must be passed for correct work of the function.
   * If you're not sure which `referenceDate` to supply, create a new instance of Date:
   * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
   * In this case parsing will be done in the context of the current date.
   * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
   * then `Invalid Date` will be returned.
   *
   * The result may vary by locale.
   *
   * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
   *
   * If parsing failed, `Invalid Date` will be returned.
   * Invalid Date is a Date, whose time value is NaN.
   * Time value of Date: http://es5.github.io/#x15.9.1.1
   *
   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
   *
   * @param dateStr - The string to parse
   * @param formatStr - The string of tokens
   * @param referenceDate - defines values missing from the parsed dateString
   * @param options - An object with options.
   *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   *
   * @returns The parsed date
   *
   * @throws `options.locale` must contain `match` property
   * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
   * @throws format string contains an unescaped latin alphabet character
   *
   * @example
   * // Parse 11 February 2014 from middle-endian format:
   * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
   * //=> Tue Feb 11 2014 00:00:00
   *
   * @example
   * // Parse 28th of February in Esperanto locale in the context of 2010 year:
   * import eo from 'date-fns/locale/eo'
   * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
   *   locale: eo
   * })
   * //=> Sun Feb 28 2010 00:00:00
   */
  function parse(dateStr, formatStr, referenceDate, options) {
    const defaultOptions = getDefaultOptions();
    const locale = options?.locale ?? defaultOptions.locale ?? enUS;

    const firstWeekContainsDate =
      options?.firstWeekContainsDate ??
      options?.locale?.options?.firstWeekContainsDate ??
      defaultOptions.firstWeekContainsDate ??
      defaultOptions.locale?.options?.firstWeekContainsDate ??
      1;

    const weekStartsOn =
      options?.weekStartsOn ??
      options?.locale?.options?.weekStartsOn ??
      defaultOptions.weekStartsOn ??
      defaultOptions.locale?.options?.weekStartsOn ??
      0;

    if (formatStr === "") {
      if (dateStr === "") {
        return toDate(referenceDate);
      } else {
        return constructFrom(referenceDate, NaN);
      }
    }

    const subFnOptions = {
      firstWeekContainsDate,
      weekStartsOn,
      locale,
    };

    // If timezone isn't specified, it will be set to the system timezone
    const setters = [new DateToSystemTimezoneSetter()];

    const tokens = formatStr
      .match(longFormattingTokensRegExp)
      .map((substring) => {
        const firstCharacter = substring[0];
        if (firstCharacter in longFormatters) {
          const longFormatter = longFormatters[firstCharacter];
          return longFormatter(substring, locale.formatLong);
        }
        return substring;
      })
      .join("")
      .match(formattingTokensRegExp);

    const usedTokens = [];

    for (let token of tokens) {
      if (
        !options?.useAdditionalWeekYearTokens &&
        isProtectedWeekYearToken(token)
      ) {
        warnOrThrowProtectedError(token, formatStr, dateStr);
      }
      if (
        !options?.useAdditionalDayOfYearTokens &&
        isProtectedDayOfYearToken(token)
      ) {
        warnOrThrowProtectedError(token, formatStr, dateStr);
      }

      const firstCharacter = token[0];
      const parser = parsers[firstCharacter];
      if (parser) {
        const { incompatibleTokens } = parser;
        if (Array.isArray(incompatibleTokens)) {
          const incompatibleToken = usedTokens.find(
            (usedToken) =>
              incompatibleTokens.includes(usedToken.token) ||
              usedToken.token === firstCharacter,
          );
          if (incompatibleToken) {
            throw new RangeError(
              `The format string mustn't contain \`${incompatibleToken.fullToken}\` and \`${token}\` at the same time`,
            );
          }
        } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
          throw new RangeError(
            `The format string mustn't contain \`${token}\` and any other token at the same time`,
          );
        }

        usedTokens.push({ token: firstCharacter, fullToken: token });

        const parseResult = parser.run(
          dateStr,
          token,
          locale.match,
          subFnOptions,
        );

        if (!parseResult) {
          return constructFrom(referenceDate, NaN);
        }

        setters.push(parseResult.setter);

        dateStr = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError(
            "Format string contains an unescaped latin alphabet character `" +
              firstCharacter +
              "`",
          );
        }

        // Replace two single quote characters with one single quote character
        if (token === "''") {
          token = "'";
        } else if (firstCharacter === "'") {
          token = cleanEscapedString(token);
        }

        // Cut token from string, or, if string doesn't match the token, return Invalid Date
        if (dateStr.indexOf(token) === 0) {
          dateStr = dateStr.slice(token.length);
        } else {
          return constructFrom(referenceDate, NaN);
        }
      }
    }

    // Check if the remaining input contains something other than whitespace
    if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {
      return constructFrom(referenceDate, NaN);
    }

    const uniquePrioritySetters = setters
      .map((setter) => setter.priority)
      .sort((a, b) => b - a)
      .filter((priority, index, array) => array.indexOf(priority) === index)
      .map((priority) =>
        setters
          .filter((setter) => setter.priority === priority)
          .sort((a, b) => b.subPriority - a.subPriority),
      )
      .map((setterArray) => setterArray[0]);

    let date = toDate(referenceDate);

    if (isNaN(date.getTime())) {
      return constructFrom(referenceDate, NaN);
    }

    const flags = {};
    for (const setter of uniquePrioritySetters) {
      if (!setter.validate(date, subFnOptions)) {
        return constructFrom(referenceDate, NaN);
      }

      const result = setter.set(date, flags, subFnOptions);
      // Result is tuple (date, flags)
      if (Array.isArray(result)) {
        date = result[0];
        Object.assign(flags, result[1]);
        // Result is date
      } else {
        date = result;
      }
    }

    return constructFrom(referenceDate, date);
  }

  function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
  }

  const DATE_PATTERNS = {
      "DD/MM/YYYY": {
          imPattern: "`dd{/}`mm{/}`yyyy",
          imRangePattern: "`dd{/}`mm{/}`yyyy - `DD{/}`MM{/}`YYYY",
          fnsPattern: "dd/MM/yyyy"
      },
      "MM/DD/YYYY": {
          imPattern: "`mm{/}`dd{/}`yyyy",
          imRangePattern: "`mm{/}`dd{/}`yyyy - `MM{/}`DD{/}`YYYY",
          fnsPattern: "MM/dd/yyyy"
      },
      "YYYY/MM/DD": {
          imPattern: "`yyyy{/}`mm{/}`dd",
          imRangePattern: "`yyyy{/}`mm{/}`dd - `YYYY{/}`MM{/}`DD",
          fnsPattern: "yyyy/MM/dd"
      }
  };
  /**
   * @description - creates calendar's year view years array with context of
   * datepicker's displayDate and current year
   * Fixes current year to the start of array
   */
  const createYearViewArray = (displayDate, currentYear) => {
      // keeping the year range position to be always fixed by setting current year to the first element of the calendar
      const displayYear = displayDate.getFullYear();
      const remainder = (displayYear - currentYear) % 12;
      const yearsPosition = remainder < 0 ? 12 + remainder : remainder;
      const yearArray = [];
      const startLimit = displayYear - yearsPosition;
      const endLimit = displayYear - yearsPosition + 12 - 1; // -1 to match the index of the years (index starts from 0)
      for (let i = startLimit; i < endLimit + 1; i++) {
          yearArray.push(i);
      }
      return yearArray;
  };
  const sanitizedNextMonth = (d) => {
      const month = d.getMonth();
      const year = d.getFullYear();
      const date = d.getDate();
      const nextMonthDate = new Date(year, month + 1);
      const numberOfDaysNextMonth = getDaysInMonth(nextMonthDate);
      if (isLastDayOfMonth(d) && numberOfDaysNextMonth < date) {
          return lastDayOfMonth(nextMonthDate);
      }
      else {
          return new Date(year, month + 1, date);
      }
  };
  const sanitizedPreviousMonth = (d) => {
      const month = d.getMonth();
      const year = d.getFullYear();
      const date = d.getDate();
      const prevMonthDate = new Date(year, month - 1);
      const numberOfDaysPrevMonth = getDaysInMonth(prevMonthDate);
      if (isLastDayOfMonth(d) && numberOfDaysPrevMonth < date) {
          return lastDayOfMonth(prevMonthDate);
      }
      else {
          return new Date(year, month - 1, date);
      }
  };
  const setTimeToNoon = (date) => {
      const newDate = new Date(date);
      newDate.setHours(12);
      newDate.setMinutes(0);
      newDate.setSeconds(0);
      newDate.setMilliseconds(0);
      return newDate;
  };

  var css_248z$E = css`.datepicker-body{color:var(--sgds-form-color-default);display:flex;justify-content:center}table{border-collapse:collapse;text-align:center}.monthpicker,.yearpicker{display:grid;grid-template-columns:repeat(3,6rem);grid-template-rows:repeat(4,2.5rem)}button.month,button.year{background-color:transparent;border:0;border-radius:var(--sgds-form-border-radius-sm);line-height:var(--sgds-line-height-min);padding:0;position:relative}button.month.active:not(.selected-ends),button.year.active:not(.selected-ends),td[data-day].active:not(.selected-ends){background-color:var(--sgds-primary-surface-translucent);border-radius:0;cursor:pointer}button.month:hover:not(.active),button.year:hover:not(.active),td[data-day]:hover:not(.disabled):not(.selected-ends):not(.active){background-color:var(--sgds-bg-translucent-subtle);cursor:pointer}button.month:focus:not(.active),button.year:focus:not(.active),td[data-day]:focus:not(.disabled):not(.selected-ends):not(.active){background-color:var(--sgds-bg-translucent-subtle)}button.month:focus,button.year:focus,td[data-day]:focus{outline:var(--sgds-form-border-radius-sm) solid var(--sgds-blue-400)}button.month.active:not(.selected-ends):focus,button.year.active:not(.selected-ends):focus,td[data-day].active:not(.selected-ends):focus{border-radius:var(--sgds-form-border-radius-sm)}button.year.active{background-color:var(--sgds-primary-surface-translucent);cursor:pointer}td,th{border-radius:var(--sgds-form-border-radius-sm);height:var(--sgds-form-height-lg);line-height:var(--sgds-line-height-min);padding:0;position:relative;width:var(--sgds-form-width-md)}th{font-weight:var(--sgds-font-weight-semibold)}td[data-day]{cursor:pointer}button.month.active.selected-ends,button.year.active.selected-ends,td[data-day].active.selected-ends{background-color:var(--sgds-form-primary-surface-default);color:var(--sgds-form-color-fixed-light)}button.month.active.selected-ends:focus,button.month.active.selected-ends:hover,button.year.active.selected-ends:focus,button.year.active.selected-ends:hover,td[data-day].active.selected-ends:focus,td[data-day].active.selected-ends:hover{background-color:var(--sgds-form-primary-surface-emphasis)}td[data-day].disabled{cursor:not-allowed;opacity:var(--sgds-opacity-50)}.today{align-items:center;display:flex;flex-direction:column;justify-content:center}.today:after{background-color:var(--sgds-form-primary-surface-default);bottom:6px;content:".";line-height:4px;-webkit-mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='4' height='4' fill='none'%3E%3Ccircle cx='2' cy='2' r='2' fill='%235A42C0'/%3E%3C/svg%3E");mask-image:url("data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='4' height='4' fill='none'%3E%3Ccircle cx='2' cy='2' r='2' fill='%235A42C0'/%3E%3C/svg%3E");-webkit-mask-position:center;mask-position:center;-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat;position:absolute;width:4px}.today.active.selected-ends:after{background-color:var(--sgds-form-color-inverse)}`;

  const TODAY_DATE = new Date();
  const keyPressAction = {
      ArrowUp: {
          days: -7,
          months: -3,
          years: -3
      },
      ArrowDown: {
          days: 7,
          months: 3,
          years: 3
      },
      ArrowRight: {
          days: 1,
          months: 1,
          years: 1
      },
      ArrowLeft: {
          days: -1,
          months: -1,
          years: -1
      }
  };
  class DatepickerCalendar extends SgdsElement {
      constructor() {
          super(...arguments);
          /** @internal */
          this.selectedDate = [];
          /** @internal */
          this.mode = "single";
      }
      /**Shifts focus from Input to Calendar */
      focusOnCalendar(toBlurEl) {
          toBlurEl.blur();
          this._focusOnCalendarCell();
      }
      connectedCallback() {
          super.connectedCallback();
          this.addEventListener("keydown", this._handleKeyPress);
          /** Prevent validation from happening when navigating the calendar */
          this.addEventListener("blur", e => e.stopPropagation());
      }
      updated() {
          /** For KeyboardNavigation (switching months) and ClickNavigation:
           * Runs after render has completed and td of next month has appeared.
           * For the case when calendar view changes to the next month
           * */
          if (this.focusedTabIndex === 3) {
              this._focusOnCalendarCell();
          }
      }
      _updateFocusedDate() {
          this.focusedDate = setTimeToNoon(this.displayDate);
          if (this.focusedDate.getFullYear() < 1900) {
              this.focusedDate.setFullYear(1900);
          }
      }
      _setFocusedDate(shift) {
          const currentFocusedDate = this.focusedDate.getDate();
          const currentFocusedMonth = this.focusedDate.getMonth();
          const currentFocusedYear = this.focusedDate.getFullYear();
          switch (this.view) {
              case "days": {
                  const newFocusedDate = setTimeToNoon(new Date(currentFocusedYear, currentFocusedMonth, currentFocusedDate + shift));
                  if (isAfter(newFocusedDate, new Date(0, 0, 1, 12)) || isEqual(newFocusedDate, new Date(0, 0, 1, 12)))
                      this.focusedDate = newFocusedDate;
                  break;
              }
              case "months": {
                  const newFocusedDate = setTimeToNoon(new Date(currentFocusedYear, currentFocusedMonth + shift, currentFocusedDate));
                  if (isAfter(newFocusedDate, new Date(0, 0, 1, 12)) || isEqual(newFocusedDate, new Date(0, 0, 1, 12))) {
                      this.focusedDate = newFocusedDate;
                  }
                  break;
              }
              case "years": {
                  const newFocusedDate = setTimeToNoon(new Date(currentFocusedYear + shift, currentFocusedMonth, currentFocusedDate));
                  if (newFocusedDate.getFullYear() >= 1900) {
                      this.focusedDate = newFocusedDate;
                  }
                  break;
              }
          }
      }
      _handleEnterDateKeyboard(event) {
          const targetElement = event.composedPath()[0];
          if (targetElement.classList.contains("disabled"))
              return;
          switch (this.view) {
              case "days":
                  this._onClickDay(event);
                  break;
              case "months": {
                  const { month } = targetElement.dataset;
                  this._onClickMonth(parseInt(month));
                  break;
              }
              case "years": {
                  const { year } = targetElement.dataset;
                  this._onClickYear(parseInt(year));
              }
          }
      }
      _handleKeyPress(event) {
          if (event.key === "Enter") {
              event.preventDefault();
              this._handleEnterDateKeyboard(event);
              return;
          }
          if (event.key === "Tab") {
              const targetEl = this._getFocusedTarget();
              if (this.focusedTabIndex !== 3)
                  targetEl.blur();
              return;
          }
          if (event.key.includes("Arrow")) {
              event.preventDefault();
              this._blurCalendarCell();
              const keyShiftObject = keyPressAction[event.key];
              const shiftNumber = keyShiftObject[this.view];
              this._setFocusedDate(shiftNumber);
              this._focusOnCalendarCell();
          }
      }
      _generateIncrementDates() {
          const start = setTimeToNoon(this.selectedDate[0]);
          if (this.selectedDate.length < 2) {
              return [start];
          }
          const end = setTimeToNoon(this.selectedDate[1]);
          const arr = [];
          if (start.getTime() < end.getTime()) {
              for (let dt = start; dt <= end; dt.setDate(dt.getDate() + 1)) {
                  arr.push(new Date(dt));
              }
          }
          else {
              for (let dt = end; dt <= start; dt.setDate(dt.getDate() + 1)) {
                  arr.push(new Date(dt));
              }
          }
          return arr;
      }
      _onClickDay(event) {
          const { day, date } = event.composedPath()[0].dataset;
          const displayDateClone = new Date(this.displayDate);
          displayDateClone.setDate(parseInt(day));
          /** update new focused date for mouse click */
          if (event.type === "click") {
              this.focusedDate = setTimeToNoon(new Date(date));
          }
          if (this.mode === "single") {
              // Single mode: Select a single date
              this.selectedDate = [displayDateClone];
              // Emit event with selected date
              this.emit("sgds-selectdates", { detail: this.selectedDate });
          }
          else if (this.mode === "range") {
              // Range mode: Select a range of dates
              const selectedDates = [...this.selectedDate];
              if (selectedDates.length === 0 || selectedDates.length === 2) {
                  // No dates selected yet or both dates already selected,
                  // start a new range by clearing the selected dates array
                  selectedDates.length = 0;
              }
              // Add the selected date to the range
              selectedDates.push(displayDateClone);
              // Update the selectedDate property
              this.selectedDate = selectedDates;
              // Emit event with the range of selected dates
              this.emit("sgds-selectdates", { detail: this.selectedDate });
          }
          // Check if the selected date is before minDate or after maxDate
          const minimumDate = this.minDate ? setTimeToNoon(new Date(this.minDate)) : null;
          const maximumDate = this.maxDate ? setTimeToNoon(new Date(this.maxDate)) : null;
          const selectedDate = setTimeToNoon(displayDateClone);
          if ((minimumDate && selectedDate < minimumDate) || (maximumDate && selectedDate > maximumDate)) {
              event.stopPropagation();
              event.preventDefault();
          }
      }
      _onClickMonth(month, year = this.focusedDate.getFullYear()) {
          const displayDateClone = new Date(this.displayDate);
          this.view = "days";
          displayDateClone.setMonth(month);
          displayDateClone.setFullYear(year);
          this.displayDate = displayDateClone;
          this.emit("sgds-view", { detail: this.view });
          //once clicked, should change view to days, and hold value and change view
          this.emit("sgds-selectmonth", { detail: this.displayDate });
      }
      _onClickYear(year) {
          const displayDateClone = new Date(this.displayDate);
          displayDateClone.setFullYear(year);
          this.displayDate = displayDateClone;
          this.view = "months";
          this.emit("sgds-view", { detail: this.view });
          this.emit("sgds-selectyear", { detail: this.displayDate });
      }
      _getFocusedTarget() {
          const queryObj = {
              days: `td[data-date="${this.focusedDate.toISOString()}"]`,
              months: `button[data-month="${this.focusedDate.getMonth()}"][data-year="${this.focusedDate.getFullYear()}"]`,
              years: `button[data-year="${this.focusedDate.getFullYear()}"]`
          };
          const queryString = queryObj[this.view];
          const targetEl = this.shadowRoot.querySelector(`${queryString}`);
          return targetEl;
      }
      _blurCalendarCell() {
          const targetEl = this._getFocusedTarget();
          targetEl.setAttribute("tabindex", "-1");
          targetEl.blur();
      }
      _focusOnCalendarCell() {
          const targetEl = this._getFocusedTarget();
          if (targetEl) {
              targetEl.setAttribute("tabindex", "3");
              targetEl.focus();
              this.emit("sgds-update-focus", { detail: this.focusedDate });
          }
          else {
              /** Change month view */
              this.emit("sgds-change-calendar", { detail: this.focusedDate });
          }
      }
      _generateDays() {
          const selectedDates = this.selectedDate.map(d => setTimeToNoon(d));
          const rangeSelectedDates = this._generateIncrementDates();
          const minimumDate = this.minDate ? setTimeToNoon(new Date(this.minDate)) : null;
          const maximumDate = this.maxDate ? setTimeToNoon(new Date(this.maxDate)) : null;
          const year = this.displayDate.getFullYear();
          const month = this.displayDate.getMonth();
          const firstDateOfMonth = new Date(year, month, 1);
          const startingDayOfMonth = firstDateOfMonth.getDay();
          let monthLength = DatepickerCalendar.daysInMonth[month];
          if (month === 1) {
              if ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0) {
                  monthLength = 29;
              }
          }
          const weeks = [];
          let day = 1;
          for (let i = 0; i < 9; i++) {
              const week = [];
              for (let j = 0; j <= 6; j++) {
                  if (day <= monthLength && (i > 0 || j >= startingDayOfMonth)) {
                      const dateObj = new Date(year, month, day, 12, 0, 0, 0);
                      const dateStr = dateObj.toISOString();
                      const beforeMinDate = minimumDate && Date.parse(dateStr) < Date.parse(minimumDate.toISOString());
                      const afterMinDate = maximumDate && Date.parse(dateStr) > Date.parse(maximumDate.toISOString());
                      const clickHandler = beforeMinDate || afterMinDate ? undefined : this._onClickDay;
                      const isCurrentMonth = TODAY_DATE.getMonth() === this.displayDate.getMonth();
                      const isCurrentYear = TODAY_DATE.getFullYear() === this.displayDate.getFullYear();
                      const isCurrentDay = TODAY_DATE.getDate() === day;
                      const isSelected = selectedDates.length > 0 &&
                          rangeSelectedDates.some(d => Date.parse(dateStr) === Date.parse(d.toISOString()));
                      const isFirstSelectedDate = selectedDates.length > 0 && rangeSelectedDates[0].toISOString() === dateStr;
                      const isLastSelectedDate = selectedDates.length > 1 && rangeSelectedDates[rangeSelectedDates.length - 1].toISOString() === dateStr;
                      const ariaLabel = `${isCurrentDay && isCurrentMonth && isCurrentYear ? "Today's date, " : ""}` + format(dateObj, "PPPP");
                      week.push(html$1 `<td
              key=${j}
              data-date=${dateStr}
              data-day=${day}
              aria-label=${ariaLabel}
              aria-current=${ifDefined(isCurrentDay && isCurrentMonth && isCurrentYear ? "date" : undefined)}
              class=${classMap({
                        today: isCurrentDay && isCurrentMonth && isCurrentYear,
                        "selected-ends": isFirstSelectedDate || isLastSelectedDate,
                        active: isSelected,
                        disabled: beforeMinDate || afterMinDate
                    })}
              @click=${clickHandler}
              aria-selected=${ifDefined(isSelected ? "true" : undefined)}
              tabindex=${this.focusedDate === new Date(dateStr) ? "3" : "-1"}
              ?disabled=${beforeMinDate || afterMinDate}
              aria-disabled=${ifDefined(beforeMinDate || afterMinDate ? "true" : undefined)}
              role="button"
            >
              ${day}
            </td>`);
                      day++;
                  }
                  else {
                      week.push(html$1 `<td key=${j}></td>`);
                  }
              }
              weeks.push(html$1 `<tr key=${i}>
          ${week}
        </tr>`);
              if (day > monthLength) {
                  break;
              }
          }
          const dayView = html$1 `
      <table role="grid">
        <thead>
          <tr>
            ${DatepickerCalendar.DAY_LABELS.map((label, index) => html$1 ` <th key=${index} abbr=${label} scope="col">${label.slice(0, 3)}</th> `)}
          </tr>
        </thead>
        <tbody>
          ${weeks}
        </tbody>
      </table>
    `;
          return dayView;
      }
      _generateMonths() {
          const rangeDates = this._generateIncrementDates();
          const selectedTime = rangeDates.map(e => setTimeToNoon(new Date(e.getFullYear(), e.getMonth())).getTime());
          const year = this.displayDate.getFullYear();
          const monthView = html$1 `
      <div class="monthpicker">
        ${DatepickerCalendar.MONTHVIEW_LABELS.map((m, idx) => {
            const isCurrentMonth = idx === TODAY_DATE.getMonth() && year === TODAY_DATE.getFullYear();
            const time = setTimeToNoon(new Date(year, idx)).getTime();
            const isFirstSelectedMonth = rangeDates[0].getMonth() === idx;
            const isFirstSelectedYear = rangeDates[0].getFullYear() === year;
            const isLastSelectedMonth = rangeDates[rangeDates.length - 1].getMonth() === idx;
            const isLastSelectedYear = rangeDates[rangeDates.length - 1].getFullYear() === year;
            const ariaLabel = isCurrentMonth ? `Current month ${m} ${year}` : `${m} ${year}`;
            return html$1 ` <button
            class=${classMap({
                active: selectedTime.includes(time),
                today: isCurrentMonth,
                month: true,
                "selected-ends": (isFirstSelectedMonth && isFirstSelectedYear) || (isLastSelectedMonth && isLastSelectedYear)
            })}
            @click=${() => this._onClickMonth(idx)}
            data-month=${idx}
            data-year=${year}
            tabindex="3"
            aria-selected=${selectedTime.includes(time)}
            aria-label=${ariaLabel}
          >
            ${m.slice(0, 3)}
          </button>`;
        })}
      </div>
    `;
          return monthView;
      }
      _generateYears() {
          const selectedYears = this._generateIncrementDates().map(e => e.getFullYear());
          const CURRENT_YEAR = TODAY_DATE.getFullYear();
          const yearArray = createYearViewArray(this.displayDate, CURRENT_YEAR);
          const yearView = html$1 `
      <div class="sgds yearpicker">
        ${yearArray.map(y => {
            const isFirstSelectedYear = selectedYears[0] === y;
            const isLastSectedYear = selectedYears[selectedYears.length - 1] === y;
            return html$1 `
            <button
              class=${classMap({
                active: selectedYears.includes(y),
                year: true,
                today: CURRENT_YEAR === y,
                "selected-ends": isFirstSelectedYear || isLastSectedYear
            })}
              @click=${() => this._onClickYear(y)}
              data-year=${y}
              tabindex="3"
              ?disabled=${y < 1900}
              aria-selected=${selectedYears.includes(y)}
              aria-label=${ifDefined(CURRENT_YEAR === y ? `Current year, ${y}` : undefined)}
            >
              ${y}
            </button>
          `;
        })}
      </div>
    `;
          return yearView;
      }
      render() {
          let viewContent;
          switch (this.view) {
              case "days":
                  viewContent = html$1 ` ${this._generateDays()} `;
                  break;
              case "months":
                  viewContent = html$1 ` ${this._generateMonths()} `;
                  break;
              case "years":
                  viewContent = html$1 ` ${this._generateYears()} `;
                  break;
              default:
                  viewContent = html$1 ` ${this._generateDays()} `; // Set a default view
                  break;
          }
          return html$1 ` <div class="datepicker-body">${viewContent}</div> `;
      }
  }
  DatepickerCalendar.styles = [css_248z$E];
  /** @internal */
  DatepickerCalendar.DAY_LABELS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  /** @internal */
  DatepickerCalendar.daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  /** @internal */
  DatepickerCalendar.MONTHVIEW_LABELS = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
  ];
  __decorate([
      property({ type: Array })
  ], DatepickerCalendar.prototype, "selectedDate", void 0);
  __decorate([
      property({ attribute: false })
  ], DatepickerCalendar.prototype, "displayDate", void 0);
  __decorate([
      property({ type: String })
  ], DatepickerCalendar.prototype, "minDate", void 0);
  __decorate([
      property({ type: String })
  ], DatepickerCalendar.prototype, "maxDate", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], DatepickerCalendar.prototype, "mode", void 0);
  __decorate([
      property()
  ], DatepickerCalendar.prototype, "view", void 0);
  __decorate([
      property({ type: Boolean })
  ], DatepickerCalendar.prototype, "show", void 0);
  __decorate([
      property()
  ], DatepickerCalendar.prototype, "focusedTabIndex", void 0);
  __decorate([
      watch("displayDate")
  ], DatepickerCalendar.prototype, "_updateFocusedDate", null);

  var css_248z$D = css`:host{display:inline-block}.btn.btn-icon{display:flex;height:var(--sgds-dimension-48,56px);min-width:unset;padding:0;width:var(--sgds-dimension-48,56px)}.btn.btn-icon.btn-lg{font-size:var(--sgds-font-size-3);height:var(--sgds-dimension-56);min-width:unset;padding:0;width:var(--sgds-dimension-56)}.btn.btn-icon.btn-sm{font-size:var(--sgds-font-size-1);height:var(--sgds-dimension-40);min-width:unset;padding:0;width:var(--sgds-dimension-40)}`;

  /**
   * @summary An icon button is a user interface element that combines an icon and a button, serving as a clickable or tabbable component.
   *
   * @event sgds-blur - Emitted when the button is blurred.
   * @event sgds-focus - Emitted when the button is focused.
   */
  class SgdsIconButton extends ButtonElement {
      _assignIconSize(buttonSize) {
          if (buttonSize === "sm")
              return "md";
          if (buttonSize === "md")
              return "lg";
          if (buttonSize === "lg")
              return "xl";
      }
      render() {
          const isLink = this.href;
          const tag = isLink ? literal `a` : literal `button`;
          return html `
          <${tag}
            class="btn btn-icon${classMap({
            disabled: this.disabled,
            active: this.active,
            [`btn-${this.variant}`]: this.variant,
            [`btn-${this.size}`]: this.size
        })}"
            ?disabled=${ifDefined(isLink ? undefined : this.disabled)}
            type=${ifDefined(isLink ? undefined : "button")}
            href=${ifDefined(isLink ? this.href : undefined)}
            target=${ifDefined(isLink ? this.target : undefined)}
            download=${ifDefined(isLink ? this.download : undefined)}
            rel=${ifDefined(isLink && this.target === "_blank" ? "noreferrer noopener" : undefined)}
            role=${ifDefined(isLink ? "button" : undefined)}
            aria-disabled=${this.disabled ? "true" : "false"}
            tabindex=${this.disabled ? "-1" : "0"}
            @click=${this._handleClick}
            @focus=${this._handleFocus}
            @blur=${this._handleBlur}
            aria-label=${ifDefined(this.ariaLabel)}
          >
            <sgds-icon name=${ifDefined(this.name)} size=${ifDefined(this._assignIconSize(this.size))}></sgds-icon>
          </${tag}>
        `;
      }
  }
  SgdsIconButton.styles = [...ButtonElement.styles, css_248z$D];
  /** @internal */
  SgdsIconButton.dependencies = {
      "sgds-icon": SgdsIcon
  };
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsIconButton.prototype, "name", void 0);

  var css_248z$C = css`.datepicker-header{display:flex;gap:var(--sgds-form-gap-md)}sgds-button{--btn-font-weight:var(--sgds-font-weight-semibold)}`;

  class DatepickerHeader extends SgdsElement {
      constructor() {
          super(...arguments);
          /** @internal */
          this.selectedDate = [];
      }
      _handleFocusedTabIndexChange() {
          let buttonToFocus;
          switch (this.focusedTabIndex) {
              case 0:
                  buttonToFocus = this.shadowRoot.querySelector("sgds-icon-button[name='arrow-left']");
                  break;
              case 1:
                  buttonToFocus = this.shadowRoot.querySelector("sgds-button");
                  break;
              case 2:
                  buttonToFocus = this.shadowRoot.querySelector("sgds-icon-button[name='arrow-right']");
                  break;
              default:
                  return;
          }
          buttonToFocus.focus();
      }
      _changeView() {
          switch (this.view) {
              case "days":
                  this.view = "months";
                  break;
              case "months":
                  this.view = "years";
                  break;
          }
          this.emit("sgds-view", { detail: this.view }); // emit event to render the correct view
      }
      renderHeader(displayDate = this.displayDate, view = this.view) {
          if (view === "months") {
              return displayDate.getFullYear();
          }
          if (view === "years") {
              const CURRENT_YEAR = new Date().getFullYear();
              const displayYear = displayDate.getFullYear();
              const remainder = (displayYear - CURRENT_YEAR) % 12;
              const yearsPosition = remainder < 0 ? 12 + remainder : remainder;
              const startLimit = displayYear - yearsPosition;
              const endLimit = displayYear - yearsPosition + 12 - 1;
              return `${startLimit} - ${endLimit}`;
          }
          return `${MONTH_LABELS[displayDate.getMonth()]} ${displayDate.getFullYear()}`;
      }
      _renderHeaderTemplate() {
          return html$1 `${this.renderHeader()}`;
      }
      /** @internal */
      handleClickPrevious() {
          const { view, displayDate, focusedDate } = this;
          let newDisplayDate = new Date(displayDate);
          if (view === "months") {
              newDisplayDate.setFullYear(newDisplayDate.getFullYear() - 1);
          }
          else if (this.view === "years") {
              newDisplayDate.setFullYear(newDisplayDate.getFullYear() - 12);
          }
          else {
              /**
               * FocusedDate gets precedence over displayDate.
               *  This happens when the arrow keys are pressed to
               *  change focus date and user clicks the arrow buttons to
               * shift months
               */
              if (focusedDate.getDate() !== displayDate.getDate()) {
                  newDisplayDate = sanitizedPreviousMonth(focusedDate);
              }
              else {
                  newDisplayDate = sanitizedPreviousMonth(newDisplayDate);
              }
          }
          this.displayDate = newDisplayDate; // Update the displayDate property
          // emit event to render correct view
          this.emit("sgds-change-calendar", { detail: this.displayDate });
      }
      /** @internal */
      _handleClickNext() {
          const { view, displayDate, focusedDate } = this;
          let newDisplayDate = new Date(displayDate);
          if (view === "months") {
              newDisplayDate.setFullYear(newDisplayDate.getFullYear() + 1);
          }
          else if (this.view === "years") {
              newDisplayDate.setFullYear(newDisplayDate.getFullYear() + 12);
          }
          else {
              /** FocusedDate gets precedence over displayDate  */
              if (focusedDate.getDate() !== displayDate.getDate()) {
                  newDisplayDate = sanitizedNextMonth(focusedDate);
              }
              else {
                  newDisplayDate = sanitizedNextMonth(newDisplayDate);
              }
          }
          this.displayDate = newDisplayDate; // Update the displayDate property
          //emit event to render correct view
          this.emit("sgds-change-calendar", { detail: this.displayDate });
      }
      _removeCaret() {
          const displayYear = this.displayDate.getFullYear();
          const displayMonth = this.displayDate.getMonth();
          const displayMonthYear = new Date(displayYear, displayMonth);
          if (this.view === "months") {
              return displayYear <= 1900;
          }
          if (this.view === "years") {
              return displayYear < 1904;
          }
          return isEqual(displayMonthYear, new Date(0, 0, 1)) || isBefore(displayMonthYear, new Date(0, 0, 1));
      }
      _ariaLabelForNextBtn() {
          const nextBtnDate = {
              days: "Show next month",
              months: "Show next year",
              years: "Show next 12 years"
          };
          return nextBtnDate[this.view];
      }
      _ariaLabelForPrevBtn() {
          const prevBtnDate = {
              days: "Show previous month",
              months: "Show previous year",
              years: "Show previous 12 years"
          };
          return prevBtnDate[this.view];
      }
      _ariaLabelForHeaderBtn() {
          const message = {
              days: `Current view is days, click to show months in ${this.displayDate.getFullYear()}`,
              months: `Current view is months, click to show years between ${this.renderHeader(this.displayDate, "years")}`,
              years: `Current view is years`
          };
          return `${this.renderHeader()}. ${message[this.view]}`;
      }
      render() {
          return html$1 `
      <div class="datepicker-header dropdown-header" role="heading">
        <sgds-icon-button
          name="arrow-left"
          size="sm"
          variant="ghost"
          @click="${this.handleClickPrevious}"
          class=${classMap({ invisible: this._removeCaret() })}
          aria-label=${this._ariaLabelForPrevBtn()}
        >
        </sgds-icon-button>
        <sgds-button
          fullWidth
          variant="ghost"
          size="sm"
          @click=${this._changeView}
          class=${classMap({ disabled: this.view === "years" })}
          aria-disabled=${this.view === "years" ? "true" : "false"}
          aria-live="polite"
        >
          ${this._renderHeaderTemplate()}
        </sgds-button>
        <sgds-icon-button
          name="arrow-right"
          size="sm"
          variant="ghost"
          @click="${this._handleClickNext}"
          aria-label=${this._ariaLabelForNextBtn()}
        >
        </sgds-icon-button>
      </div>
    `;
      }
  }
  DatepickerHeader.styles = [css_248z$C];
  /** @internal */
  DatepickerHeader.dependencies = {
      "sgds-icon": SgdsIcon,
      "sgds-icon-button": SgdsIconButton,
      "sgds-button": SgdsButton
  };
  __decorate([
      property({ attribute: false })
  ], DatepickerHeader.prototype, "displayDate", void 0);
  __decorate([
      property({ attribute: false })
  ], DatepickerHeader.prototype, "focusedDate", void 0);
  __decorate([
      property({ attribute: false })
  ], DatepickerHeader.prototype, "selectedDate", void 0);
  __decorate([
      property()
  ], DatepickerHeader.prototype, "view", void 0);
  __decorate([
      property()
  ], DatepickerHeader.prototype, "focusedTabIndex", void 0);
  __decorate([
      watch("focusedTabIndex", { waitUntilFirstUpdate: true })
  ], DatepickerHeader.prototype, "_handleFocusedTabIndexChange", null);
  const MONTH_LABELS = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
  ];

  /** Checks if value is string */
  function isString(str) {
    return typeof str === 'string' || str instanceof String;
  }

  /** Checks if value is object */
  function isObject(obj) {
    var _obj$constructor;
    return typeof obj === 'object' && obj != null && (obj == null || (_obj$constructor = obj.constructor) == null ? void 0 : _obj$constructor.name) === 'Object';
  }
  function pick(obj, keys) {
    if (Array.isArray(keys)) return pick(obj, (_, k) => keys.includes(k));
    return Object.entries(obj).reduce((acc, _ref) => {
      let [k, v] = _ref;
      if (keys(v, k)) acc[k] = v;
      return acc;
    }, {});
  }

  /** Direction */
  const DIRECTION = {
    NONE: 'NONE',
    LEFT: 'LEFT',
    FORCE_LEFT: 'FORCE_LEFT',
    RIGHT: 'RIGHT',
    FORCE_RIGHT: 'FORCE_RIGHT'
  };

  /** Direction */

  function forceDirection(direction) {
    switch (direction) {
      case DIRECTION.LEFT:
        return DIRECTION.FORCE_LEFT;
      case DIRECTION.RIGHT:
        return DIRECTION.FORCE_RIGHT;
      default:
        return direction;
    }
  }

  /** Escapes regular expression control chars */
  function escapeRegExp(str) {
    return str.replace(/([.*+?^=!:${}()|[\]/\\])/g, '\\$1');
  }

  // cloned from https://github.com/epoberezkin/fast-deep-equal with small changes
  function objectIncludes(b, a) {
    if (a === b) return true;
    const arrA = Array.isArray(a),
      arrB = Array.isArray(b);
    let i;
    if (arrA && arrB) {
      if (a.length != b.length) return false;
      for (i = 0; i < a.length; i++) if (!objectIncludes(a[i], b[i])) return false;
      return true;
    }
    if (arrA != arrB) return false;
    if (a && b && typeof a === 'object' && typeof b === 'object') {
      const dateA = a instanceof Date,
        dateB = b instanceof Date;
      if (dateA && dateB) return a.getTime() == b.getTime();
      if (dateA != dateB) return false;
      const regexpA = a instanceof RegExp,
        regexpB = b instanceof RegExp;
      if (regexpA && regexpB) return a.toString() == b.toString();
      if (regexpA != regexpB) return false;
      const keys = Object.keys(a);
      // if (keys.length !== Object.keys(b).length) return false;

      for (i = 0; i < keys.length; i++) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
      for (i = 0; i < keys.length; i++) if (!objectIncludes(b[keys[i]], a[keys[i]])) return false;
      return true;
    } else if (a && b && typeof a === 'function' && typeof b === 'function') {
      return a.toString() === b.toString();
    }
    return false;
  }

  /** Provides details of changing input */
  class ActionDetails {
    /** Current input value */

    /** Current cursor position */

    /** Old input value */

    /** Old selection */

    constructor(opts) {
      Object.assign(this, opts);

      // double check if left part was changed (autofilling, other non-standard input triggers)
      while (this.value.slice(0, this.startChangePos) !== this.oldValue.slice(0, this.startChangePos)) {
        --this.oldSelection.start;
      }
      if (this.insertedCount) {
        // double check right part
        while (this.value.slice(this.cursorPos) !== this.oldValue.slice(this.oldSelection.end)) {
          if (this.value.length - this.cursorPos < this.oldValue.length - this.oldSelection.end) ++this.oldSelection.end;else ++this.cursorPos;
        }
      }
    }

    /** Start changing position */
    get startChangePos() {
      return Math.min(this.cursorPos, this.oldSelection.start);
    }

    /** Inserted symbols count */
    get insertedCount() {
      return this.cursorPos - this.startChangePos;
    }

    /** Inserted symbols */
    get inserted() {
      return this.value.substr(this.startChangePos, this.insertedCount);
    }

    /** Removed symbols count */
    get removedCount() {
      // Math.max for opposite operation
      return Math.max(this.oldSelection.end - this.startChangePos ||
      // for Delete
      this.oldValue.length - this.value.length, 0);
    }

    /** Removed symbols */
    get removed() {
      return this.oldValue.substr(this.startChangePos, this.removedCount);
    }

    /** Unchanged head symbols */
    get head() {
      return this.value.substring(0, this.startChangePos);
    }

    /** Unchanged tail symbols */
    get tail() {
      return this.value.substring(this.startChangePos + this.insertedCount);
    }

    /** Remove direction */
    get removeDirection() {
      if (!this.removedCount || this.insertedCount) return DIRECTION.NONE;

      // align right if delete at right
      return (this.oldSelection.end === this.cursorPos || this.oldSelection.start === this.cursorPos) &&
      // if not range removed (event with backspace)
      this.oldSelection.end === this.oldSelection.start ? DIRECTION.RIGHT : DIRECTION.LEFT;
    }
  }

  /** Applies mask on element */
  function IMask(el, opts) {
    // currently available only for input-like elements
    return new IMask.InputMask(el, opts);
  }

  // TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754
  // export function maskedClass(mask: string): typeof MaskedPattern;
  // export function maskedClass(mask: DateConstructor): typeof MaskedDate;
  // export function maskedClass(mask: NumberConstructor): typeof MaskedNumber;
  // export function maskedClass(mask: Array<any> | ArrayConstructor): typeof MaskedDynamic;
  // export function maskedClass(mask: MaskedDate): typeof MaskedDate;
  // export function maskedClass(mask: MaskedNumber): typeof MaskedNumber;
  // export function maskedClass(mask: MaskedEnum): typeof MaskedEnum;
  // export function maskedClass(mask: MaskedRange): typeof MaskedRange;
  // export function maskedClass(mask: MaskedRegExp): typeof MaskedRegExp;
  // export function maskedClass(mask: MaskedFunction): typeof MaskedFunction;
  // export function maskedClass(mask: MaskedPattern): typeof MaskedPattern;
  // export function maskedClass(mask: MaskedDynamic): typeof MaskedDynamic;
  // export function maskedClass(mask: Masked): typeof Masked;
  // export function maskedClass(mask: typeof Masked): typeof Masked;
  // export function maskedClass(mask: typeof MaskedDate): typeof MaskedDate;
  // export function maskedClass(mask: typeof MaskedNumber): typeof MaskedNumber;
  // export function maskedClass(mask: typeof MaskedEnum): typeof MaskedEnum;
  // export function maskedClass(mask: typeof MaskedRange): typeof MaskedRange;
  // export function maskedClass(mask: typeof MaskedRegExp): typeof MaskedRegExp;
  // export function maskedClass(mask: typeof MaskedFunction): typeof MaskedFunction;
  // export function maskedClass(mask: typeof MaskedPattern): typeof MaskedPattern;
  // export function maskedClass(mask: typeof MaskedDynamic): typeof MaskedDynamic;
  // export function maskedClass<Mask extends typeof Masked> (mask: Mask): Mask;
  // export function maskedClass(mask: RegExp): typeof MaskedRegExp;
  // export function maskedClass(mask: (value: string, ...args: any[]) => boolean): typeof MaskedFunction;

  /** Get Masked class by mask type */
  function maskedClass(mask) /* TODO */{
    if (mask == null) throw new Error('mask property should be defined');
    if (mask instanceof RegExp) return IMask.MaskedRegExp;
    if (isString(mask)) return IMask.MaskedPattern;
    if (mask === Date) return IMask.MaskedDate;
    if (mask === Number) return IMask.MaskedNumber;
    if (Array.isArray(mask) || mask === Array) return IMask.MaskedDynamic;
    if (IMask.Masked && mask.prototype instanceof IMask.Masked) return mask;
    if (IMask.Masked && mask instanceof IMask.Masked) return mask.constructor;
    if (mask instanceof Function) return IMask.MaskedFunction;
    console.warn('Mask not found for mask', mask); // eslint-disable-line no-console
    return IMask.Masked;
  }
  function normalizeOpts(opts) {
    if (!opts) throw new Error('Options in not defined');
    if (IMask.Masked) {
      if (opts.prototype instanceof IMask.Masked) return {
        mask: opts
      };

      /*
        handle cases like:
        1) opts = Masked
        2) opts = { mask: Masked, ...instanceOpts }
      */
      const {
        mask = undefined,
        ...instanceOpts
      } = opts instanceof IMask.Masked ? {
        mask: opts
      } : isObject(opts) && opts.mask instanceof IMask.Masked ? opts : {};
      if (mask) {
        const _mask = mask.mask;
        return {
          ...pick(mask, (_, k) => !k.startsWith('_')),
          mask: mask.constructor,
          _mask,
          ...instanceOpts
        };
      }
    }
    if (!isObject(opts)) return {
      mask: opts
    };
    return {
      ...opts
    };
  }

  // TODO can't use overloads here because of https://github.com/microsoft/TypeScript/issues/50754

  // From masked
  // export default function createMask<Opts extends Masked, ReturnMasked=Opts> (opts: Opts): ReturnMasked;
  // // From masked class
  // export default function createMask<Opts extends MaskedOptions<typeof Masked>, ReturnMasked extends Masked=InstanceType<Opts['mask']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedDate>, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedNumber>, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedEnum>, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedRange>, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedRegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedFunction>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedPattern>, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<typeof MaskedDynamic>, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;
  // // From mask opts
  // export default function createMask<Opts extends MaskedOptions<Masked>, ReturnMasked=Opts extends MaskedOptions<infer M> ? M : never> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedNumberOptions, ReturnMasked extends MaskedNumber=MaskedNumber<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedDateFactoryOptions, ReturnMasked extends MaskedDate=MaskedDate<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedEnumOptions, ReturnMasked extends MaskedEnum=MaskedEnum<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedRangeOptions, ReturnMasked extends MaskedRange=MaskedRange<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedPatternOptions, ReturnMasked extends MaskedPattern=MaskedPattern<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedDynamicOptions, ReturnMasked extends MaskedDynamic=MaskedDynamic<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<RegExp>, ReturnMasked extends MaskedRegExp=MaskedRegExp<Opts['parent']>> (opts: Opts): ReturnMasked;
  // export default function createMask<Opts extends MaskedOptions<Function>, ReturnMasked extends MaskedFunction=MaskedFunction<Opts['parent']>> (opts: Opts): ReturnMasked;

  /** Creates new {@link Masked} depending on mask type */
  function createMask(opts) {
    if (IMask.Masked && opts instanceof IMask.Masked) return opts;
    const nOpts = normalizeOpts(opts);
    const MaskedClass = maskedClass(nOpts.mask);
    if (!MaskedClass) throw new Error("Masked class is not found for provided mask " + nOpts.mask + ", appropriate module needs to be imported manually before creating mask.");
    if (nOpts.mask === MaskedClass) delete nOpts.mask;
    if (nOpts._mask) {
      nOpts.mask = nOpts._mask;
      delete nOpts._mask;
    }
    return new MaskedClass(nOpts);
  }
  IMask.createMask = createMask;

  /**  Generic element API to use with mask */
  class MaskElement {
    /** */

    /** */

    /** */

    /** Safely returns selection start */
    get selectionStart() {
      let start;
      try {
        start = this._unsafeSelectionStart;
      } catch {}
      return start != null ? start : this.value.length;
    }

    /** Safely returns selection end */
    get selectionEnd() {
      let end;
      try {
        end = this._unsafeSelectionEnd;
      } catch {}
      return end != null ? end : this.value.length;
    }

    /** Safely sets element selection */
    select(start, end) {
      if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;
      try {
        this._unsafeSelect(start, end);
      } catch {}
    }

    /** */
    get isActive() {
      return false;
    }
    /** */

    /** */

    /** */
  }
  IMask.MaskElement = MaskElement;

  const KEY_Z = 90;
  const KEY_Y = 89;

  /** Bridge between HTMLElement and {@link Masked} */
  class HTMLMaskElement extends MaskElement {
    /** HTMLElement to use mask on */

    constructor(input) {
      super();
      this.input = input;
      this._onKeydown = this._onKeydown.bind(this);
      this._onInput = this._onInput.bind(this);
      this._onBeforeinput = this._onBeforeinput.bind(this);
      this._onCompositionEnd = this._onCompositionEnd.bind(this);
    }
    get rootElement() {
      var _this$input$getRootNo, _this$input$getRootNo2, _this$input;
      return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) == null ? void 0 : _this$input$getRootNo2.call(_this$input)) != null ? _this$input$getRootNo : document;
    }

    /** Is element in focus */
    get isActive() {
      return this.input === this.rootElement.activeElement;
    }

    /** Binds HTMLElement events to mask internal events */
    bindEvents(handlers) {
      this.input.addEventListener('keydown', this._onKeydown);
      this.input.addEventListener('input', this._onInput);
      this.input.addEventListener('beforeinput', this._onBeforeinput);
      this.input.addEventListener('compositionend', this._onCompositionEnd);
      this.input.addEventListener('drop', handlers.drop);
      this.input.addEventListener('click', handlers.click);
      this.input.addEventListener('focus', handlers.focus);
      this.input.addEventListener('blur', handlers.commit);
      this._handlers = handlers;
    }
    _onKeydown(e) {
      if (this._handlers.redo && (e.keyCode === KEY_Z && e.shiftKey && (e.metaKey || e.ctrlKey) || e.keyCode === KEY_Y && e.ctrlKey)) {
        e.preventDefault();
        return this._handlers.redo(e);
      }
      if (this._handlers.undo && e.keyCode === KEY_Z && (e.metaKey || e.ctrlKey)) {
        e.preventDefault();
        return this._handlers.undo(e);
      }
      if (!e.isComposing) this._handlers.selectionChange(e);
    }
    _onBeforeinput(e) {
      if (e.inputType === 'historyUndo' && this._handlers.undo) {
        e.preventDefault();
        return this._handlers.undo(e);
      }
      if (e.inputType === 'historyRedo' && this._handlers.redo) {
        e.preventDefault();
        return this._handlers.redo(e);
      }
    }
    _onCompositionEnd(e) {
      this._handlers.input(e);
    }
    _onInput(e) {
      if (!e.isComposing) this._handlers.input(e);
    }

    /** Unbinds HTMLElement events to mask internal events */
    unbindEvents() {
      this.input.removeEventListener('keydown', this._onKeydown);
      this.input.removeEventListener('input', this._onInput);
      this.input.removeEventListener('beforeinput', this._onBeforeinput);
      this.input.removeEventListener('compositionend', this._onCompositionEnd);
      this.input.removeEventListener('drop', this._handlers.drop);
      this.input.removeEventListener('click', this._handlers.click);
      this.input.removeEventListener('focus', this._handlers.focus);
      this.input.removeEventListener('blur', this._handlers.commit);
      this._handlers = {};
    }
  }
  IMask.HTMLMaskElement = HTMLMaskElement;

  /** Bridge between InputElement and {@link Masked} */
  class HTMLInputMaskElement extends HTMLMaskElement {
    /** InputElement to use mask on */

    constructor(input) {
      super(input);
      this.input = input;
    }

    /** Returns InputElement selection start */
    get _unsafeSelectionStart() {
      return this.input.selectionStart != null ? this.input.selectionStart : this.value.length;
    }

    /** Returns InputElement selection end */
    get _unsafeSelectionEnd() {
      return this.input.selectionEnd;
    }

    /** Sets InputElement selection */
    _unsafeSelect(start, end) {
      this.input.setSelectionRange(start, end);
    }
    get value() {
      return this.input.value;
    }
    set value(value) {
      this.input.value = value;
    }
  }
  IMask.HTMLMaskElement = HTMLMaskElement;

  class HTMLContenteditableMaskElement extends HTMLMaskElement {
    /** Returns HTMLElement selection start */
    get _unsafeSelectionStart() {
      const root = this.rootElement;
      const selection = root.getSelection && root.getSelection();
      const anchorOffset = selection && selection.anchorOffset;
      const focusOffset = selection && selection.focusOffset;
      if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {
        return anchorOffset;
      }
      return focusOffset;
    }

    /** Returns HTMLElement selection end */
    get _unsafeSelectionEnd() {
      const root = this.rootElement;
      const selection = root.getSelection && root.getSelection();
      const anchorOffset = selection && selection.anchorOffset;
      const focusOffset = selection && selection.focusOffset;
      if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {
        return anchorOffset;
      }
      return focusOffset;
    }

    /** Sets HTMLElement selection */
    _unsafeSelect(start, end) {
      if (!this.rootElement.createRange) return;
      const range = this.rootElement.createRange();
      range.setStart(this.input.firstChild || this.input, start);
      range.setEnd(this.input.lastChild || this.input, end);
      const root = this.rootElement;
      const selection = root.getSelection && root.getSelection();
      if (selection) {
        selection.removeAllRanges();
        selection.addRange(range);
      }
    }

    /** HTMLElement value */
    get value() {
      return this.input.textContent || '';
    }
    set value(value) {
      this.input.textContent = value;
    }
  }
  IMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;

  class InputHistory {
    constructor() {
      this.states = [];
      this.currentIndex = 0;
    }
    get currentState() {
      return this.states[this.currentIndex];
    }
    get isEmpty() {
      return this.states.length === 0;
    }
    push(state) {
      // if current index points before the last element then remove the future
      if (this.currentIndex < this.states.length - 1) this.states.length = this.currentIndex + 1;
      this.states.push(state);
      if (this.states.length > InputHistory.MAX_LENGTH) this.states.shift();
      this.currentIndex = this.states.length - 1;
    }
    go(steps) {
      this.currentIndex = Math.min(Math.max(this.currentIndex + steps, 0), this.states.length - 1);
      return this.currentState;
    }
    undo() {
      return this.go(-1);
    }
    redo() {
      return this.go(+1);
    }
    clear() {
      this.states.length = 0;
      this.currentIndex = 0;
    }
  }
  InputHistory.MAX_LENGTH = 100;

  /** Listens to element events and controls changes between element and {@link Masked} */
  class InputMask {
    /**
      View element
    */

    /** Internal {@link Masked} model */

    constructor(el, opts) {
      this.el = el instanceof MaskElement ? el : el.isContentEditable && el.tagName !== 'INPUT' && el.tagName !== 'TEXTAREA' ? new HTMLContenteditableMaskElement(el) : new HTMLInputMaskElement(el);
      this.masked = createMask(opts);
      this._listeners = {};
      this._value = '';
      this._unmaskedValue = '';
      this._rawInputValue = '';
      this.history = new InputHistory();
      this._saveSelection = this._saveSelection.bind(this);
      this._onInput = this._onInput.bind(this);
      this._onChange = this._onChange.bind(this);
      this._onDrop = this._onDrop.bind(this);
      this._onFocus = this._onFocus.bind(this);
      this._onClick = this._onClick.bind(this);
      this._onUndo = this._onUndo.bind(this);
      this._onRedo = this._onRedo.bind(this);
      this.alignCursor = this.alignCursor.bind(this);
      this.alignCursorFriendly = this.alignCursorFriendly.bind(this);
      this._bindEvents();

      // refresh
      this.updateValue();
      this._onChange();
    }
    maskEquals(mask) {
      var _this$masked;
      return mask == null || ((_this$masked = this.masked) == null ? void 0 : _this$masked.maskEquals(mask));
    }

    /** Masked */
    get mask() {
      return this.masked.mask;
    }
    set mask(mask) {
      if (this.maskEquals(mask)) return;
      if (!(mask instanceof IMask.Masked) && this.masked.constructor === maskedClass(mask)) {
        // TODO "any" no idea
        this.masked.updateOptions({
          mask
        });
        return;
      }
      const masked = mask instanceof IMask.Masked ? mask : createMask({
        mask
      });
      masked.unmaskedValue = this.masked.unmaskedValue;
      this.masked = masked;
    }

    /** Raw value */
    get value() {
      return this._value;
    }
    set value(str) {
      if (this.value === str) return;
      this.masked.value = str;
      this.updateControl('auto');
    }

    /** Unmasked value */
    get unmaskedValue() {
      return this._unmaskedValue;
    }
    set unmaskedValue(str) {
      if (this.unmaskedValue === str) return;
      this.masked.unmaskedValue = str;
      this.updateControl('auto');
    }

    /** Raw input value */
    get rawInputValue() {
      return this._rawInputValue;
    }
    set rawInputValue(str) {
      if (this.rawInputValue === str) return;
      this.masked.rawInputValue = str;
      this.updateControl();
      this.alignCursor();
    }

    /** Typed unmasked value */
    get typedValue() {
      return this.masked.typedValue;
    }
    set typedValue(val) {
      if (this.masked.typedValueEquals(val)) return;
      this.masked.typedValue = val;
      this.updateControl('auto');
    }

    /** Display value */
    get displayValue() {
      return this.masked.displayValue;
    }

    /** Starts listening to element events */
    _bindEvents() {
      this.el.bindEvents({
        selectionChange: this._saveSelection,
        input: this._onInput,
        drop: this._onDrop,
        click: this._onClick,
        focus: this._onFocus,
        commit: this._onChange,
        undo: this._onUndo,
        redo: this._onRedo
      });
    }

    /** Stops listening to element events */
    _unbindEvents() {
      if (this.el) this.el.unbindEvents();
    }

    /** Fires custom event */
    _fireEvent(ev, e) {
      const listeners = this._listeners[ev];
      if (!listeners) return;
      listeners.forEach(l => l(e));
    }

    /** Current selection start */
    get selectionStart() {
      return this._cursorChanging ? this._changingCursorPos : this.el.selectionStart;
    }

    /** Current cursor position */
    get cursorPos() {
      return this._cursorChanging ? this._changingCursorPos : this.el.selectionEnd;
    }
    set cursorPos(pos) {
      if (!this.el || !this.el.isActive) return;
      this.el.select(pos, pos);
      this._saveSelection();
    }

    /** Stores current selection */
    _saveSelection( /* ev */
    ) {
      if (this.displayValue !== this.el.value) {
        console.warn('Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly.'); // eslint-disable-line no-console
      }
      this._selection = {
        start: this.selectionStart,
        end: this.cursorPos
      };
    }

    /** Syncronizes model value from view */
    updateValue() {
      this.masked.value = this.el.value;
      this._value = this.masked.value;
      this._unmaskedValue = this.masked.unmaskedValue;
      this._rawInputValue = this.masked.rawInputValue;
    }

    /** Syncronizes view from model value, fires change events */
    updateControl(cursorPos) {
      const newUnmaskedValue = this.masked.unmaskedValue;
      const newValue = this.masked.value;
      const newRawInputValue = this.masked.rawInputValue;
      const newDisplayValue = this.displayValue;
      const isChanged = this.unmaskedValue !== newUnmaskedValue || this.value !== newValue || this._rawInputValue !== newRawInputValue;
      this._unmaskedValue = newUnmaskedValue;
      this._value = newValue;
      this._rawInputValue = newRawInputValue;
      if (this.el.value !== newDisplayValue) this.el.value = newDisplayValue;
      if (cursorPos === 'auto') this.alignCursor();else if (cursorPos != null) this.cursorPos = cursorPos;
      if (isChanged) this._fireChangeEvents();
      if (!this._historyChanging && (isChanged || this.history.isEmpty)) this.history.push({
        unmaskedValue: newUnmaskedValue,
        selection: {
          start: this.selectionStart,
          end: this.cursorPos
        }
      });
    }

    /** Updates options with deep equal check, recreates {@link Masked} model if mask type changes */
    updateOptions(opts) {
      const {
        mask,
        ...restOpts
      } = opts; // TODO types, yes, mask is optional

      const updateMask = !this.maskEquals(mask);
      const updateOpts = this.masked.optionsIsChanged(restOpts);
      if (updateMask) this.mask = mask;
      if (updateOpts) this.masked.updateOptions(restOpts); // TODO

      if (updateMask || updateOpts) this.updateControl();
    }

    /** Updates cursor */
    updateCursor(cursorPos) {
      if (cursorPos == null) return;
      this.cursorPos = cursorPos;

      // also queue change cursor for mobile browsers
      this._delayUpdateCursor(cursorPos);
    }

    /** Delays cursor update to support mobile browsers */
    _delayUpdateCursor(cursorPos) {
      this._abortUpdateCursor();
      this._changingCursorPos = cursorPos;
      this._cursorChanging = setTimeout(() => {
        if (!this.el) return; // if was destroyed
        this.cursorPos = this._changingCursorPos;
        this._abortUpdateCursor();
      }, 10);
    }

    /** Fires custom events */
    _fireChangeEvents() {
      this._fireEvent('accept', this._inputEvent);
      if (this.masked.isComplete) this._fireEvent('complete', this._inputEvent);
    }

    /** Aborts delayed cursor update */
    _abortUpdateCursor() {
      if (this._cursorChanging) {
        clearTimeout(this._cursorChanging);
        delete this._cursorChanging;
      }
    }

    /** Aligns cursor to nearest available position */
    alignCursor() {
      this.cursorPos = this.masked.nearestInputPos(this.masked.nearestInputPos(this.cursorPos, DIRECTION.LEFT));
    }

    /** Aligns cursor only if selection is empty */
    alignCursorFriendly() {
      if (this.selectionStart !== this.cursorPos) return; // skip if range is selected
      this.alignCursor();
    }

    /** Adds listener on custom event */
    on(ev, handler) {
      if (!this._listeners[ev]) this._listeners[ev] = [];
      this._listeners[ev].push(handler);
      return this;
    }

    /** Removes custom event listener */
    off(ev, handler) {
      if (!this._listeners[ev]) return this;
      if (!handler) {
        delete this._listeners[ev];
        return this;
      }
      const hIndex = this._listeners[ev].indexOf(handler);
      if (hIndex >= 0) this._listeners[ev].splice(hIndex, 1);
      return this;
    }

    /** Handles view input event */
    _onInput(e) {
      this._inputEvent = e;
      this._abortUpdateCursor();
      const details = new ActionDetails({
        // new state
        value: this.el.value,
        cursorPos: this.cursorPos,
        // old state
        oldValue: this.displayValue,
        oldSelection: this._selection
      });
      const oldRawValue = this.masked.rawInputValue;
      const offset = this.masked.splice(details.startChangePos, details.removed.length, details.inserted, details.removeDirection, {
        input: true,
        raw: true
      }).offset;

      // force align in remove direction only if no input chars were removed
      // otherwise we still need to align with NONE (to get out from fixed symbols for instance)
      const removeDirection = oldRawValue === this.masked.rawInputValue ? details.removeDirection : DIRECTION.NONE;
      let cursorPos = this.masked.nearestInputPos(details.startChangePos + offset, removeDirection);
      if (removeDirection !== DIRECTION.NONE) cursorPos = this.masked.nearestInputPos(cursorPos, DIRECTION.NONE);
      this.updateControl(cursorPos);
      delete this._inputEvent;
    }

    /** Handles view change event and commits model value */
    _onChange() {
      if (this.displayValue !== this.el.value) this.updateValue();
      this.masked.doCommit();
      this.updateControl();
      this._saveSelection();
    }

    /** Handles view drop event, prevents by default */
    _onDrop(ev) {
      ev.preventDefault();
      ev.stopPropagation();
    }

    /** Restore last selection on focus */
    _onFocus(ev) {
      this.alignCursorFriendly();
    }

    /** Restore last selection on focus */
    _onClick(ev) {
      this.alignCursorFriendly();
    }
    _onUndo() {
      this._applyHistoryState(this.history.undo());
    }
    _onRedo() {
      this._applyHistoryState(this.history.redo());
    }
    _applyHistoryState(state) {
      if (!state) return;
      this._historyChanging = true;
      this.unmaskedValue = state.unmaskedValue;
      this.el.select(state.selection.start, state.selection.end);
      this._saveSelection();
      this._historyChanging = false;
    }

    /** Unbind view events and removes element reference */
    destroy() {
      this._unbindEvents();
      this._listeners.length = 0;
      delete this.el;
    }
  }
  IMask.InputMask = InputMask;

  /** Provides details of changing model value */
  class ChangeDetails {
    /** Inserted symbols */

    /** Additional offset if any changes occurred before tail */

    /** Raw inserted is used by dynamic mask */

    /** Can skip chars */

    static normalize(prep) {
      return Array.isArray(prep) ? prep : [prep, new ChangeDetails()];
    }
    constructor(details) {
      Object.assign(this, {
        inserted: '',
        rawInserted: '',
        tailShift: 0,
        skip: false
      }, details);
    }

    /** Aggregate changes */
    aggregate(details) {
      this.inserted += details.inserted;
      this.rawInserted += details.rawInserted;
      this.tailShift += details.tailShift;
      this.skip = this.skip || details.skip;
      return this;
    }

    /** Total offset considering all changes */
    get offset() {
      return this.tailShift + this.inserted.length;
    }
    get consumed() {
      return Boolean(this.rawInserted) || this.skip;
    }
    equals(details) {
      return this.inserted === details.inserted && this.tailShift === details.tailShift && this.rawInserted === details.rawInserted && this.skip === details.skip;
    }
  }
  IMask.ChangeDetails = ChangeDetails;

  /** Provides details of continuous extracted tail */
  class ContinuousTailDetails {
    /** Tail value as string */

    /** Tail start position */

    /** Start position */

    constructor(value, from, stop) {
      if (value === void 0) {
        value = '';
      }
      if (from === void 0) {
        from = 0;
      }
      this.value = value;
      this.from = from;
      this.stop = stop;
    }
    toString() {
      return this.value;
    }
    extend(tail) {
      this.value += String(tail);
    }
    appendTo(masked) {
      return masked.append(this.toString(), {
        tail: true
      }).aggregate(masked._appendPlaceholder());
    }
    get state() {
      return {
        value: this.value,
        from: this.from,
        stop: this.stop
      };
    }
    set state(state) {
      Object.assign(this, state);
    }
    unshift(beforePos) {
      if (!this.value.length || beforePos != null && this.from >= beforePos) return '';
      const shiftChar = this.value[0];
      this.value = this.value.slice(1);
      return shiftChar;
    }
    shift() {
      if (!this.value.length) return '';
      const shiftChar = this.value[this.value.length - 1];
      this.value = this.value.slice(0, -1);
      return shiftChar;
    }
  }

  /** Append flags */

  /** Extract flags */

  // see https://github.com/microsoft/TypeScript/issues/6223

  /** Provides common masking stuff */
  class Masked {
    /** */

    /** */

    /** Transforms value before mask processing */

    /** Transforms each char before mask processing */

    /** Validates if value is acceptable */

    /** Does additional processing at the end of editing */

    /** Format typed value to string */

    /** Parse string to get typed value */

    /** Enable characters overwriting */

    /** */

    /** */

    /** */

    /** */

    constructor(opts) {
      this._value = '';
      this._update({
        ...Masked.DEFAULTS,
        ...opts
      });
      this._initialized = true;
    }

    /** Sets and applies new options */
    updateOptions(opts) {
      if (!this.optionsIsChanged(opts)) return;
      this.withValueRefresh(this._update.bind(this, opts));
    }

    /** Sets new options */
    _update(opts) {
      Object.assign(this, opts);
    }

    /** Mask state */
    get state() {
      return {
        _value: this.value,
        _rawInputValue: this.rawInputValue
      };
    }
    set state(state) {
      this._value = state._value;
    }

    /** Resets value */
    reset() {
      this._value = '';
    }
    get value() {
      return this._value;
    }
    set value(value) {
      this.resolve(value, {
        input: true
      });
    }

    /** Resolve new value */
    resolve(value, flags) {
      if (flags === void 0) {
        flags = {
          input: true
        };
      }
      this.reset();
      this.append(value, flags, '');
      this.doCommit();
    }
    get unmaskedValue() {
      return this.value;
    }
    set unmaskedValue(value) {
      this.resolve(value, {});
    }
    get typedValue() {
      return this.parse ? this.parse(this.value, this) : this.unmaskedValue;
    }
    set typedValue(value) {
      if (this.format) {
        this.value = this.format(value, this);
      } else {
        this.unmaskedValue = String(value);
      }
    }

    /** Value that includes raw user input */
    get rawInputValue() {
      return this.extractInput(0, this.displayValue.length, {
        raw: true
      });
    }
    set rawInputValue(value) {
      this.resolve(value, {
        raw: true
      });
    }
    get displayValue() {
      return this.value;
    }
    get isComplete() {
      return true;
    }
    get isFilled() {
      return this.isComplete;
    }

    /** Finds nearest input position in direction */
    nearestInputPos(cursorPos, direction) {
      return cursorPos;
    }
    totalInputPositions(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      return Math.min(this.displayValue.length, toPos - fromPos);
    }

    /** Extracts value in range considering flags */
    extractInput(fromPos, toPos, flags) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      return this.displayValue.slice(fromPos, toPos);
    }

    /** Extracts tail in range */
    extractTail(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      return new ContinuousTailDetails(this.extractInput(fromPos, toPos), fromPos);
    }

    /** Appends tail */
    appendTail(tail) {
      if (isString(tail)) tail = new ContinuousTailDetails(String(tail));
      return tail.appendTo(this);
    }

    /** Appends char */
    _appendCharRaw(ch, flags) {
      if (!ch) return new ChangeDetails();
      this._value += ch;
      return new ChangeDetails({
        inserted: ch,
        rawInserted: ch
      });
    }

    /** Appends char */
    _appendChar(ch, flags, checkTail) {
      if (flags === void 0) {
        flags = {};
      }
      const consistentState = this.state;
      let details;
      [ch, details] = this.doPrepareChar(ch, flags);
      if (ch) {
        details = details.aggregate(this._appendCharRaw(ch, flags));

        // TODO handle `skip`?

        // try `autofix` lookahead
        if (!details.rawInserted && this.autofix === 'pad') {
          const noFixState = this.state;
          this.state = consistentState;
          let fixDetails = this.pad(flags);
          const chDetails = this._appendCharRaw(ch, flags);
          fixDetails = fixDetails.aggregate(chDetails);

          // if fix was applied or
          // if details are equal use skip restoring state optimization
          if (chDetails.rawInserted || fixDetails.equals(details)) {
            details = fixDetails;
          } else {
            this.state = noFixState;
          }
        }
      }
      if (details.inserted) {
        let consistentTail;
        let appended = this.doValidate(flags) !== false;
        if (appended && checkTail != null) {
          // validation ok, check tail
          const beforeTailState = this.state;
          if (this.overwrite === true) {
            consistentTail = checkTail.state;
            for (let i = 0; i < details.rawInserted.length; ++i) {
              checkTail.unshift(this.displayValue.length - details.tailShift);
            }
          }
          let tailDetails = this.appendTail(checkTail);
          appended = tailDetails.rawInserted.length === checkTail.toString().length;

          // not ok, try shift
          if (!(appended && tailDetails.inserted) && this.overwrite === 'shift') {
            this.state = beforeTailState;
            consistentTail = checkTail.state;
            for (let i = 0; i < details.rawInserted.length; ++i) {
              checkTail.shift();
            }
            tailDetails = this.appendTail(checkTail);
            appended = tailDetails.rawInserted.length === checkTail.toString().length;
          }

          // if ok, rollback state after tail
          if (appended && tailDetails.inserted) this.state = beforeTailState;
        }

        // revert all if something went wrong
        if (!appended) {
          details = new ChangeDetails();
          this.state = consistentState;
          if (checkTail && consistentTail) checkTail.state = consistentTail;
        }
      }
      return details;
    }

    /** Appends optional placeholder at the end */
    _appendPlaceholder() {
      return new ChangeDetails();
    }

    /** Appends optional eager placeholder at the end */
    _appendEager() {
      return new ChangeDetails();
    }

    /** Appends symbols considering flags */
    append(str, flags, tail) {
      if (!isString(str)) throw new Error('value should be string');
      const checkTail = isString(tail) ? new ContinuousTailDetails(String(tail)) : tail;
      if (flags != null && flags.tail) flags._beforeTailState = this.state;
      let details;
      [str, details] = this.doPrepare(str, flags);
      for (let ci = 0; ci < str.length; ++ci) {
        const d = this._appendChar(str[ci], flags, checkTail);
        if (!d.rawInserted && !this.doSkipInvalid(str[ci], flags, checkTail)) break;
        details.aggregate(d);
      }
      if ((this.eager === true || this.eager === 'append') && flags != null && flags.input && str) {
        details.aggregate(this._appendEager());
      }

      // append tail but aggregate only tailShift
      if (checkTail != null) {
        details.tailShift += this.appendTail(checkTail).tailShift;
        // TODO it's a good idea to clear state after appending ends
        // but it causes bugs when one append calls another (when dynamic dispatch set rawInputValue)
        // this._resetBeforeTailState();
      }
      return details;
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      this._value = this.displayValue.slice(0, fromPos) + this.displayValue.slice(toPos);
      return new ChangeDetails();
    }

    /** Calls function and reapplies current value */
    withValueRefresh(fn) {
      if (this._refreshing || !this._initialized) return fn();
      this._refreshing = true;
      const rawInput = this.rawInputValue;
      const value = this.value;
      const ret = fn();
      this.rawInputValue = rawInput;
      // append lost trailing chars at the end
      if (this.value && this.value !== value && value.indexOf(this.value) === 0) {
        this.append(value.slice(this.displayValue.length), {}, '');
        this.doCommit();
      }
      delete this._refreshing;
      return ret;
    }
    runIsolated(fn) {
      if (this._isolated || !this._initialized) return fn(this);
      this._isolated = true;
      const state = this.state;
      const ret = fn(this);
      this.state = state;
      delete this._isolated;
      return ret;
    }
    doSkipInvalid(ch, flags, checkTail) {
      return Boolean(this.skipInvalid);
    }

    /** Prepares string before mask processing */
    doPrepare(str, flags) {
      if (flags === void 0) {
        flags = {};
      }
      return ChangeDetails.normalize(this.prepare ? this.prepare(str, this, flags) : str);
    }

    /** Prepares each char before mask processing */
    doPrepareChar(str, flags) {
      if (flags === void 0) {
        flags = {};
      }
      return ChangeDetails.normalize(this.prepareChar ? this.prepareChar(str, this, flags) : str);
    }

    /** Validates if value is acceptable */
    doValidate(flags) {
      return (!this.validate || this.validate(this.value, this, flags)) && (!this.parent || this.parent.doValidate(flags));
    }

    /** Does additional processing at the end of editing */
    doCommit() {
      if (this.commit) this.commit(this.value, this);
    }
    splice(start, deleteCount, inserted, removeDirection, flags) {
      if (inserted === void 0) {
        inserted = '';
      }
      if (removeDirection === void 0) {
        removeDirection = DIRECTION.NONE;
      }
      if (flags === void 0) {
        flags = {
          input: true
        };
      }
      const tailPos = start + deleteCount;
      const tail = this.extractTail(tailPos);
      const eagerRemove = this.eager === true || this.eager === 'remove';
      let oldRawValue;
      if (eagerRemove) {
        removeDirection = forceDirection(removeDirection);
        oldRawValue = this.extractInput(0, tailPos, {
          raw: true
        });
      }
      let startChangePos = start;
      const details = new ChangeDetails();

      // if it is just deletion without insertion
      if (removeDirection !== DIRECTION.NONE) {
        startChangePos = this.nearestInputPos(start, deleteCount > 1 && start !== 0 && !eagerRemove ? DIRECTION.NONE : removeDirection);

        // adjust tailShift if start was aligned
        details.tailShift = startChangePos - start;
      }
      details.aggregate(this.remove(startChangePos));
      if (eagerRemove && removeDirection !== DIRECTION.NONE && oldRawValue === this.rawInputValue) {
        if (removeDirection === DIRECTION.FORCE_LEFT) {
          let valLength;
          while (oldRawValue === this.rawInputValue && (valLength = this.displayValue.length)) {
            details.aggregate(new ChangeDetails({
              tailShift: -1
            })).aggregate(this.remove(valLength - 1));
          }
        } else if (removeDirection === DIRECTION.FORCE_RIGHT) {
          tail.unshift();
        }
      }
      return details.aggregate(this.append(inserted, flags, tail));
    }
    maskEquals(mask) {
      return this.mask === mask;
    }
    optionsIsChanged(opts) {
      return !objectIncludes(this, opts);
    }
    typedValueEquals(value) {
      const tval = this.typedValue;
      return value === tval || Masked.EMPTY_VALUES.includes(value) && Masked.EMPTY_VALUES.includes(tval) || (this.format ? this.format(value, this) === this.format(this.typedValue, this) : false);
    }
    pad(flags) {
      return new ChangeDetails();
    }
  }
  Masked.DEFAULTS = {
    skipInvalid: true
  };
  Masked.EMPTY_VALUES = [undefined, null, ''];
  IMask.Masked = Masked;

  class ChunksTailDetails {
    /** */

    constructor(chunks, from) {
      if (chunks === void 0) {
        chunks = [];
      }
      if (from === void 0) {
        from = 0;
      }
      this.chunks = chunks;
      this.from = from;
    }
    toString() {
      return this.chunks.map(String).join('');
    }
    extend(tailChunk) {
      if (!String(tailChunk)) return;
      tailChunk = isString(tailChunk) ? new ContinuousTailDetails(String(tailChunk)) : tailChunk;
      const lastChunk = this.chunks[this.chunks.length - 1];
      const extendLast = lastChunk && (
      // if stops are same or tail has no stop
      lastChunk.stop === tailChunk.stop || tailChunk.stop == null) &&
      // if tail chunk goes just after last chunk
      tailChunk.from === lastChunk.from + lastChunk.toString().length;
      if (tailChunk instanceof ContinuousTailDetails) {
        // check the ability to extend previous chunk
        if (extendLast) {
          // extend previous chunk
          lastChunk.extend(tailChunk.toString());
        } else {
          // append new chunk
          this.chunks.push(tailChunk);
        }
      } else if (tailChunk instanceof ChunksTailDetails) {
        if (tailChunk.stop == null) {
          // unwrap floating chunks to parent, keeping `from` pos
          let firstTailChunk;
          while (tailChunk.chunks.length && tailChunk.chunks[0].stop == null) {
            firstTailChunk = tailChunk.chunks.shift(); // not possible to be `undefined` because length was checked above
            firstTailChunk.from += tailChunk.from;
            this.extend(firstTailChunk);
          }
        }

        // if tail chunk still has value
        if (tailChunk.toString()) {
          // if chunks contains stops, then popup stop to container
          tailChunk.stop = tailChunk.blockIndex;
          this.chunks.push(tailChunk);
        }
      }
    }
    appendTo(masked) {
      if (!(masked instanceof IMask.MaskedPattern)) {
        const tail = new ContinuousTailDetails(this.toString());
        return tail.appendTo(masked);
      }
      const details = new ChangeDetails();
      for (let ci = 0; ci < this.chunks.length; ++ci) {
        const chunk = this.chunks[ci];
        const lastBlockIter = masked._mapPosToBlock(masked.displayValue.length);
        const stop = chunk.stop;
        let chunkBlock;
        if (stop != null && (
        // if block not found or stop is behind lastBlock
        !lastBlockIter || lastBlockIter.index <= stop)) {
          if (chunk instanceof ChunksTailDetails ||
          // for continuous block also check if stop is exist
          masked._stops.indexOf(stop) >= 0) {
            details.aggregate(masked._appendPlaceholder(stop));
          }
          chunkBlock = chunk instanceof ChunksTailDetails && masked._blocks[stop];
        }
        if (chunkBlock) {
          const tailDetails = chunkBlock.appendTail(chunk);
          details.aggregate(tailDetails);

          // get not inserted chars
          const remainChars = chunk.toString().slice(tailDetails.rawInserted.length);
          if (remainChars) details.aggregate(masked.append(remainChars, {
            tail: true
          }));
        } else {
          details.aggregate(masked.append(chunk.toString(), {
            tail: true
          }));
        }
      }
      return details;
    }
    get state() {
      return {
        chunks: this.chunks.map(c => c.state),
        from: this.from,
        stop: this.stop,
        blockIndex: this.blockIndex
      };
    }
    set state(state) {
      const {
        chunks,
        ...props
      } = state;
      Object.assign(this, props);
      this.chunks = chunks.map(cstate => {
        const chunk = "chunks" in cstate ? new ChunksTailDetails() : new ContinuousTailDetails();
        chunk.state = cstate;
        return chunk;
      });
    }
    unshift(beforePos) {
      if (!this.chunks.length || beforePos != null && this.from >= beforePos) return '';
      const chunkShiftPos = beforePos != null ? beforePos - this.from : beforePos;
      let ci = 0;
      while (ci < this.chunks.length) {
        const chunk = this.chunks[ci];
        const shiftChar = chunk.unshift(chunkShiftPos);
        if (chunk.toString()) {
          // chunk still contains value
          // but not shifted - means no more available chars to shift
          if (!shiftChar) break;
          ++ci;
        } else {
          // clean if chunk has no value
          this.chunks.splice(ci, 1);
        }
        if (shiftChar) return shiftChar;
      }
      return '';
    }
    shift() {
      if (!this.chunks.length) return '';
      let ci = this.chunks.length - 1;
      while (0 <= ci) {
        const chunk = this.chunks[ci];
        const shiftChar = chunk.shift();
        if (chunk.toString()) {
          // chunk still contains value
          // but not shifted - means no more available chars to shift
          if (!shiftChar) break;
          --ci;
        } else {
          // clean if chunk has no value
          this.chunks.splice(ci, 1);
        }
        if (shiftChar) return shiftChar;
      }
      return '';
    }
  }

  class PatternCursor {
    constructor(masked, pos) {
      this.masked = masked;
      this._log = [];
      const {
        offset,
        index
      } = masked._mapPosToBlock(pos) || (pos < 0 ?
      // first
      {
        index: 0,
        offset: 0
      } :
      // last
      {
        index: this.masked._blocks.length,
        offset: 0
      });
      this.offset = offset;
      this.index = index;
      this.ok = false;
    }
    get block() {
      return this.masked._blocks[this.index];
    }
    get pos() {
      return this.masked._blockStartPos(this.index) + this.offset;
    }
    get state() {
      return {
        index: this.index,
        offset: this.offset,
        ok: this.ok
      };
    }
    set state(s) {
      Object.assign(this, s);
    }
    pushState() {
      this._log.push(this.state);
    }
    popState() {
      const s = this._log.pop();
      if (s) this.state = s;
      return s;
    }
    bindBlock() {
      if (this.block) return;
      if (this.index < 0) {
        this.index = 0;
        this.offset = 0;
      }
      if (this.index >= this.masked._blocks.length) {
        this.index = this.masked._blocks.length - 1;
        this.offset = this.block.displayValue.length; // TODO this is stupid type error, `block` depends on index that was changed above
      }
    }
    _pushLeft(fn) {
      this.pushState();
      for (this.bindBlock(); 0 <= this.index; --this.index, this.offset = ((_this$block = this.block) == null ? void 0 : _this$block.displayValue.length) || 0) {
        var _this$block;
        if (fn()) return this.ok = true;
      }
      return this.ok = false;
    }
    _pushRight(fn) {
      this.pushState();
      for (this.bindBlock(); this.index < this.masked._blocks.length; ++this.index, this.offset = 0) {
        if (fn()) return this.ok = true;
      }
      return this.ok = false;
    }
    pushLeftBeforeFilled() {
      return this._pushLeft(() => {
        if (this.block.isFixed || !this.block.value) return;
        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_LEFT);
        if (this.offset !== 0) return true;
      });
    }
    pushLeftBeforeInput() {
      // cases:
      // filled input: 00|
      // optional empty input: 00[]|
      // nested block: XX<[]>|
      return this._pushLeft(() => {
        if (this.block.isFixed) return;
        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);
        return true;
      });
    }
    pushLeftBeforeRequired() {
      return this._pushLeft(() => {
        if (this.block.isFixed || this.block.isOptional && !this.block.value) return;
        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.LEFT);
        return true;
      });
    }
    pushRightBeforeFilled() {
      return this._pushRight(() => {
        if (this.block.isFixed || !this.block.value) return;
        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.FORCE_RIGHT);
        if (this.offset !== this.block.value.length) return true;
      });
    }
    pushRightBeforeInput() {
      return this._pushRight(() => {
        if (this.block.isFixed) return;

        // const o = this.offset;
        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);
        // HACK cases like (STILL DOES NOT WORK FOR NESTED)
        // aa|X
        // aa<X|[]>X_    - this will not work
        // if (o && o === this.offset && this.block instanceof PatternInputDefinition) continue;
        return true;
      });
    }
    pushRightBeforeRequired() {
      return this._pushRight(() => {
        if (this.block.isFixed || this.block.isOptional && !this.block.value) return;

        // TODO check |[*]XX_
        this.offset = this.block.nearestInputPos(this.offset, DIRECTION.NONE);
        return true;
      });
    }
  }

  class PatternFixedDefinition {
    /** */

    /** */

    /** */

    /** */

    /** */

    /** */

    constructor(opts) {
      Object.assign(this, opts);
      this._value = '';
      this.isFixed = true;
    }
    get value() {
      return this._value;
    }
    get unmaskedValue() {
      return this.isUnmasking ? this.value : '';
    }
    get rawInputValue() {
      return this._isRawInput ? this.value : '';
    }
    get displayValue() {
      return this.value;
    }
    reset() {
      this._isRawInput = false;
      this._value = '';
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this._value.length;
      }
      this._value = this._value.slice(0, fromPos) + this._value.slice(toPos);
      if (!this._value) this._isRawInput = false;
      return new ChangeDetails();
    }
    nearestInputPos(cursorPos, direction) {
      if (direction === void 0) {
        direction = DIRECTION.NONE;
      }
      const minPos = 0;
      const maxPos = this._value.length;
      switch (direction) {
        case DIRECTION.LEFT:
        case DIRECTION.FORCE_LEFT:
          return minPos;
        case DIRECTION.NONE:
        case DIRECTION.RIGHT:
        case DIRECTION.FORCE_RIGHT:
        default:
          return maxPos;
      }
    }
    totalInputPositions(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this._value.length;
      }
      return this._isRawInput ? toPos - fromPos : 0;
    }
    extractInput(fromPos, toPos, flags) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this._value.length;
      }
      if (flags === void 0) {
        flags = {};
      }
      return flags.raw && this._isRawInput && this._value.slice(fromPos, toPos) || '';
    }
    get isComplete() {
      return true;
    }
    get isFilled() {
      return Boolean(this._value);
    }
    _appendChar(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      if (this.isFilled) return new ChangeDetails();
      const appendEager = this.eager === true || this.eager === 'append';
      const appended = this.char === ch;
      const isResolved = appended && (this.isUnmasking || flags.input || flags.raw) && (!flags.raw || !appendEager) && !flags.tail;
      const details = new ChangeDetails({
        inserted: this.char,
        rawInserted: isResolved ? this.char : ''
      });
      this._value = this.char;
      this._isRawInput = isResolved && (flags.raw || flags.input);
      return details;
    }
    _appendEager() {
      return this._appendChar(this.char, {
        tail: true
      });
    }
    _appendPlaceholder() {
      const details = new ChangeDetails();
      if (this.isFilled) return details;
      this._value = details.inserted = this.char;
      return details;
    }
    extractTail() {
      return new ContinuousTailDetails('');
    }
    appendTail(tail) {
      if (isString(tail)) tail = new ContinuousTailDetails(String(tail));
      return tail.appendTo(this);
    }
    append(str, flags, tail) {
      const details = this._appendChar(str[0], flags);
      if (tail != null) {
        details.tailShift += this.appendTail(tail).tailShift;
      }
      return details;
    }
    doCommit() {}
    get state() {
      return {
        _value: this._value,
        _rawInputValue: this.rawInputValue
      };
    }
    set state(state) {
      this._value = state._value;
      this._isRawInput = Boolean(state._rawInputValue);
    }
    pad(flags) {
      return this._appendPlaceholder();
    }
  }

  class PatternInputDefinition {
    /** */

    /** */

    /** */

    /** */

    /** */

    /** */

    /** */

    /** */

    constructor(opts) {
      const {
        parent,
        isOptional,
        placeholderChar,
        displayChar,
        lazy,
        eager,
        ...maskOpts
      } = opts;
      this.masked = createMask(maskOpts);
      Object.assign(this, {
        parent,
        isOptional,
        placeholderChar,
        displayChar,
        lazy,
        eager
      });
    }
    reset() {
      this.isFilled = false;
      this.masked.reset();
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.value.length;
      }
      if (fromPos === 0 && toPos >= 1) {
        this.isFilled = false;
        return this.masked.remove(fromPos, toPos);
      }
      return new ChangeDetails();
    }
    get value() {
      return this.masked.value || (this.isFilled && !this.isOptional ? this.placeholderChar : '');
    }
    get unmaskedValue() {
      return this.masked.unmaskedValue;
    }
    get rawInputValue() {
      return this.masked.rawInputValue;
    }
    get displayValue() {
      return this.masked.value && this.displayChar || this.value;
    }
    get isComplete() {
      return Boolean(this.masked.value) || this.isOptional;
    }
    _appendChar(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      if (this.isFilled) return new ChangeDetails();
      const state = this.masked.state;
      // simulate input
      let details = this.masked._appendChar(ch, this.currentMaskFlags(flags));
      if (details.inserted && this.doValidate(flags) === false) {
        details = new ChangeDetails();
        this.masked.state = state;
      }
      if (!details.inserted && !this.isOptional && !this.lazy && !flags.input) {
        details.inserted = this.placeholderChar;
      }
      details.skip = !details.inserted && !this.isOptional;
      this.isFilled = Boolean(details.inserted);
      return details;
    }
    append(str, flags, tail) {
      // TODO probably should be done via _appendChar
      return this.masked.append(str, this.currentMaskFlags(flags), tail);
    }
    _appendPlaceholder() {
      if (this.isFilled || this.isOptional) return new ChangeDetails();
      this.isFilled = true;
      return new ChangeDetails({
        inserted: this.placeholderChar
      });
    }
    _appendEager() {
      return new ChangeDetails();
    }
    extractTail(fromPos, toPos) {
      return this.masked.extractTail(fromPos, toPos);
    }
    appendTail(tail) {
      return this.masked.appendTail(tail);
    }
    extractInput(fromPos, toPos, flags) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.value.length;
      }
      return this.masked.extractInput(fromPos, toPos, flags);
    }
    nearestInputPos(cursorPos, direction) {
      if (direction === void 0) {
        direction = DIRECTION.NONE;
      }
      const minPos = 0;
      const maxPos = this.value.length;
      const boundPos = Math.min(Math.max(cursorPos, minPos), maxPos);
      switch (direction) {
        case DIRECTION.LEFT:
        case DIRECTION.FORCE_LEFT:
          return this.isComplete ? boundPos : minPos;
        case DIRECTION.RIGHT:
        case DIRECTION.FORCE_RIGHT:
          return this.isComplete ? boundPos : maxPos;
        case DIRECTION.NONE:
        default:
          return boundPos;
      }
    }
    totalInputPositions(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.value.length;
      }
      return this.value.slice(fromPos, toPos).length;
    }
    doValidate(flags) {
      return this.masked.doValidate(this.currentMaskFlags(flags)) && (!this.parent || this.parent.doValidate(this.currentMaskFlags(flags)));
    }
    doCommit() {
      this.masked.doCommit();
    }
    get state() {
      return {
        _value: this.value,
        _rawInputValue: this.rawInputValue,
        masked: this.masked.state,
        isFilled: this.isFilled
      };
    }
    set state(state) {
      this.masked.state = state.masked;
      this.isFilled = state.isFilled;
    }
    currentMaskFlags(flags) {
      var _flags$_beforeTailSta;
      return {
        ...flags,
        _beforeTailState: (flags == null || (_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.masked) || (flags == null ? void 0 : flags._beforeTailState)
      };
    }
    pad(flags) {
      return new ChangeDetails();
    }
  }
  PatternInputDefinition.DEFAULT_DEFINITIONS = {
    '0': /\d/,
    'a': /[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
    // http://stackoverflow.com/a/22075070
    '*': /./
  };

  /** Masking by RegExp */
  class MaskedRegExp extends Masked {
    /** */

    /** Enable characters overwriting */

    /** */

    /** */

    /** */

    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      const mask = opts.mask;
      if (mask) opts.validate = value => value.search(mask) >= 0;
      super._update(opts);
    }
  }
  IMask.MaskedRegExp = MaskedRegExp;

  /** Pattern mask */
  class MaskedPattern extends Masked {
    /** */

    /** */

    /** Single char for empty input */

    /** Single char for filled input */

    /** Show placeholder only when needed */

    /** Enable characters overwriting */

    /** */

    /** */

    /** */

    constructor(opts) {
      super({
        ...MaskedPattern.DEFAULTS,
        ...opts,
        definitions: Object.assign({}, PatternInputDefinition.DEFAULT_DEFINITIONS, opts == null ? void 0 : opts.definitions)
      });
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      opts.definitions = Object.assign({}, this.definitions, opts.definitions);
      super._update(opts);
      this._rebuildMask();
    }
    _rebuildMask() {
      const defs = this.definitions;
      this._blocks = [];
      this.exposeBlock = undefined;
      this._stops = [];
      this._maskedBlocks = {};
      const pattern = this.mask;
      if (!pattern || !defs) return;
      let unmaskingBlock = false;
      let optionalBlock = false;
      for (let i = 0; i < pattern.length; ++i) {
        if (this.blocks) {
          const p = pattern.slice(i);
          const bNames = Object.keys(this.blocks).filter(bName => p.indexOf(bName) === 0);
          // order by key length
          bNames.sort((a, b) => b.length - a.length);
          // use block name with max length
          const bName = bNames[0];
          if (bName) {
            const {
              expose,
              repeat,
              ...bOpts
            } = normalizeOpts(this.blocks[bName]); // TODO type Opts<Arg & Extra>
            const blockOpts = {
              lazy: this.lazy,
              eager: this.eager,
              placeholderChar: this.placeholderChar,
              displayChar: this.displayChar,
              overwrite: this.overwrite,
              autofix: this.autofix,
              ...bOpts,
              repeat,
              parent: this
            };
            const maskedBlock = repeat != null ? new IMask.RepeatBlock(blockOpts /* TODO */) : createMask(blockOpts);
            if (maskedBlock) {
              this._blocks.push(maskedBlock);
              if (expose) this.exposeBlock = maskedBlock;

              // store block index
              if (!this._maskedBlocks[bName]) this._maskedBlocks[bName] = [];
              this._maskedBlocks[bName].push(this._blocks.length - 1);
            }
            i += bName.length - 1;
            continue;
          }
        }
        let char = pattern[i];
        let isInput = (char in defs);
        if (char === MaskedPattern.STOP_CHAR) {
          this._stops.push(this._blocks.length);
          continue;
        }
        if (char === '{' || char === '}') {
          unmaskingBlock = !unmaskingBlock;
          continue;
        }
        if (char === '[' || char === ']') {
          optionalBlock = !optionalBlock;
          continue;
        }
        if (char === MaskedPattern.ESCAPE_CHAR) {
          ++i;
          char = pattern[i];
          if (!char) break;
          isInput = false;
        }
        const def = isInput ? new PatternInputDefinition({
          isOptional: optionalBlock,
          lazy: this.lazy,
          eager: this.eager,
          placeholderChar: this.placeholderChar,
          displayChar: this.displayChar,
          ...normalizeOpts(defs[char]),
          parent: this
        }) : new PatternFixedDefinition({
          char,
          eager: this.eager,
          isUnmasking: unmaskingBlock
        });
        this._blocks.push(def);
      }
    }
    get state() {
      return {
        ...super.state,
        _blocks: this._blocks.map(b => b.state)
      };
    }
    set state(state) {
      if (!state) {
        this.reset();
        return;
      }
      const {
        _blocks,
        ...maskedState
      } = state;
      this._blocks.forEach((b, bi) => b.state = _blocks[bi]);
      super.state = maskedState;
    }
    reset() {
      super.reset();
      this._blocks.forEach(b => b.reset());
    }
    get isComplete() {
      return this.exposeBlock ? this.exposeBlock.isComplete : this._blocks.every(b => b.isComplete);
    }
    get isFilled() {
      return this._blocks.every(b => b.isFilled);
    }
    get isFixed() {
      return this._blocks.every(b => b.isFixed);
    }
    get isOptional() {
      return this._blocks.every(b => b.isOptional);
    }
    doCommit() {
      this._blocks.forEach(b => b.doCommit());
      super.doCommit();
    }
    get unmaskedValue() {
      return this.exposeBlock ? this.exposeBlock.unmaskedValue : this._blocks.reduce((str, b) => str += b.unmaskedValue, '');
    }
    set unmaskedValue(unmaskedValue) {
      if (this.exposeBlock) {
        const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);
        this.exposeBlock.unmaskedValue = unmaskedValue;
        this.appendTail(tail);
        this.doCommit();
      } else super.unmaskedValue = unmaskedValue;
    }
    get value() {
      return this.exposeBlock ? this.exposeBlock.value :
      // TODO return _value when not in change?
      this._blocks.reduce((str, b) => str += b.value, '');
    }
    set value(value) {
      if (this.exposeBlock) {
        const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);
        this.exposeBlock.value = value;
        this.appendTail(tail);
        this.doCommit();
      } else super.value = value;
    }
    get typedValue() {
      return this.exposeBlock ? this.exposeBlock.typedValue : super.typedValue;
    }
    set typedValue(value) {
      if (this.exposeBlock) {
        const tail = this.extractTail(this._blockStartPos(this._blocks.indexOf(this.exposeBlock)) + this.exposeBlock.displayValue.length);
        this.exposeBlock.typedValue = value;
        this.appendTail(tail);
        this.doCommit();
      } else super.typedValue = value;
    }
    get displayValue() {
      return this._blocks.reduce((str, b) => str += b.displayValue, '');
    }
    appendTail(tail) {
      return super.appendTail(tail).aggregate(this._appendPlaceholder());
    }
    _appendEager() {
      var _this$_mapPosToBlock;
      const details = new ChangeDetails();
      let startBlockIndex = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index;
      if (startBlockIndex == null) return details;

      // TODO test if it works for nested pattern masks
      if (this._blocks[startBlockIndex].isFilled) ++startBlockIndex;
      for (let bi = startBlockIndex; bi < this._blocks.length; ++bi) {
        const d = this._blocks[bi]._appendEager();
        if (!d.inserted) break;
        details.aggregate(d);
      }
      return details;
    }
    _appendCharRaw(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      const blockIter = this._mapPosToBlock(this.displayValue.length);
      const details = new ChangeDetails();
      if (!blockIter) return details;
      for (let bi = blockIter.index, block; block = this._blocks[bi]; ++bi) {
        var _flags$_beforeTailSta;
        const blockDetails = block._appendChar(ch, {
          ...flags,
          _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]
        });
        details.aggregate(blockDetails);
        if (blockDetails.consumed) break; // go next char
      }
      return details;
    }
    extractTail(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      const chunkTail = new ChunksTailDetails();
      if (fromPos === toPos) return chunkTail;
      this._forEachBlocksInRange(fromPos, toPos, (b, bi, bFromPos, bToPos) => {
        const blockChunk = b.extractTail(bFromPos, bToPos);
        blockChunk.stop = this._findStopBefore(bi);
        blockChunk.from = this._blockStartPos(bi);
        if (blockChunk instanceof ChunksTailDetails) blockChunk.blockIndex = bi;
        chunkTail.extend(blockChunk);
      });
      return chunkTail;
    }
    extractInput(fromPos, toPos, flags) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      if (flags === void 0) {
        flags = {};
      }
      if (fromPos === toPos) return '';
      let input = '';
      this._forEachBlocksInRange(fromPos, toPos, (b, _, fromPos, toPos) => {
        input += b.extractInput(fromPos, toPos, flags);
      });
      return input;
    }
    _findStopBefore(blockIndex) {
      let stopBefore;
      for (let si = 0; si < this._stops.length; ++si) {
        const stop = this._stops[si];
        if (stop <= blockIndex) stopBefore = stop;else break;
      }
      return stopBefore;
    }

    /** Appends placeholder depending on laziness */
    _appendPlaceholder(toBlockIndex) {
      const details = new ChangeDetails();
      if (this.lazy && toBlockIndex == null) return details;
      const startBlockIter = this._mapPosToBlock(this.displayValue.length);
      if (!startBlockIter) return details;
      const startBlockIndex = startBlockIter.index;
      const endBlockIndex = toBlockIndex != null ? toBlockIndex : this._blocks.length;
      this._blocks.slice(startBlockIndex, endBlockIndex).forEach(b => {
        if (!b.lazy || toBlockIndex != null) {
          var _blocks2;
          details.aggregate(b._appendPlaceholder((_blocks2 = b._blocks) == null ? void 0 : _blocks2.length));
        }
      });
      return details;
    }

    /** Finds block in pos */
    _mapPosToBlock(pos) {
      let accVal = '';
      for (let bi = 0; bi < this._blocks.length; ++bi) {
        const block = this._blocks[bi];
        const blockStartPos = accVal.length;
        accVal += block.displayValue;
        if (pos <= accVal.length) {
          return {
            index: bi,
            offset: pos - blockStartPos
          };
        }
      }
    }
    _blockStartPos(blockIndex) {
      return this._blocks.slice(0, blockIndex).reduce((pos, b) => pos += b.displayValue.length, 0);
    }
    _forEachBlocksInRange(fromPos, toPos, fn) {
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      const fromBlockIter = this._mapPosToBlock(fromPos);
      if (fromBlockIter) {
        const toBlockIter = this._mapPosToBlock(toPos);
        // process first block
        const isSameBlock = toBlockIter && fromBlockIter.index === toBlockIter.index;
        const fromBlockStartPos = fromBlockIter.offset;
        const fromBlockEndPos = toBlockIter && isSameBlock ? toBlockIter.offset : this._blocks[fromBlockIter.index].displayValue.length;
        fn(this._blocks[fromBlockIter.index], fromBlockIter.index, fromBlockStartPos, fromBlockEndPos);
        if (toBlockIter && !isSameBlock) {
          // process intermediate blocks
          for (let bi = fromBlockIter.index + 1; bi < toBlockIter.index; ++bi) {
            fn(this._blocks[bi], bi, 0, this._blocks[bi].displayValue.length);
          }

          // process last block
          fn(this._blocks[toBlockIter.index], toBlockIter.index, 0, toBlockIter.offset);
        }
      }
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      const removeDetails = super.remove(fromPos, toPos);
      this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {
        removeDetails.aggregate(b.remove(bFromPos, bToPos));
      });
      return removeDetails;
    }
    nearestInputPos(cursorPos, direction) {
      if (direction === void 0) {
        direction = DIRECTION.NONE;
      }
      if (!this._blocks.length) return 0;
      const cursor = new PatternCursor(this, cursorPos);
      if (direction === DIRECTION.NONE) {
        // -------------------------------------------------
        // NONE should only go out from fixed to the right!
        // -------------------------------------------------
        if (cursor.pushRightBeforeInput()) return cursor.pos;
        cursor.popState();
        if (cursor.pushLeftBeforeInput()) return cursor.pos;
        return this.displayValue.length;
      }

      // FORCE is only about a|* otherwise is 0
      if (direction === DIRECTION.LEFT || direction === DIRECTION.FORCE_LEFT) {
        // try to break fast when *|a
        if (direction === DIRECTION.LEFT) {
          cursor.pushRightBeforeFilled();
          if (cursor.ok && cursor.pos === cursorPos) return cursorPos;
          cursor.popState();
        }

        // forward flow
        cursor.pushLeftBeforeInput();
        cursor.pushLeftBeforeRequired();
        cursor.pushLeftBeforeFilled();

        // backward flow
        if (direction === DIRECTION.LEFT) {
          cursor.pushRightBeforeInput();
          cursor.pushRightBeforeRequired();
          if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;
          cursor.popState();
          if (cursor.ok && cursor.pos <= cursorPos) return cursor.pos;
          cursor.popState();
        }
        if (cursor.ok) return cursor.pos;
        if (direction === DIRECTION.FORCE_LEFT) return 0;
        cursor.popState();
        if (cursor.ok) return cursor.pos;
        cursor.popState();
        if (cursor.ok) return cursor.pos;
        return 0;
      }
      if (direction === DIRECTION.RIGHT || direction === DIRECTION.FORCE_RIGHT) {
        // forward flow
        cursor.pushRightBeforeInput();
        cursor.pushRightBeforeRequired();
        if (cursor.pushRightBeforeFilled()) return cursor.pos;
        if (direction === DIRECTION.FORCE_RIGHT) return this.displayValue.length;

        // backward flow
        cursor.popState();
        if (cursor.ok) return cursor.pos;
        cursor.popState();
        if (cursor.ok) return cursor.pos;
        return this.nearestInputPos(cursorPos, DIRECTION.LEFT);
      }
      return cursorPos;
    }
    totalInputPositions(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      let total = 0;
      this._forEachBlocksInRange(fromPos, toPos, (b, _, bFromPos, bToPos) => {
        total += b.totalInputPositions(bFromPos, bToPos);
      });
      return total;
    }

    /** Get block by name */
    maskedBlock(name) {
      return this.maskedBlocks(name)[0];
    }

    /** Get all blocks by name */
    maskedBlocks(name) {
      const indices = this._maskedBlocks[name];
      if (!indices) return [];
      return indices.map(gi => this._blocks[gi]);
    }
    pad(flags) {
      const details = new ChangeDetails();
      this._forEachBlocksInRange(0, this.displayValue.length, b => details.aggregate(b.pad(flags)));
      return details;
    }
  }
  MaskedPattern.DEFAULTS = {
    ...Masked.DEFAULTS,
    lazy: true,
    placeholderChar: '_'
  };
  MaskedPattern.STOP_CHAR = '`';
  MaskedPattern.ESCAPE_CHAR = '\\';
  MaskedPattern.InputDefinition = PatternInputDefinition;
  MaskedPattern.FixedDefinition = PatternFixedDefinition;
  IMask.MaskedPattern = MaskedPattern;

  /** Pattern which accepts ranges */
  class MaskedRange extends MaskedPattern {
    /**
      Optionally sets max length of pattern.
      Used when pattern length is longer then `to` param length. Pads zeros at start in this case.
    */

    /** Min bound */

    /** Max bound */

    get _matchFrom() {
      return this.maxLength - String(this.from).length;
    }
    constructor(opts) {
      super(opts); // mask will be created in _update
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      const {
        to = this.to || 0,
        from = this.from || 0,
        maxLength = this.maxLength || 0,
        autofix = this.autofix,
        ...patternOpts
      } = opts;
      this.to = to;
      this.from = from;
      this.maxLength = Math.max(String(to).length, maxLength);
      this.autofix = autofix;
      const fromStr = String(this.from).padStart(this.maxLength, '0');
      const toStr = String(this.to).padStart(this.maxLength, '0');
      let sameCharsCount = 0;
      while (sameCharsCount < toStr.length && toStr[sameCharsCount] === fromStr[sameCharsCount]) ++sameCharsCount;
      patternOpts.mask = toStr.slice(0, sameCharsCount).replace(/0/g, '\\0') + '0'.repeat(this.maxLength - sameCharsCount);
      super._update(patternOpts);
    }
    get isComplete() {
      return super.isComplete && Boolean(this.value);
    }
    boundaries(str) {
      let minstr = '';
      let maxstr = '';
      const [, placeholder, num] = str.match(/^(\D*)(\d*)(\D*)/) || [];
      if (num) {
        minstr = '0'.repeat(placeholder.length) + num;
        maxstr = '9'.repeat(placeholder.length) + num;
      }
      minstr = minstr.padEnd(this.maxLength, '0');
      maxstr = maxstr.padEnd(this.maxLength, '9');
      return [minstr, maxstr];
    }
    doPrepareChar(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      let details;
      [ch, details] = super.doPrepareChar(ch.replace(/\D/g, ''), flags);
      if (!ch) details.skip = !this.isComplete;
      return [ch, details];
    }
    _appendCharRaw(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      if (!this.autofix || this.value.length + 1 > this.maxLength) return super._appendCharRaw(ch, flags);
      const fromStr = String(this.from).padStart(this.maxLength, '0');
      const toStr = String(this.to).padStart(this.maxLength, '0');
      const [minstr, maxstr] = this.boundaries(this.value + ch);
      if (Number(maxstr) < this.from) return super._appendCharRaw(fromStr[this.value.length], flags);
      if (Number(minstr) > this.to) {
        if (!flags.tail && this.autofix === 'pad' && this.value.length + 1 < this.maxLength) {
          return super._appendCharRaw(fromStr[this.value.length], flags).aggregate(this._appendCharRaw(ch, flags));
        }
        return super._appendCharRaw(toStr[this.value.length], flags);
      }
      return super._appendCharRaw(ch, flags);
    }
    doValidate(flags) {
      const str = this.value;
      const firstNonZero = str.search(/[^0]/);
      if (firstNonZero === -1 && str.length <= this._matchFrom) return true;
      const [minstr, maxstr] = this.boundaries(str);
      return this.from <= Number(maxstr) && Number(minstr) <= this.to && super.doValidate(flags);
    }
    pad(flags) {
      const details = new ChangeDetails();
      if (this.value.length === this.maxLength) return details;
      const value = this.value;
      const padLength = this.maxLength - this.value.length;
      if (padLength) {
        this.reset();
        for (let i = 0; i < padLength; ++i) {
          details.aggregate(super._appendCharRaw('0', flags));
        }

        // append tail
        value.split('').forEach(ch => this._appendCharRaw(ch));
      }
      return details;
    }
  }
  IMask.MaskedRange = MaskedRange;

  const DefaultPattern = 'd{.}`m{.}`Y';

  // Make format and parse required when pattern is provided

  /** Date mask */
  class MaskedDate extends MaskedPattern {
    static extractPatternOptions(opts) {
      const {
        mask,
        pattern,
        ...patternOpts
      } = opts;
      return {
        ...patternOpts,
        mask: isString(mask) ? mask : pattern
      };
    }

    /** Pattern mask for date according to {@link MaskedDate#format} */

    /** Start date */

    /** End date */

    /** Format typed value to string */

    /** Parse string to get typed value */

    constructor(opts) {
      super(MaskedDate.extractPatternOptions({
        ...MaskedDate.DEFAULTS,
        ...opts
      }));
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      const {
        mask,
        pattern,
        blocks,
        ...patternOpts
      } = {
        ...MaskedDate.DEFAULTS,
        ...opts
      };
      const patternBlocks = Object.assign({}, MaskedDate.GET_DEFAULT_BLOCKS());
      // adjust year block
      if (opts.min) patternBlocks.Y.from = opts.min.getFullYear();
      if (opts.max) patternBlocks.Y.to = opts.max.getFullYear();
      if (opts.min && opts.max && patternBlocks.Y.from === patternBlocks.Y.to) {
        patternBlocks.m.from = opts.min.getMonth() + 1;
        patternBlocks.m.to = opts.max.getMonth() + 1;
        if (patternBlocks.m.from === patternBlocks.m.to) {
          patternBlocks.d.from = opts.min.getDate();
          patternBlocks.d.to = opts.max.getDate();
        }
      }
      Object.assign(patternBlocks, this.blocks, blocks);
      super._update({
        ...patternOpts,
        mask: isString(mask) ? mask : pattern,
        blocks: patternBlocks
      });
    }
    doValidate(flags) {
      const date = this.date;
      return super.doValidate(flags) && (!this.isComplete || this.isDateExist(this.value) && date != null && (this.min == null || this.min <= date) && (this.max == null || date <= this.max));
    }

    /** Checks if date is exists */
    isDateExist(str) {
      return this.format(this.parse(str, this), this).indexOf(str) >= 0;
    }

    /** Parsed Date */
    get date() {
      return this.typedValue;
    }
    set date(date) {
      this.typedValue = date;
    }
    get typedValue() {
      return this.isComplete ? super.typedValue : null;
    }
    set typedValue(value) {
      super.typedValue = value;
    }
    maskEquals(mask) {
      return mask === Date || super.maskEquals(mask);
    }
    optionsIsChanged(opts) {
      return super.optionsIsChanged(MaskedDate.extractPatternOptions(opts));
    }
  }
  MaskedDate.GET_DEFAULT_BLOCKS = () => ({
    d: {
      mask: MaskedRange,
      from: 1,
      to: 31,
      maxLength: 2
    },
    m: {
      mask: MaskedRange,
      from: 1,
      to: 12,
      maxLength: 2
    },
    Y: {
      mask: MaskedRange,
      from: 1900,
      to: 9999
    }
  });
  MaskedDate.DEFAULTS = {
    ...MaskedPattern.DEFAULTS,
    mask: Date,
    pattern: DefaultPattern,
    format: (date, masked) => {
      if (!date) return '';
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      return [day, month, year].join('.');
    },
    parse: (str, masked) => {
      const [day, month, year] = str.split('.').map(Number);
      return new Date(year, month - 1, day);
    }
  };
  IMask.MaskedDate = MaskedDate;

  /** Dynamic mask for choosing appropriate mask in run-time */
  class MaskedDynamic extends Masked {
    constructor(opts) {
      super({
        ...MaskedDynamic.DEFAULTS,
        ...opts
      });
      this.currentMask = undefined;
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      super._update(opts);
      if ('mask' in opts) {
        this.exposeMask = undefined;
        // mask could be totally dynamic with only `dispatch` option
        this.compiledMasks = Array.isArray(opts.mask) ? opts.mask.map(m => {
          const {
            expose,
            ...maskOpts
          } = normalizeOpts(m);
          const masked = createMask({
            overwrite: this._overwrite,
            eager: this._eager,
            skipInvalid: this._skipInvalid,
            ...maskOpts
          });
          if (expose) this.exposeMask = masked;
          return masked;
        }) : [];

        // this.currentMask = this.doDispatch(''); // probably not needed but lets see
      }
    }
    _appendCharRaw(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      const details = this._applyDispatch(ch, flags);
      if (this.currentMask) {
        details.aggregate(this.currentMask._appendChar(ch, this.currentMaskFlags(flags)));
      }
      return details;
    }
    _applyDispatch(appended, flags, tail) {
      if (appended === void 0) {
        appended = '';
      }
      if (flags === void 0) {
        flags = {};
      }
      if (tail === void 0) {
        tail = '';
      }
      const prevValueBeforeTail = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._value : this.value;
      const inputValue = this.rawInputValue;
      const insertValue = flags.tail && flags._beforeTailState != null ? flags._beforeTailState._rawInputValue : inputValue;
      const tailValue = inputValue.slice(insertValue.length);
      const prevMask = this.currentMask;
      const details = new ChangeDetails();
      const prevMaskState = prevMask == null ? void 0 : prevMask.state;

      // clone flags to prevent overwriting `_beforeTailState`
      this.currentMask = this.doDispatch(appended, {
        ...flags
      }, tail);

      // restore state after dispatch
      if (this.currentMask) {
        if (this.currentMask !== prevMask) {
          // if mask changed reapply input
          this.currentMask.reset();
          if (insertValue) {
            this.currentMask.append(insertValue, {
              raw: true
            });
            details.tailShift = this.currentMask.value.length - prevValueBeforeTail.length;
          }
          if (tailValue) {
            details.tailShift += this.currentMask.append(tailValue, {
              raw: true,
              tail: true
            }).tailShift;
          }
        } else if (prevMaskState) {
          // Dispatch can do something bad with state, so
          // restore prev mask state
          this.currentMask.state = prevMaskState;
        }
      }
      return details;
    }
    _appendPlaceholder() {
      const details = this._applyDispatch();
      if (this.currentMask) {
        details.aggregate(this.currentMask._appendPlaceholder());
      }
      return details;
    }
    _appendEager() {
      const details = this._applyDispatch();
      if (this.currentMask) {
        details.aggregate(this.currentMask._appendEager());
      }
      return details;
    }
    appendTail(tail) {
      const details = new ChangeDetails();
      if (tail) details.aggregate(this._applyDispatch('', {}, tail));
      return details.aggregate(this.currentMask ? this.currentMask.appendTail(tail) : super.appendTail(tail));
    }
    currentMaskFlags(flags) {
      var _flags$_beforeTailSta, _flags$_beforeTailSta2;
      return {
        ...flags,
        _beforeTailState: ((_flags$_beforeTailSta = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta.currentMaskRef) === this.currentMask && ((_flags$_beforeTailSta2 = flags._beforeTailState) == null ? void 0 : _flags$_beforeTailSta2.currentMask) || flags._beforeTailState
      };
    }
    doDispatch(appended, flags, tail) {
      if (flags === void 0) {
        flags = {};
      }
      if (tail === void 0) {
        tail = '';
      }
      return this.dispatch(appended, this, flags, tail);
    }
    doValidate(flags) {
      return super.doValidate(flags) && (!this.currentMask || this.currentMask.doValidate(this.currentMaskFlags(flags)));
    }
    doPrepare(str, flags) {
      if (flags === void 0) {
        flags = {};
      }
      let [s, details] = super.doPrepare(str, flags);
      if (this.currentMask) {
        let currentDetails;
        [s, currentDetails] = super.doPrepare(s, this.currentMaskFlags(flags));
        details = details.aggregate(currentDetails);
      }
      return [s, details];
    }
    doPrepareChar(str, flags) {
      if (flags === void 0) {
        flags = {};
      }
      let [s, details] = super.doPrepareChar(str, flags);
      if (this.currentMask) {
        let currentDetails;
        [s, currentDetails] = super.doPrepareChar(s, this.currentMaskFlags(flags));
        details = details.aggregate(currentDetails);
      }
      return [s, details];
    }
    reset() {
      var _this$currentMask;
      (_this$currentMask = this.currentMask) == null || _this$currentMask.reset();
      this.compiledMasks.forEach(m => m.reset());
    }
    get value() {
      return this.exposeMask ? this.exposeMask.value : this.currentMask ? this.currentMask.value : '';
    }
    set value(value) {
      if (this.exposeMask) {
        this.exposeMask.value = value;
        this.currentMask = this.exposeMask;
        this._applyDispatch();
      } else super.value = value;
    }
    get unmaskedValue() {
      return this.exposeMask ? this.exposeMask.unmaskedValue : this.currentMask ? this.currentMask.unmaskedValue : '';
    }
    set unmaskedValue(unmaskedValue) {
      if (this.exposeMask) {
        this.exposeMask.unmaskedValue = unmaskedValue;
        this.currentMask = this.exposeMask;
        this._applyDispatch();
      } else super.unmaskedValue = unmaskedValue;
    }
    get typedValue() {
      return this.exposeMask ? this.exposeMask.typedValue : this.currentMask ? this.currentMask.typedValue : '';
    }
    set typedValue(typedValue) {
      if (this.exposeMask) {
        this.exposeMask.typedValue = typedValue;
        this.currentMask = this.exposeMask;
        this._applyDispatch();
        return;
      }
      let unmaskedValue = String(typedValue);

      // double check it
      if (this.currentMask) {
        this.currentMask.typedValue = typedValue;
        unmaskedValue = this.currentMask.unmaskedValue;
      }
      this.unmaskedValue = unmaskedValue;
    }
    get displayValue() {
      return this.currentMask ? this.currentMask.displayValue : '';
    }
    get isComplete() {
      var _this$currentMask2;
      return Boolean((_this$currentMask2 = this.currentMask) == null ? void 0 : _this$currentMask2.isComplete);
    }
    get isFilled() {
      var _this$currentMask3;
      return Boolean((_this$currentMask3 = this.currentMask) == null ? void 0 : _this$currentMask3.isFilled);
    }
    remove(fromPos, toPos) {
      const details = new ChangeDetails();
      if (this.currentMask) {
        details.aggregate(this.currentMask.remove(fromPos, toPos))
        // update with dispatch
        .aggregate(this._applyDispatch());
      }
      return details;
    }
    get state() {
      var _this$currentMask4;
      return {
        ...super.state,
        _rawInputValue: this.rawInputValue,
        compiledMasks: this.compiledMasks.map(m => m.state),
        currentMaskRef: this.currentMask,
        currentMask: (_this$currentMask4 = this.currentMask) == null ? void 0 : _this$currentMask4.state
      };
    }
    set state(state) {
      const {
        compiledMasks,
        currentMaskRef,
        currentMask,
        ...maskedState
      } = state;
      if (compiledMasks) this.compiledMasks.forEach((m, mi) => m.state = compiledMasks[mi]);
      if (currentMaskRef != null) {
        this.currentMask = currentMaskRef;
        this.currentMask.state = currentMask;
      }
      super.state = maskedState;
    }
    extractInput(fromPos, toPos, flags) {
      return this.currentMask ? this.currentMask.extractInput(fromPos, toPos, flags) : '';
    }
    extractTail(fromPos, toPos) {
      return this.currentMask ? this.currentMask.extractTail(fromPos, toPos) : super.extractTail(fromPos, toPos);
    }
    doCommit() {
      if (this.currentMask) this.currentMask.doCommit();
      super.doCommit();
    }
    nearestInputPos(cursorPos, direction) {
      return this.currentMask ? this.currentMask.nearestInputPos(cursorPos, direction) : super.nearestInputPos(cursorPos, direction);
    }
    get overwrite() {
      return this.currentMask ? this.currentMask.overwrite : this._overwrite;
    }
    set overwrite(overwrite) {
      this._overwrite = overwrite;
    }
    get eager() {
      return this.currentMask ? this.currentMask.eager : this._eager;
    }
    set eager(eager) {
      this._eager = eager;
    }
    get skipInvalid() {
      return this.currentMask ? this.currentMask.skipInvalid : this._skipInvalid;
    }
    set skipInvalid(skipInvalid) {
      this._skipInvalid = skipInvalid;
    }
    get autofix() {
      return this.currentMask ? this.currentMask.autofix : this._autofix;
    }
    set autofix(autofix) {
      this._autofix = autofix;
    }
    maskEquals(mask) {
      return Array.isArray(mask) ? this.compiledMasks.every((m, mi) => {
        if (!mask[mi]) return;
        const {
          mask: oldMask,
          ...restOpts
        } = mask[mi];
        return objectIncludes(m, restOpts) && m.maskEquals(oldMask);
      }) : super.maskEquals(mask);
    }
    typedValueEquals(value) {
      var _this$currentMask5;
      return Boolean((_this$currentMask5 = this.currentMask) == null ? void 0 : _this$currentMask5.typedValueEquals(value));
    }
  }
  /** Currently chosen mask */
  /** Currently chosen mask */
  /** Compliled {@link Masked} options */
  /** Chooses {@link Masked} depending on input value */
  MaskedDynamic.DEFAULTS = {
    ...Masked.DEFAULTS,
    dispatch: (appended, masked, flags, tail) => {
      if (!masked.compiledMasks.length) return;
      const inputValue = masked.rawInputValue;

      // simulate input
      const inputs = masked.compiledMasks.map((m, index) => {
        const isCurrent = masked.currentMask === m;
        const startInputPos = isCurrent ? m.displayValue.length : m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT);
        if (m.rawInputValue !== inputValue) {
          m.reset();
          m.append(inputValue, {
            raw: true
          });
        } else if (!isCurrent) {
          m.remove(startInputPos);
        }
        m.append(appended, masked.currentMaskFlags(flags));
        m.appendTail(tail);
        return {
          index,
          weight: m.rawInputValue.length,
          totalInputPositions: m.totalInputPositions(0, Math.max(startInputPos, m.nearestInputPos(m.displayValue.length, DIRECTION.FORCE_LEFT)))
        };
      });

      // pop masks with longer values first
      inputs.sort((i1, i2) => i2.weight - i1.weight || i2.totalInputPositions - i1.totalInputPositions);
      return masked.compiledMasks[inputs[0].index];
    }
  };
  IMask.MaskedDynamic = MaskedDynamic;

  /** Pattern which validates enum values */
  class MaskedEnum extends MaskedPattern {
    constructor(opts) {
      super({
        ...MaskedEnum.DEFAULTS,
        ...opts
      }); // mask will be created in _update
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      const {
        enum: enum_,
        ...eopts
      } = opts;
      if (enum_) {
        const lengths = enum_.map(e => e.length);
        const requiredLength = Math.min(...lengths);
        const optionalLength = Math.max(...lengths) - requiredLength;
        eopts.mask = '*'.repeat(requiredLength);
        if (optionalLength) eopts.mask += '[' + '*'.repeat(optionalLength) + ']';
        this.enum = enum_;
      }
      super._update(eopts);
    }
    _appendCharRaw(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      const matchFrom = Math.min(this.nearestInputPos(0, DIRECTION.FORCE_RIGHT), this.value.length);
      const matches = this.enum.filter(e => this.matchValue(e, this.unmaskedValue + ch, matchFrom));
      if (matches.length) {
        if (matches.length === 1) {
          this._forEachBlocksInRange(0, this.value.length, (b, bi) => {
            const mch = matches[0][bi];
            if (bi >= this.value.length || mch === b.value) return;
            b.reset();
            b._appendChar(mch, flags);
          });
        }
        const d = super._appendCharRaw(matches[0][this.value.length], flags);
        if (matches.length === 1) {
          matches[0].slice(this.unmaskedValue.length).split('').forEach(mch => d.aggregate(super._appendCharRaw(mch)));
        }
        return d;
      }
      return new ChangeDetails({
        skip: !this.isComplete
      });
    }
    extractTail(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      // just drop tail
      return new ContinuousTailDetails('', fromPos);
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      if (fromPos === toPos) return new ChangeDetails();
      const matchFrom = Math.min(super.nearestInputPos(0, DIRECTION.FORCE_RIGHT), this.value.length);
      let pos;
      for (pos = fromPos; pos >= 0; --pos) {
        const matches = this.enum.filter(e => this.matchValue(e, this.value.slice(matchFrom, pos), matchFrom));
        if (matches.length > 1) break;
      }
      const details = super.remove(pos, toPos);
      details.tailShift += pos - fromPos;
      return details;
    }
    get isComplete() {
      return this.enum.indexOf(this.value) >= 0;
    }
  }
  /** Match enum value */
  MaskedEnum.DEFAULTS = {
    ...MaskedPattern.DEFAULTS,
    matchValue: (estr, istr, matchFrom) => estr.indexOf(istr, matchFrom) === matchFrom
  };
  IMask.MaskedEnum = MaskedEnum;

  /** Masking by custom Function */
  class MaskedFunction extends Masked {
    /** */

    /** Enable characters overwriting */

    /** */

    /** */

    /** */

    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      super._update({
        ...opts,
        validate: opts.mask
      });
    }
  }
  IMask.MaskedFunction = MaskedFunction;

  var _MaskedNumber;
  /** Number mask */
  class MaskedNumber extends Masked {
    /** Single char */

    /** Single char */

    /** Array of single chars */

    /** */

    /** */

    /** Digits after point */

    /** Flag to remove leading and trailing zeros in the end of editing */

    /** Flag to pad trailing zeros after point in the end of editing */

    /** Enable characters overwriting */

    /** */

    /** */

    /** */

    /** Format typed value to string */

    /** Parse string to get typed value */

    constructor(opts) {
      super({
        ...MaskedNumber.DEFAULTS,
        ...opts
      });
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      super._update(opts);
      this._updateRegExps();
    }
    _updateRegExps() {
      const start = '^' + (this.allowNegative ? '[+|\\-]?' : '');
      const mid = '\\d*';
      const end = (this.scale ? "(" + escapeRegExp(this.radix) + "\\d{0," + this.scale + "})?" : '') + '$';
      this._numberRegExp = new RegExp(start + mid + end);
      this._mapToRadixRegExp = new RegExp("[" + this.mapToRadix.map(escapeRegExp).join('') + "]", 'g');
      this._thousandsSeparatorRegExp = new RegExp(escapeRegExp(this.thousandsSeparator), 'g');
    }
    _removeThousandsSeparators(value) {
      return value.replace(this._thousandsSeparatorRegExp, '');
    }
    _insertThousandsSeparators(value) {
      // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
      const parts = value.split(this.radix);
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, this.thousandsSeparator);
      return parts.join(this.radix);
    }
    doPrepareChar(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      const [prepCh, details] = super.doPrepareChar(this._removeThousandsSeparators(this.scale && this.mapToRadix.length && (
      /*
        radix should be mapped when
        1) input is done from keyboard = flags.input && flags.raw
        2) unmasked value is set = !flags.input && !flags.raw
        and should not be mapped when
        1) value is set = flags.input && !flags.raw
        2) raw value is set = !flags.input && flags.raw
      */
      flags.input && flags.raw || !flags.input && !flags.raw) ? ch.replace(this._mapToRadixRegExp, this.radix) : ch), flags);
      if (ch && !prepCh) details.skip = true;
      if (prepCh && !this.allowPositive && !this.value && prepCh !== '-') details.aggregate(this._appendChar('-'));
      return [prepCh, details];
    }
    _separatorsCount(to, extendOnSeparators) {
      if (extendOnSeparators === void 0) {
        extendOnSeparators = false;
      }
      let count = 0;
      for (let pos = 0; pos < to; ++pos) {
        if (this._value.indexOf(this.thousandsSeparator, pos) === pos) {
          ++count;
          if (extendOnSeparators) to += this.thousandsSeparator.length;
        }
      }
      return count;
    }
    _separatorsCountFromSlice(slice) {
      if (slice === void 0) {
        slice = this._value;
      }
      return this._separatorsCount(this._removeThousandsSeparators(slice).length, true);
    }
    extractInput(fromPos, toPos, flags) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);
      return this._removeThousandsSeparators(super.extractInput(fromPos, toPos, flags));
    }
    _appendCharRaw(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      const prevBeforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;
      const prevBeforeTailSeparatorsCount = this._separatorsCountFromSlice(prevBeforeTailValue);
      this._value = this._removeThousandsSeparators(this.value);
      const oldValue = this._value;
      this._value += ch;
      const num = this.number;
      let accepted = !isNaN(num);
      let skip = false;
      if (accepted) {
        let fixedNum;
        if (this.min != null && this.min < 0 && this.number < this.min) fixedNum = this.min;
        if (this.max != null && this.max > 0 && this.number > this.max) fixedNum = this.max;
        if (fixedNum != null) {
          if (this.autofix) {
            this._value = this.format(fixedNum, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);
            skip || (skip = oldValue === this._value && !flags.tail); // if not changed on tail it's still ok to proceed
          } else {
            accepted = false;
          }
        }
        accepted && (accepted = Boolean(this._value.match(this._numberRegExp)));
      }
      let appendDetails;
      if (!accepted) {
        this._value = oldValue;
        appendDetails = new ChangeDetails();
      } else {
        appendDetails = new ChangeDetails({
          inserted: this._value.slice(oldValue.length),
          rawInserted: skip ? '' : ch,
          skip
        });
      }
      this._value = this._insertThousandsSeparators(this._value);
      const beforeTailValue = flags.tail && flags._beforeTailState ? flags._beforeTailState._value : this._value;
      const beforeTailSeparatorsCount = this._separatorsCountFromSlice(beforeTailValue);
      appendDetails.tailShift += (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length;
      return appendDetails;
    }
    _findSeparatorAround(pos) {
      if (this.thousandsSeparator) {
        const searchFrom = pos - this.thousandsSeparator.length + 1;
        const separatorPos = this.value.indexOf(this.thousandsSeparator, searchFrom);
        if (separatorPos <= pos) return separatorPos;
      }
      return -1;
    }
    _adjustRangeWithSeparators(from, to) {
      const separatorAroundFromPos = this._findSeparatorAround(from);
      if (separatorAroundFromPos >= 0) from = separatorAroundFromPos;
      const separatorAroundToPos = this._findSeparatorAround(to);
      if (separatorAroundToPos >= 0) to = separatorAroundToPos + this.thousandsSeparator.length;
      return [from, to];
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      [fromPos, toPos] = this._adjustRangeWithSeparators(fromPos, toPos);
      const valueBeforePos = this.value.slice(0, fromPos);
      const valueAfterPos = this.value.slice(toPos);
      const prevBeforeTailSeparatorsCount = this._separatorsCount(valueBeforePos.length);
      this._value = this._insertThousandsSeparators(this._removeThousandsSeparators(valueBeforePos + valueAfterPos));
      const beforeTailSeparatorsCount = this._separatorsCountFromSlice(valueBeforePos);
      return new ChangeDetails({
        tailShift: (beforeTailSeparatorsCount - prevBeforeTailSeparatorsCount) * this.thousandsSeparator.length
      });
    }
    nearestInputPos(cursorPos, direction) {
      if (!this.thousandsSeparator) return cursorPos;
      switch (direction) {
        case DIRECTION.NONE:
        case DIRECTION.LEFT:
        case DIRECTION.FORCE_LEFT:
          {
            const separatorAtLeftPos = this._findSeparatorAround(cursorPos - 1);
            if (separatorAtLeftPos >= 0) {
              const separatorAtLeftEndPos = separatorAtLeftPos + this.thousandsSeparator.length;
              if (cursorPos < separatorAtLeftEndPos || this.value.length <= separatorAtLeftEndPos || direction === DIRECTION.FORCE_LEFT) {
                return separatorAtLeftPos;
              }
            }
            break;
          }
        case DIRECTION.RIGHT:
        case DIRECTION.FORCE_RIGHT:
          {
            const separatorAtRightPos = this._findSeparatorAround(cursorPos);
            if (separatorAtRightPos >= 0) {
              return separatorAtRightPos + this.thousandsSeparator.length;
            }
          }
      }
      return cursorPos;
    }
    doCommit() {
      if (this.value) {
        const number = this.number;
        let validnum = number;

        // check bounds
        if (this.min != null) validnum = Math.max(validnum, this.min);
        if (this.max != null) validnum = Math.min(validnum, this.max);
        if (validnum !== number) this.unmaskedValue = this.format(validnum, this);
        let formatted = this.value;
        if (this.normalizeZeros) formatted = this._normalizeZeros(formatted);
        if (this.padFractionalZeros && this.scale > 0) formatted = this._padFractionalZeros(formatted);
        this._value = formatted;
      }
      super.doCommit();
    }
    _normalizeZeros(value) {
      const parts = this._removeThousandsSeparators(value).split(this.radix);

      // remove leading zeros
      parts[0] = parts[0].replace(/^(\D*)(0*)(\d*)/, (match, sign, zeros, num) => sign + num);
      // add leading zero
      if (value.length && !/\d$/.test(parts[0])) parts[0] = parts[0] + '0';
      if (parts.length > 1) {
        parts[1] = parts[1].replace(/0*$/, ''); // remove trailing zeros
        if (!parts[1].length) parts.length = 1; // remove fractional
      }
      return this._insertThousandsSeparators(parts.join(this.radix));
    }
    _padFractionalZeros(value) {
      if (!value) return value;
      const parts = value.split(this.radix);
      if (parts.length < 2) parts.push('');
      parts[1] = parts[1].padEnd(this.scale, '0');
      return parts.join(this.radix);
    }
    doSkipInvalid(ch, flags, checkTail) {
      if (flags === void 0) {
        flags = {};
      }
      const dropFractional = this.scale === 0 && ch !== this.thousandsSeparator && (ch === this.radix || ch === MaskedNumber.UNMASKED_RADIX || this.mapToRadix.includes(ch));
      return super.doSkipInvalid(ch, flags, checkTail) && !dropFractional;
    }
    get unmaskedValue() {
      return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix, MaskedNumber.UNMASKED_RADIX);
    }
    set unmaskedValue(unmaskedValue) {
      super.unmaskedValue = unmaskedValue;
    }
    get typedValue() {
      return this.parse(this.unmaskedValue, this);
    }
    set typedValue(n) {
      this.rawInputValue = this.format(n, this).replace(MaskedNumber.UNMASKED_RADIX, this.radix);
    }

    /** Parsed Number */
    get number() {
      return this.typedValue;
    }
    set number(number) {
      this.typedValue = number;
    }
    get allowNegative() {
      return this.min != null && this.min < 0 || this.max != null && this.max < 0;
    }
    get allowPositive() {
      return this.min != null && this.min > 0 || this.max != null && this.max > 0;
    }
    typedValueEquals(value) {
      // handle  0 -> '' case (typed = 0 even if value = '')
      // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
      return (super.typedValueEquals(value) || MaskedNumber.EMPTY_VALUES.includes(value) && MaskedNumber.EMPTY_VALUES.includes(this.typedValue)) && !(value === 0 && this.value === '');
    }
  }
  _MaskedNumber = MaskedNumber;
  MaskedNumber.UNMASKED_RADIX = '.';
  MaskedNumber.EMPTY_VALUES = [...Masked.EMPTY_VALUES, 0];
  MaskedNumber.DEFAULTS = {
    ...Masked.DEFAULTS,
    mask: Number,
    radix: ',',
    thousandsSeparator: '',
    mapToRadix: [_MaskedNumber.UNMASKED_RADIX],
    min: Number.MIN_SAFE_INTEGER,
    max: Number.MAX_SAFE_INTEGER,
    scale: 2,
    normalizeZeros: true,
    padFractionalZeros: false,
    parse: Number,
    format: n => n.toLocaleString('en-US', {
      useGrouping: false,
      maximumFractionDigits: 20
    })
  };
  IMask.MaskedNumber = MaskedNumber;

  /** Mask pipe source and destination types */
  const PIPE_TYPE = {
    MASKED: 'value',
    UNMASKED: 'unmaskedValue',
    TYPED: 'typedValue'
  };
  /** Creates new pipe function depending on mask type, source and destination options */
  function createPipe(arg, from, to) {
    if (from === void 0) {
      from = PIPE_TYPE.MASKED;
    }
    if (to === void 0) {
      to = PIPE_TYPE.MASKED;
    }
    const masked = createMask(arg);
    return value => masked.runIsolated(m => {
      m[from] = value;
      return m[to];
    });
  }

  /** Pipes value through mask depending on mask type, source and destination options */
  function pipe(value, mask, from, to) {
    return createPipe(mask, from, to)(value);
  }
  IMask.PIPE_TYPE = PIPE_TYPE;
  IMask.createPipe = createPipe;
  IMask.pipe = pipe;

  /** Pattern mask */
  class RepeatBlock extends MaskedPattern {
    get repeatFrom() {
      var _ref;
      return (_ref = Array.isArray(this.repeat) ? this.repeat[0] : this.repeat === Infinity ? 0 : this.repeat) != null ? _ref : 0;
    }
    get repeatTo() {
      var _ref2;
      return (_ref2 = Array.isArray(this.repeat) ? this.repeat[1] : this.repeat) != null ? _ref2 : Infinity;
    }
    constructor(opts) {
      super(opts);
    }
    updateOptions(opts) {
      super.updateOptions(opts);
    }
    _update(opts) {
      var _ref3, _ref4, _this$_blocks;
      const {
        repeat,
        ...blockOpts
      } = normalizeOpts(opts); // TODO type
      this._blockOpts = Object.assign({}, this._blockOpts, blockOpts);
      const block = createMask(this._blockOpts);
      this.repeat = (_ref3 = (_ref4 = repeat != null ? repeat : block.repeat) != null ? _ref4 : this.repeat) != null ? _ref3 : Infinity; // TODO type

      super._update({
        mask: 'm'.repeat(Math.max(this.repeatTo === Infinity && ((_this$_blocks = this._blocks) == null ? void 0 : _this$_blocks.length) || 0, this.repeatFrom)),
        blocks: {
          m: block
        },
        eager: block.eager,
        overwrite: block.overwrite,
        skipInvalid: block.skipInvalid,
        lazy: block.lazy,
        placeholderChar: block.placeholderChar,
        displayChar: block.displayChar
      });
    }
    _allocateBlock(bi) {
      if (bi < this._blocks.length) return this._blocks[bi];
      if (this.repeatTo === Infinity || this._blocks.length < this.repeatTo) {
        this._blocks.push(createMask(this._blockOpts));
        this.mask += 'm';
        return this._blocks[this._blocks.length - 1];
      }
    }
    _appendCharRaw(ch, flags) {
      if (flags === void 0) {
        flags = {};
      }
      const details = new ChangeDetails();
      for (let bi = (_this$_mapPosToBlock$ = (_this$_mapPosToBlock = this._mapPosToBlock(this.displayValue.length)) == null ? void 0 : _this$_mapPosToBlock.index) != null ? _this$_mapPosToBlock$ : Math.max(this._blocks.length - 1, 0), block, allocated;
      // try to get a block or
      // try to allocate a new block if not allocated already
      block = (_this$_blocks$bi = this._blocks[bi]) != null ? _this$_blocks$bi : allocated = !allocated && this._allocateBlock(bi); ++bi) {
        var _this$_mapPosToBlock$, _this$_mapPosToBlock, _this$_blocks$bi, _flags$_beforeTailSta;
        const blockDetails = block._appendChar(ch, {
          ...flags,
          _beforeTailState: (_flags$_beforeTailSta = flags._beforeTailState) == null || (_flags$_beforeTailSta = _flags$_beforeTailSta._blocks) == null ? void 0 : _flags$_beforeTailSta[bi]
        });
        if (blockDetails.skip && allocated) {
          // remove the last allocated block and break
          this._blocks.pop();
          this.mask = this.mask.slice(1);
          break;
        }
        details.aggregate(blockDetails);
        if (blockDetails.consumed) break; // go next char
      }
      return details;
    }
    _trimEmptyTail(fromPos, toPos) {
      var _this$_mapPosToBlock2, _this$_mapPosToBlock3;
      if (fromPos === void 0) {
        fromPos = 0;
      }
      const firstBlockIndex = Math.max(((_this$_mapPosToBlock2 = this._mapPosToBlock(fromPos)) == null ? void 0 : _this$_mapPosToBlock2.index) || 0, this.repeatFrom, 0);
      let lastBlockIndex;
      if (toPos != null) lastBlockIndex = (_this$_mapPosToBlock3 = this._mapPosToBlock(toPos)) == null ? void 0 : _this$_mapPosToBlock3.index;
      if (lastBlockIndex == null) lastBlockIndex = this._blocks.length - 1;
      let removeCount = 0;
      for (let blockIndex = lastBlockIndex; firstBlockIndex <= blockIndex; --blockIndex, ++removeCount) {
        if (this._blocks[blockIndex].unmaskedValue) break;
      }
      if (removeCount) {
        this._blocks.splice(lastBlockIndex - removeCount + 1, removeCount);
        this.mask = this.mask.slice(removeCount);
      }
    }
    reset() {
      super.reset();
      this._trimEmptyTail();
    }
    remove(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos === void 0) {
        toPos = this.displayValue.length;
      }
      const removeDetails = super.remove(fromPos, toPos);
      this._trimEmptyTail(fromPos, toPos);
      return removeDetails;
    }
    totalInputPositions(fromPos, toPos) {
      if (fromPos === void 0) {
        fromPos = 0;
      }
      if (toPos == null && this.repeatTo === Infinity) return Infinity;
      return super.totalInputPositions(fromPos, toPos);
    }
    get state() {
      return super.state;
    }
    set state(state) {
      this._blocks.length = state._blocks.length;
      this.mask = this.mask.slice(0, this._blocks.length);
      super.state = state;
    }
  }
  IMask.RepeatBlock = RepeatBlock;

  try {
    globalThis.IMask = IMask;
  } catch {}

  var css_248z$B = css`:host{--sgds-spinner-bg:var(--sgds-primary-surface-default);display:inline-flex}:host([variant=neutral]){--sgds-spinner-bg:var(--sgds-neutral-surface-default)}.spinner-wrapper{align-items:center;display:flex;flex-direction:column;gap:var(--sgds-gap-2-xs)}.spinner{animation:spinner .75s linear infinite;border-radius:50%;border-right:.25em solid var(--sgds-bg-translucent);border:.25em solid var(--sgds-bg-translucent);border-right-color:var(--sgds-spinner-bg);color:var(--sgds-spinner-color);display:inline-flex;height:var(--sgds-dimension-32);width:var(--sgds-dimension-32)}.spinner-sm{height:var(--sgds-dimension-24);width:var(--sgds-dimension-24)}.spinner-lg{height:var(--sgds-dimension-48);width:var(--sgds-dimension-48)}.spinner-label{color:var(--sgds-neutral-color-default);font-size:var(--sgds-font-size-1)}@media (prefers-reduced-motion:reduce){.spinner{animation-duration:1.5s}}

/*! CSS Used keyframes */@keyframes spinner{to{transform:rotate(1turn)}}.sr-only{clip:rect(0,0,0,0);border:0;height:1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}`;

  /**
   * @summary Spinners notify the users that their request is being processed.
   *
   */
  class SgdsSpinner extends SgdsElement {
      constructor() {
          super(...arguments);
          /** The variant of spinner */
          this.variant = "primary";
          /** Specifies a small, medium or large button, the size is medium by default. */
          this.size = "md";
      }
      render() {
          return html `
      <div class="spinner-wrapper">
        <div
          class="spinner ${classMap({
            [`spinner-${this.size}`]: this.size
        })}"
          role="status"
        >
          ${this.label ? nothing : html `<span class="sr-only">Loading...</span>`}
        </div>
        ${this.label ? html `<span class="spinner-label">${this.label}</span>` : nothing}
      </div>
    `;
      }
  }
  SgdsSpinner.styles = [...SgdsElement.styles, css_248z$S, css_248z$B];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsSpinner.prototype, "variant", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsSpinner.prototype, "size", void 0);
  __decorate([
      property({ reflect: true, type: String })
  ], SgdsSpinner.prototype, "label", void 0);

  var css_248z$A = css`:host{--input-border-radius:var(--sgds-form-border-radius-md)}.form-control-container{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}.form-control-container.disabled{opacity:var(--sgds-opacity-50)}.form-control-group{align-items:center;background-color:var(--sgds-form-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-default);border-radius:var(--input-border-radius);display:flex;gap:var(--sgds-form-gap-md);height:var(--sgds-dimension-48);justify-content:center;min-width:var(--sgds-dimension-256);padding:0 var(--sgds-form-padding-x);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:-webkit-fill-available;width:-moz-available}.form-control{appearance:none;background-clip:padding-box;background:none;border:none;color:var(--sgds-form-color-default);display:block;flex-grow:1;font-size:var(--sgds-font-size-2);line-height:var(--sgds-line-height-body);outline:none;padding:0}.form-control-group>.form-control:focus{z-index:3}@media (prefers-reduced-motion:reduce){.form-control-group{transition:none}}.form-control-group.readonly{border-color:var(--sgds-border-color-muted)}.form-control-group:not(.disabled):not(.is-invalid):hover{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis)}.form-control-group:not(.disabled):not(.is-invalid):focus,.form-control-group:not(.disabled):not(.is-invalid):focus-within{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis);box-shadow:var(--sgds-form-box-shadow-focus);outline:0}.form-control-group.is-invalid{border:var(--sgds-form-border-width-thick) solid var(--sgds-form-danger-border-color-default)}.form-control-group.disabled{background-color:var(--sgds-form-surface-muted)}:host(.quantity-toggle) input::-webkit-inner-spin-button{appearance:none;margin:0}:host(.quantity-toggle) input{text-align:center}.form-control-prefix,.form-control-suffix{color:var(--sgds-form-color-subtle);display:flex;flex-wrap:wrap;gap:var(--sgds-gap-xs)}.form-control-group.quantity-toggle{padding:0}`;

  /**
   * @summary Text inputs allow your users to enter letters, numbers and symbols on a single line.
   *
   * @slot icon - The slot for leading icon of text input
   *
   * @event sgds-change - Emitted when an alteration to the control's value is committed by the user.
   * @event sgds-input - Emitted when the control receives input and its value changes.
   * @event sgds-focus - Emitted when input is in focus.
   * @event sgds-blur - Emitted when input is not in focus.
   * @event sgds-invalid - Emitted when input is invalid
   * @event sgds-valid - Emitted when input is valid
   *
   */
  class SgdsInput extends SgdsFormValidatorMixin(FormControlElement) {
      constructor() {
          super(...arguments);
          this.type = "text";
          /** The input's placeholder text. */
          this.placeholder = "placeholder";
          /** Autofocus the input */
          this.autofocus = false;
          /** Makes the input readonly. */
          this.readonly = false;
          /**Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
          this.defaultValue = "";
          /** Marks the component as valid. */
          this.valid = false;
          /** Marks the component as loading. */
          this.loading = false;
          /** Makes the input a required field. */
          this.required = false;
          /**The input's value attribute. */
          this.value = "";
          this._isTouched = false;
      }
      /** Sets focus on the input. */
      focus(options) {
          this.input.focus(options);
      }
      /** Sets blur on the input. */
      blur() {
          this.input.blur();
      }
      /** Programatically sets the invalid state of the input. Pass in boolean value in the argument */
      setInvalid(bool) {
          this.invalid = bool;
          if (bool) {
              this.emit("sgds-invalid");
          }
          else {
              this.emit("sgds-valid");
          }
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      setValidity(flags, message, anchor) {
          return this._mixinSetValidity(flags, message, anchor);
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      _handleFocus() {
          this.emit("sgds-focus");
      }
      _handleBlur() {
          const sgdsBlur = this.emit("sgds-blur", { cancelable: true });
          if (sgdsBlur.defaultPrevented)
              return;
          this._isTouched = true;
      }
      _handleClick() {
          this.focus();
      }
      _handleChange(e) {
          this.value = this.input.value;
          const sgdsChange = this.emit("sgds-change", { cancelable: true });
          if (sgdsChange.defaultPrevented)
              return;
          super._mixinHandleChange(e);
      }
      _handleInputChange(e) {
          this.value = this.input.value;
          const sgdsInput = this.emit("sgds-input", { cancelable: true });
          if (sgdsInput.defaultPrevented)
              return;
          super._mixinHandleInputChange(e);
      }
      /** @internal */
      _handleIsTouched() {
          if (this._isTouched) {
              this.setInvalid(!this._mixinCheckValidity());
          }
      }
      _handleDisabledChange() {
          // Disabled form controls are always valid, so we need to recheck validity when the state changes
          this.setInvalid(false);
      }
      _renderInput() {
          const wantFeedbackStyle = this.hasFeedback === "both" || this.hasFeedback === "style";
          return html `
      <div
        class="form-control-group ${classMap({
            disabled: this.disabled,
            readonly: this.readonly,
            "is-invalid": this.invalid && wantFeedbackStyle
        })}"
        @click=${this._handleClick}
      >
        <slot name="icon"></slot>
        ${this.prefix ? html `<span class="form-control-prefix">${this.prefix}</span>` : nothing}
        <input
          class="form-control"
          type=${this.type}
          id=${this._controlId}
          name=${ifDefined(this.name)}
          placeholder=${ifDefined(this.placeholder)}
          aria-invalid=${this.invalid ? "true" : "false"}
          pattern=${ifDefined(this.pattern)}
          ?autofocus=${this.autofocus}
          ?disabled=${this.disabled}
          ?readonly=${this.readonly}
          ?required=${this.required}
          .value=${live(this.value)}
          minlength=${ifDefined(this.minlength)}
          maxlength=${ifDefined(this.maxlength)}
          min=${ifDefined(this.min)}
          max=${ifDefined(this.max)}
          step=${ifDefined(this.step)}
          @input=${(e) => this._handleInputChange(e)}
          @change=${(e) => this._handleChange(e)}
          @invalid=${() => this.setInvalid(true)}
          @focus=${this._handleFocus}
          @blur=${this._handleBlur}
          aria-describedby=${ifDefined(this.invalid && this.hasFeedback ? `${this._controlId}-invalid` : undefined)}
          aria-labelledby="${this._labelId} ${this._controlId}Help ${this.invalid && this.hasFeedback
            ? `${this._controlId}-invalid`
            : ""}"
        />
        ${this.loading ? html `<sgds-spinner size="sm"></sgds-spinner>` : nothing}
        ${this.valid ? html `<sgds-icon name="check-circle-fill" class="valid-icon"></sgds-icon>` : nothing}
        ${this.suffix ? html `<span class="form-control-suffix">${this.suffix}</span>` : nothing}
      </div>
    `;
      }
      _renderFeedback() {
          const wantFeedbackText = this.hasFeedback === "both" || this.hasFeedback === "text";
          return this.invalid && wantFeedbackText
              ? html ` <div class="invalid-feedback-container">
          <sgds-icon name="exclamation-circle-fill" size="md"></sgds-icon>
          <div id="${this._controlId}-invalid" class="invalid-feedback">
            ${this.invalidFeedback ? this.invalidFeedback : this.input.validationMessage}
          </div>
        </div>`
              : html `${this._renderHintText()}`;
      }
      _renderLabel() {
          const labelTemplate = html `
      <label
        for=${this._controlId}
        id=${this._labelId}
        class=${classMap({
            "form-label": true,
            required: this.required
        })}
        >${this.label}</label
      >
    `;
          return this.label && labelTemplate;
      }
      _renderHintText() {
          const hintTextTemplate = html ` <div id="${this._controlId}Help" class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      render() {
          return html `
      <div
        class="form-control-container ${classMap({
            disabled: this.disabled
        })}"
      >
        ${this._renderLabel()} ${this._renderInput()} ${this._renderFeedback()}
      </div>
    `;
      }
  }
  SgdsInput.styles = [...FormControlElement.styles, css_248z$J, css_248z$A];
  /** @internal */
  SgdsInput.dependencies = {
      "sgds-spinner": SgdsSpinner,
      "sgds-icon": SgdsIcon
  };
  __decorate([
      property({ reflect: true })
  ], SgdsInput.prototype, "type", void 0);
  __decorate([
      property({ type: String })
  ], SgdsInput.prototype, "prefix", void 0);
  __decorate([
      property({ type: String })
  ], SgdsInput.prototype, "suffix", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsInput.prototype, "minlength", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsInput.prototype, "maxlength", void 0);
  __decorate([
      property()
  ], SgdsInput.prototype, "min", void 0);
  __decorate([
      property()
  ], SgdsInput.prototype, "max", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsInput.prototype, "placeholder", void 0);
  __decorate([
      property({ type: String })
  ], SgdsInput.prototype, "pattern", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsInput.prototype, "autofocus", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsInput.prototype, "readonly", void 0);
  __decorate([
      property()
  ], SgdsInput.prototype, "step", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsInput.prototype, "hasFeedback", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsInput.prototype, "invalidFeedback", void 0);
  __decorate([
      defaultValue()
  ], SgdsInput.prototype, "defaultValue", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsInput.prototype, "valid", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsInput.prototype, "loading", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsInput.prototype, "required", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsInput.prototype, "value", void 0);
  __decorate([
      state()
  ], SgdsInput.prototype, "_isTouched", void 0);
  __decorate([
      watch("_isTouched", { waitUntilFirstUpdate: true })
  ], SgdsInput.prototype, "_handleIsTouched", null);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsInput.prototype, "_handleDisabledChange", null);

  var css_248z$z = css`.input-container{display:flex;flex-direction:row;width:-webkit-fill-available;width:-moz-available}.form-control-group{border-right:0}.input-feedback{display:flex;flex-direction:column;width:-webkit-fill-available;width:-moz-available}.calendar-btn{all:unset}`;

  class DatepickerInput extends SgdsInput {
      constructor() {
          super();
          /** Date format reflected on input  */
          this.dateFormat = "DD/MM/YYYY";
          /** Changes DatePicker to single date selection or range date selection */
          this.mode = "single";
          this._validateInput = async () => {
              const dates = this.mask.value.split(" - ");
              const noEmptyDates = dates.filter(d => d !== this.dateFormat);
              const dateArray = noEmptyDates.map(date => setTimeToNoon(parse(date, DATE_PATTERNS[this.dateFormat].fnsPattern, new Date())));
              const invalidDates = dateArray.filter(date => !isValid(date) ||
                  isBefore(date, new Date(0, 0, 1)) ||
                  isBefore(date, setTimeToNoon(new Date(this.minDate))) ||
                  isAfter(date, setTimeToNoon(new Date(this.maxDate))));
              if (invalidDates.length > 0) {
                  this.setInvalid(true);
                  return this.emit("sgds-invalid-input");
              }
              if (this.mode === "range" && dateArray.length === 1) {
                  this.setInvalid(true);
                  return this.emit("sgds-invalid-input");
              }
              if (invalidDates.length === 0 && dateArray.length > 0) {
                  this.setInvalid(false);
                  return this.emit("sgds-selectdates-input", { detail: dateArray });
              }
              if (dateArray.length === 0 && invalidDates.length === 0) {
                  this.setInvalid(false);
                  return this.emit("sgds-empty-input");
              }
          };
          this.type = "text";
          this._handleBlur = () => null;
      }
      async _handleChange(e) {
          this.value = this.input.value;
          this.emit("sgds-change");
          super._mixinHandleChange(e);
          await this._validateInput();
      }
      async firstUpdated(changedProperties) {
          super.firstUpdated(changedProperties);
          this._applyInputMask(this.dateFormat);
      }
      async _applyInputMask(dateFormat) {
          const shadowInput = await this.shadowInput;
          const imPattern = this.mode === "single" ? DATE_PATTERNS[dateFormat].imPattern : DATE_PATTERNS[dateFormat].imRangePattern;
          const blocks = {
              d: { mask: IMask.MaskedRange, placeholderChar: "D", from: 0, to: 9, maxLength: 1 },
              m: { mask: IMask.MaskedRange, placeholderChar: "M", from: 0, to: 9, maxLength: 1 },
              y: { mask: IMask.MaskedRange, placeholderChar: "Y", from: 0, to: 9, maxLength: 1 },
              D: { mask: IMask.MaskedRange, placeholderChar: "D", from: 0, to: 9, maxLength: 1 },
              M: { mask: IMask.MaskedRange, placeholderChar: "M", from: 0, to: 9, maxLength: 1 },
              Y: { mask: IMask.MaskedRange, placeholderChar: "Y", from: 0, to: 9, maxLength: 1 }
          };
          const maskOptions = {
              mask: imPattern,
              pattern: imPattern,
              eager: true,
              overwrite: true,
              // define str -> date convertion
              parse: function (str) {
                  const dates = str.split(" - ");
                  return dates.map(date => parse(date, DATE_PATTERNS[dateFormat].fnsPattern, new Date()));
              },
              format: function (dateArr) {
                  const dateStrings = dateArr.map(date => {
                      let dayStr, monthStr = "";
                      const day = date.getDate();
                      const month = date.getMonth() + 1;
                      const year = date.getFullYear();
                      if (day < 10)
                          dayStr = "0" + day;
                      if (month < 10)
                          monthStr = "0" + month;
                      return [dayStr, monthStr, year].join("/");
                  });
                  return dateStrings.join(" - ");
              },
              lazy: false,
              blocks
          };
          this.mask = IMask(shadowInput, maskOptions);
          this.mask.on("accept", () => {
              this.value = this.mask.masked.value;
              this.emit("sgds-mask-input-change", { detail: this.value });
          });
          /**
           * Validation after date is complete
           */
          this.mask.on("complete", this._validateInput);
      }
      updateMaskValue() {
          var _a;
          (_a = this.mask) === null || _a === void 0 ? void 0 : _a.updateValue();
      }
      destroyInputMask() {
          var _a;
          (_a = this.mask) === null || _a === void 0 ? void 0 : _a.destroy();
      }
      async applyInputMask() {
          return await this._applyInputMask(this.dateFormat);
      }
      async focus() {
          const input = await this.shadowInput;
          return input.focus();
      }
      render() {
          return html$1 `
      <div
        class="form-control-container ${classMap({
            disabled: this.disabled
        })}"
      >
        ${this._renderLabel()}
        <div class="input-container">
          ${this._renderInput()}
          <slot name="calendar-btn"></slot>
        </div>
        ${this._renderFeedback()}
      </div>
    `;
      }
  }
  DatepickerInput.styles = [...SgdsInput.styles, css_248z$z];
  __decorate([
      property({ type: String })
  ], DatepickerInput.prototype, "minDate", void 0);
  __decorate([
      property({ type: String })
  ], DatepickerInput.prototype, "maxDate", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], DatepickerInput.prototype, "mode", void 0);
  __decorate([
      queryAsync("input")
  ], DatepickerInput.prototype, "shadowInput", void 0);

  var css_248z$y = css`:host{--datepicker-theme-color:var(--sgds-primary);--datepicker-hover-bg:var(--sgds-primary-100);--datepicker-bg:#fff;--datepicker-close-btn-bg:var(--datepicker-theme-color);--datepicker-close-btn-hover-bg:var(--sgds-primary-700);--datepicker-close-btn-color:#fff;--datepicker-selected-date-bg:var(--sgds-primary);--datepicker-selected-date-color:#fff;font-size:var(--sgds-font-size-1)}.dropdown{display:flex;height:100%}.datepicker.dropdown-menu.show{background-color:var(--sgds-form-surface-default);display:flex;flex-direction:column;gap:var(--sgds-form-gap-sm);overflow:unset;padding:var(--sgds-form-padding-y) var(--sgds-form-padding-x);width:var(--sgds-dimension-320)}sgds-datepicker-input{--input-border-radius:var(--sgds-form-border-radius-md) 0 0 var(--sgds-form-border-radius-md);flex:1;margin-right:0}sgds-icon-button{--btn-border-radius:0 var(--sgds-form-border-radius-md) var(--sgds-form-border-radius-md) 0}.datepicker-container{display:flex}.calendar-btn:not(.with-hint-text){align-self:center}.calendar-btn:not(.with-hint-text).with-label{align-self:end}.calendar-btn.with-hint-text.with-label,.calendar-btn:not(.with-hint-text).with-label{margin-top:calc(var(--sgds-font-size-2)*var(--sgds-line-height-body) - var(--sgds-line-height-min))}.calendar-btn.with-hint-text.with-label{align-self:center}`;

  /**
   * @summary The `DatePicker` Component is built using `Dropdown`, `Input` and `Button` components. By default, the Calendar points to today's date and input has no value. Users can either pick dates from the calendar or type dates through the input
   *
   * @event sgds-change-date - Emitted when the state of datepicker's input changes during first load, close button reset click & date click. Date values can be accessed via event.target.value
   *
   * @description displayDate sets the month, year views of the calendar while focusedDate follows the focus which also directly changes
   * displayDate on certain occasions. Example, when keyboard moves up to the next month, it updates displayDate which then affect the current
   * date view of the calendar
   */
  class SgdsDatepicker extends SgdsFormValidatorMixin(DropdownElement) {
      constructor() {
          super(...arguments);
          /** When true, adds required attribute to input element */
          this.required = false;
          /** When true, adds disabled attribute to input and button element */
          this.disabled = false;
          /** The initial value of DatePicker on first load for single & range mode as array of string. eg.'["22/12/2023"]' for single & '["22/12/2023","25/12/2023"]' for range respectively  */
          this.initialValue = [];
          this.dateFormat = "DD/MM/YYYY";
          /** ISO date string to set the lowest allowable date value. e.g. "2016-05-19T12:00:00.000Z" */
          this.minDate = "";
          /** ISO date string to set the highest allowable date value. e.g. "2016-05-19T12:00:00.000Z" */
          this.maxDate = "";
          /** Changes DatePicker to single date selection or range date selection */
          this.mode = "single";
          /** Allows invalidFeedback and invalid styles to be visible with the input */
          this.hasFeedback = false;
          /** The datepicker input's label  */
          this.label = "";
          /** The datepicker input's hint text below the label */
          this.hintText = "";
          /** Controls auto-flipping of menu */
          this.noFlip = false;
          /** The drop position of menu relative to the toggle button */
          this.drop = "down";
          /**@internal */
          this.value = "";
          /**@internal */
          this.invalid = false;
          this.view = "days";
          this.selectedDateRange = [];
          this.focusedTabIndex = 3;
          this.initialDisplayDate = new Date();
          this._makeInputValueString = (startDate, endDate, dateFormat) => {
              if (!startDate && !endDate)
                  return this.value;
              const formatDate = (date) => format(date, DATE_PATTERNS[dateFormat].fnsPattern);
              switch (this.mode) {
                  case "single": {
                      if (startDate) {
                          this.value = formatDate(startDate);
                      }
                      break;
                  }
                  case "range": {
                      if (startDate && endDate) {
                          this.value = `${formatDate(startDate)} - ${formatDate(endDate)}`;
                      }
                      if (startDate && !endDate) {
                          this.value = `${formatDate(startDate)} - ${this.dateFormat}`;
                      }
                      break;
                  }
              }
              return this.value;
          };
          this._dialogAriaLabels = {
              days: "Choose date",
              months: "Choose month",
              years: "Choose year"
          };
      }
      isValueEmpty() {
          return this.value === "" || this.value === "DD/MM/YYYY" || this.value === "DD/MM/YYYY - DD/MM/YYYY";
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      async connectedCallback() {
          super.connectedCallback();
          this.modifierOpt = [
              {
                  name: "offset",
                  options: {
                      offset: [0, 8]
                  }
              }
          ];
          this.addEventListener("sgds-view", this._handleViewChanged);
          this.addEventListener("sgds-change-calendar", this._handleDateChanged);
          this.addEventListener("sgds-update-focus", this._handleFocusDateChanged);
          this.addEventListener("sgds-selectmonth", this._handleSelectMonth);
          this.addEventListener("sgds-selectyear", this._handleSelectYear);
          this.addEventListener("sgds-selectdates", this._handleSelectDatesAndClose);
          this.addEventListener("sgds-selectdates-input", this._handleSelectDatesInput);
          this.addEventListener("sgds-empty-input", this._handleEmptyInput);
          this.addEventListener("keydown", this._handleTab);
          this.addEventListener("sgds-hide", this._handleCloseMenu);
          this.addEventListener("sgds-show", this._handleOpenMenu);
          this.addEventListener("blur", this._mixinCheckValidity);
          this.initialDisplayDate = this.displayDate || new Date();
          if (this.initialValue && this.initialValue.length > 0) {
              // Validate initialValue against the dateFormat regex
              const dateFormatRegex = new RegExp(this._getDateFormatRegex());
              // const startDateString = this.initialValue[0];
              const invalidDates = this.initialValue.filter(v => !dateFormatRegex.test(v));
              if (invalidDates.length > 0) {
                  return console.error("Invalid date format in initialValue:", invalidDates);
              }
              else {
                  const initialSelectedDates = this.initialValue.map(v => setTimeToNoon(parse(v, DATE_PATTERNS[this.dateFormat].fnsPattern, new Date())));
                  this._handleSelectDates(initialSelectedDates);
              }
          }
          else {
              this.displayDate = this.initialDisplayDate;
          }
      }
      async firstUpdated() {
          super.firstUpdated();
          if (this.menuIsOpen) {
              const input = await this.datepickerInputAsync;
              this.showMenu();
              const cal = await this.calendar;
              cal.focusOnCalendar(input);
          }
      }
      /** @internal */
      _getDateFormatRegex() {
          // validate date strings and adhere to the specified date format
          return (this.dateFormat
              // Replace any special characters with their escaped version using "\\$&"
              .replace(/[.*+?^${}()|[\]\\]/g, "\\$&")
              // Replace 'MM' with '\\d{2}', which matches two digits representing the month (e.g., 01, 12)
              .replace("MM", "\\d{2}")
              // Replace 'DD' with '\\d{2}', which matches two digits representing the day (e.g., 01, 31)
              .replace("DD", "\\d{2}")
              // Replace 'YYYY' with '\\d{4}', which matches four digits representing the year (e.g., 2021)
              .replace("YYYY", "\\d{4}")
              // Replace '/' with '\\/', which matches the forward slash character
              .replace("/", "\\/"));
      }
      _handleTab(event) {
          if (!this.menuIsOpen) {
              return;
          }
          const tabIndexArray = Array(4);
          if (event.shiftKey && event.key === "Tab") {
              event.preventDefault();
              this.focusedTabIndex = (this.focusedTabIndex - 1 + tabIndexArray.length) % tabIndexArray.length;
          }
          else if (event.key === "Tab") {
              event.preventDefault();
              this.focusedTabIndex = (this.focusedTabIndex + 1 + tabIndexArray.length) % tabIndexArray.length;
          }
      }
      _handleValueChange() {
          this.emit("sgds-change-date");
      }
      async _handleCloseMenu() {
          //return focus to input when menu closes
          const input = await this.datepickerInputAsync;
          input.focus();
          if (this.selectedDateRange.length === 0) {
              this.displayDate = this.initialDisplayDate;
          }
          else {
              const selectedDatesLength = this.selectedDateRange.length;
              this.displayDate = this.selectedDateRange[selectedDatesLength - 1];
              const calendar = await this.calendar;
              calendar._updateFocusedDate();
          }
      }
      async _handleOpenMenu() {
          const cal = await this.calendar;
          const input = await this.datepickerInputAsync;
          cal.focusOnCalendar(input);
      }
      _handleSelectDatesInput(event) {
          this._handleSelectDates(event.detail);
      }
      async _handleSelectDates(newSelectedDates) {
          newSelectedDates.sort((a, b) => a.getTime() - b.getTime());
          this.displayDate = newSelectedDates[0];
          this.focusedDate = newSelectedDates[0];
          this.selectedDateRange = newSelectedDates;
          // Get the formattedDate value for the selected dates
          const formattedDate = this._makeInputValueString(this.selectedDateRange[0], this.selectedDateRange[1], this.dateFormat);
          // Set formattedDate value as the new value for sgds-input
          this.value = formattedDate;
          const input = await this.datepickerInputAsync;
          input.updateMaskValue();
          this._manageInternalsValid();
      }
      async _handleSelectDatesAndClose(event) {
          await this._handleSelectDates(event.detail);
          if (this.mode === "range" && this.selectedDateRange.length === 2) {
              this.hideMenu();
          }
          else if (this.mode === "single" && this.selectedDateRange.length === 1) {
              this.hideMenu();
          }
      }
      /** update latest view state from datepicker-header */
      _handleViewChanged(event) {
          this.view = event.detail;
      }
      _handleDateChanged(event) {
          this.displayDate = event.detail;
      }
      _handleFocusDateChanged(event) {
          this.focusedDate = event.detail;
      }
      _handleSelectMonth(event) {
          this.displayDate = event.detail;
      }
      _handleSelectYear(event) {
          this.displayDate = event.detail;
      }
      async _handleInvalidInput() {
          this.selectedDateRange = [];
          this.displayDate = this.initialDisplayDate;
          this.invalid = true;
          this._manageInternalsBadInput();
      }
      async _handleEmptyInput() {
          this._manageEmptyInput();
      }
      async _resetDatepicker() {
          this.displayDate = this.initialDisplayDate;
          this.selectedDateRange = [];
          this.value = "";
          this.view = "days";
          const input = await this.datepickerInputAsync;
          input.setInvalid(false);
          input.destroyInputMask();
          await input.applyInputMask();
          this._mixinResetValidity(input);
          if (this.isValueEmpty() && this.required) {
              this._handleEmptyInput();
          }
      }
      _manageInternalsBadInput() {
          this._mixinSetValidity({
              badInput: true
          }, "Invalid date input", this.datepickerInput);
      }
      /**
       * Even though element internals handles the required constraint validation. This custom one is still needed as
       * datepicker input has a special case where the default input mask "DD/MM/YYYY" means an empty input.
       * However, the required constraint validation sees "DD/MM/YYYY" as a non-empty input.
       */
      _manageEmptyInput() {
          this._mixinSetValidity({
              valueMissing: true
          }, "Please fill in this field", this.datepickerInput);
      }
      /**
       * Called when a valid date is entered via input or selected by calendar
       * 1. sets validity state to valid
       * 2. updates invalid prop
       * 3. sets the form value of datepicker
       */
      _manageInternalsValid() {
          this._mixinSetValidity({});
          this.invalid = this.datepickerInput.invalid = false;
          this._mixinSetFormValue();
      }
      /**
       * Handles the form "reset" event
       */
      async _mixinResetFormControl() {
          this._resetDatepicker();
      }
      async _handleInputMaskChange(e) {
          this.value = e.detail;
          if (this.isValueEmpty()) {
              this._resetDatepicker();
          }
      }
      render() {
          return html$1 `
      <div class="datepicker-container">
        <sgds-datepicker-input
          .value=${live(this.value)}
          ?required=${this.required}
          ?disabled=${this.disabled}
          placeholder=${this.mode === "single" ? "DD/MM/YYYY" : "DD/MM/YYYY - DD/MM/YYYY"}
          mode=${this.mode}
          invalidFeedback=${ifDefined(this.invalidFeedback ? this.invalidFeedback : this._mixinGetValidationMessage())}
          @sgds-mask-input-change=${this._handleInputMaskChange}
          @sgds-invalid-input=${this._handleInvalidInput}
          minDate=${this.minDate}
          maxDate=${this.maxDate}
          label=${this.label}
          hintText=${this.hintText}
          name=${this.name}
          ?invalid=${this.invalid}
          hasFeedback=${ifDefined(this.hasFeedback ? "both" : undefined)}
        >
        </sgds-datepicker-input>
        <sgds-icon-button
          ${ref(this.myDropdown)}
          role="button"
          class=${classMap({
            "calendar-btn": true,
            "with-hint-text": this.hintText || this.invalid,
            "with-label": this.label
        })}
          aria-expanded="${this.menuIsOpen}"
          aria-haspopup="dialog"
          aria-controls=${this.dropdownMenuId}
          @click=${() => this.toggleMenu()}
          ariaLabel=${this.menuIsOpen ? "Close Calendar" : "Open Calendar"}
          ?disabled=${this.disabled}
          variant="outline"
          name="calendar"
        >
        </sgds-icon-button>
        <ul
          id=${this.dropdownMenuId}
          class="sgds datepicker dropdown-menu"
          role="dialog"
          aria-label=${this._dialogAriaLabels[this.view]}
          @click=${(event) => event.stopPropagation()}
        >
          <sgds-datepicker-header
            .view=${this.view}
            .displayDate=${this.displayDate}
            .focusedDate=${this.focusedDate}
            .selectedDate=${this.selectedDateRange}
            .focusedTabIndex=${this.focusedTabIndex}
          ></sgds-datepicker-header>
          <sgds-datepicker-calendar
            .show=${this.menuIsOpen}
            .view=${this.view}
            .displayDate=${this.displayDate}
            .mode=${this.mode}
            minDate=${this.minDate}
            maxDate=${this.maxDate}
            .selectedDate=${this.selectedDateRange}
            .focusedTabIndex=${this.focusedTabIndex}
          ></sgds-datepicker-calendar>
        </ul>
      </div>
    `;
      }
  }
  SgdsDatepicker.styles = [...DropdownElement.styles, css_248z$$, css_248z$y];
  /**@internal */
  SgdsDatepicker.dependencies = {
      "sgds-datepicker-input": DatepickerInput,
      "sgds-datepicker-calendar": DatepickerCalendar,
      "sgds-datepicker-header": DatepickerHeader,
      "sgds-button": SgdsButton,
      "sgds-icon-button": SgdsIconButton
  };
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDatepicker.prototype, "required", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsDatepicker.prototype, "name", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDatepicker.prototype, "disabled", void 0);
  __decorate([
      property({ type: Array, reflect: true })
  ], SgdsDatepicker.prototype, "initialValue", void 0);
  __decorate([
      property({ type: String })
  ], SgdsDatepicker.prototype, "minDate", void 0);
  __decorate([
      property({ type: String })
  ], SgdsDatepicker.prototype, "maxDate", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsDatepicker.prototype, "mode", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsDatepicker.prototype, "invalidFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDatepicker.prototype, "hasFeedback", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsDatepicker.prototype, "label", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsDatepicker.prototype, "hintText", void 0);
  __decorate([
      property({ type: Boolean, reflect: true, state: false })
  ], SgdsDatepicker.prototype, "noFlip", void 0);
  __decorate([
      property({ type: String, reflect: true, state: false })
  ], SgdsDatepicker.prototype, "drop", void 0);
  __decorate([
      property({ attribute: false })
  ], SgdsDatepicker.prototype, "displayDate", void 0);
  __decorate([
      state()
  ], SgdsDatepicker.prototype, "value", void 0);
  __decorate([
      state()
  ], SgdsDatepicker.prototype, "invalid", void 0);
  __decorate([
      state()
  ], SgdsDatepicker.prototype, "view", void 0);
  __decorate([
      state()
  ], SgdsDatepicker.prototype, "selectedDateRange", void 0);
  __decorate([
      state()
  ], SgdsDatepicker.prototype, "focusedDate", void 0);
  __decorate([
      state()
  ], SgdsDatepicker.prototype, "focusedTabIndex", void 0);
  __decorate([
      queryAsync("sgds-datepicker-calendar")
  ], SgdsDatepicker.prototype, "calendar", void 0);
  __decorate([
      queryAsync("sgds-datepicker-input")
  ], SgdsDatepicker.prototype, "datepickerInputAsync", void 0);
  __decorate([
      query("sgds-datepicker-input")
  ], SgdsDatepicker.prototype, "datepickerInput", void 0);
  __decorate([
      watch("value")
  ], SgdsDatepicker.prototype, "_handleValueChange", null);

  register("sgds-datepicker", SgdsDatepicker);

  var css_248z$x = css`:host([bordered]) .container{border:var(--sgds-border-width-1) solid var(--sgds-border-color-muted);border-radius:var(--sgds-border-radius-md)}.container{display:flex;flex-direction:column}.title{color:var(--sgds-header-color-default);font-size:var(--sgds-font-size-4);font-weight:var(--sgds-font-weight-semibold);letter-spacing:var(--sgds-letter-spacing-tight);line-height:var(--sgds-line-height-heading)}.description{color:var(--sgds-color-subtle);font-size:var(--sgds-font-size-2);font-weight:var(--sgds-font-weight-regular);line-height:var(--sgds-line-height-body)}.header{border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-muted);display:flex;flex-direction:column;gap:var(--sgds-gap-xs);padding:var(--sgds-padding-lg) var(--sgds-padding-xl)}`;

  class HasSlotController {
      constructor(host, ...slotNames) {
          this.slotNames = [];
          (this.host = host).addController(this);
          this.slotNames = slotNames;
          this.handleSlotChange = this.handleSlotChange.bind(this);
      }
      hasDefaultSlot() {
          return [...this.host.childNodes].some(node => {
              var _a;
              if (node.nodeType === node.TEXT_NODE && ((_a = node.textContent) === null || _a === void 0 ? void 0 : _a.trim()) !== "") {
                  return true;
              }
              if (node.nodeType === node.ELEMENT_NODE) {
                  const el = node;
                  const tagName = el.tagName.toLowerCase();
                  // Ignore visually hidden elements since they aren't rendered
                  if (tagName === "sl-visually-hidden") {
                      return false;
                  }
                  // If it doesn't have a slot attribute, it's part of the default slot
                  if (!el.hasAttribute("slot")) {
                      return true;
                  }
              }
              return false;
          });
      }
      hasNamedSlot(name) {
          return this.host.querySelector(`:scope > [slot="${name}"]`) !== null;
      }
      test(slotName) {
          return slotName === "[default]" ? this.hasDefaultSlot() : this.hasNamedSlot(slotName);
      }
      hostConnected() {
          var _a;
          (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.addEventListener("slotchange", this.handleSlotChange);
      }
      hostDisconnected() {
          var _a;
          (_a = this.host.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeEventListener("slotchange", this.handleSlotChange);
      }
      handleSlotChange(event) {
          const slot = event.target;
          if ((this.slotNames.includes("[default]") && !slot.name) || (slot.name && this.slotNames.includes(slot.name))) {
              this.host.requestUpdate();
          }
      }
  }

  /**
   * @summary Description List Group organizes multiple description lists.
   *
   * @slot default - The slot for `description-list` components
   * @slot title - Slot for the title content
   * @slot description - Slot for the description content
   *
   */
  class SgdsDescriptionListGroup extends SgdsElement {
      constructor() {
          super(...arguments);
          /** When true, adds a border around the entire group. */
          this.bordered = false;
          /** When true, the description lists are displayed in a stacked layout. */
          this.stacked = false;
          /** @internal */
          this.hasSlotController = new HasSlotController(this, "title", "description");
      }
      connectedCallback() {
          super.connectedCallback();
          this.setAttribute("role", "list");
          this.updateComplete.then(() => {
              this._updateDescriptionLists();
          });
      }
      _updateDescriptionLists() {
          if (!this._descriptionLists)
              return;
          this._descriptionLists.forEach((descriptionList, index) => {
              if (this.stacked) {
                  descriptionList.setAttribute("stacked", "");
              }
              else {
                  descriptionList.removeAttribute("stacked");
              }
              if (this.bordered) {
                  descriptionList.setAttribute("bordered", "");
              }
              else {
                  descriptionList.removeAttribute("bordered");
              }
              if (index === this._descriptionLists.length - 1) {
                  descriptionList.setAttribute("isLastChild", "");
              }
          });
      }
      updated(_changedProperties) {
          if (_changedProperties.has("stacked")) {
              this._updateDescriptionLists();
          }
          if (_changedProperties.has("bordered")) {
              this._updateDescriptionLists();
          }
      }
      render() {
          const hasTitleSlot = this.hasSlotController.test("title");
          const hasDescriptionSlot = this.hasSlotController.test("description");
          return html$1 `
      <div class="container" part="base">
        ${hasTitleSlot || hasDescriptionSlot
            ? html$1 `
              <div class="header">
                ${hasTitleSlot
                ? html$1 ` <div class="title">
                      <slot name="title"></slot>
                    </div>`
                : nothing}
                ${hasDescriptionSlot
                ? html$1 `
                      <div class="description">
                        <slot name="description"></slot>
                      </div>
                    `
                : nothing}
              </div>
            `
            : nothing}
        <div>
          <slot></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsDescriptionListGroup.styles = [...SgdsElement.styles, css_248z$x];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDescriptionListGroup.prototype, "bordered", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDescriptionListGroup.prototype, "stacked", void 0);
  __decorate([
      queryAssignedElements({ flatten: true })
  ], SgdsDescriptionListGroup.prototype, "_descriptionLists", void 0);

  var css_248z$w = css`:host([bordered][islastchild]) .container:last-child{border-bottom:none}:host([stacked]) .container{align-items:flex-start;flex-direction:column;gap:var(--sgds-gap-xs);justify-content:flex-start}.container{align-items:flex-start;border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-muted);display:flex;gap:var(--sgds-gap-xs);justify-content:space-between;padding:var(--sgds-padding-lg) var(--sgds-padding-xl)}.data-container,.label-container{flex:1}.label{color:var(--sgds-color-default);font-weight:var(--sgds-font-weight-semibold)}.data,.label{font-size:var(--sgds-font-size-2)}.data{color:var(--sgds-color-subtle);font-weight:var(--sgds-font-weight-regular);margin:0}`;

  let id$2 = 0;
  /**
   *
   * @summary Description Lists are used with description list group as list components. A description list (often referred to as a “definition list”) is a type of list used in web design and documentation to pair terms with their corresponding descriptions or values.
   *
   * @slot default - The slot for the label
   * @slot data - The slot for the data
   */
  class SgdsDescriptionList extends SgdsElement {
      constructor() {
          super(...arguments);
          this.attrId = ++id$2;
          this.componentId = `sgds-description-list-${this.attrId}`;
          /** Makes the label and the data stacked */
          this.stacked = false;
          /** Changes the border bottom styles for bordered description list group */
          this.bordered = false;
      }
      connectedCallback() {
          super.connectedCallback();
          // If the user didn't provide an ID, we'll set one so we can link tabs and tab panels with aria labels
          this.id = this.id.length > 0 ? this.id : this.componentId;
          this.setAttribute("role", "listitem");
      }
      render() {
          return html$1 `
      <div class="container" part="container">
        <div class="label-container" part="label-container">
          <span class="label" part="label">
            <slot></slot>
          </span>
        </div>
        <div class="data-container" part="data-container">
          <span class="data" part="data">
            <slot name="data"></slot>
          </span>
        </div>
      </div>
    `;
      }
  }
  SgdsDescriptionList.styles = [...SgdsElement.styles, css_248z$w];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDescriptionList.prototype, "stacked", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDescriptionList.prototype, "bordered", void 0);

  register("sgds-description-list", SgdsDescriptionList);
  register("sgds-description-list-group", SgdsDescriptionListGroup);

  var css_248z$v = css`:host{--container-size:8px}:host([orientation=horizontal]){border-top:var(--border-width) solid var(--sgds-border-color-muted);display:block;margin:calc((var(--container-size) - var(--border-width))/2) 0;width:100%}:host([orientation=vertical]){border-left:var(--border-width) solid var(--sgds-border-color-muted);display:inline-block;height:100%;margin:0 calc((var(--container-size) - var(--border-width))/2)}:host([thickness=thin]){--border-width:var(--sgds-border-width-1)}:host([thickness=thick]){--border-width:var(--sgds-border-width-2)}:host([thickness=thicker]){--border-width:var(--sgds-border-width-4)}`;

  /**
   * @summary A divider is a thin line that groups content in lists and layouts. They bring clarity to a layout by grouping and dividing content in close proximity.
   */
  class SgdsDivider extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Sets the orientation of divider to vertical. Defaults to horizontal */
          this.orientation = "horizontal";
          /** Sets the orientation of divider to vertical. Defaults to false */
          this.thickness = "thin";
      }
      connectedCallback() {
          super.connectedCallback();
          this.setAttribute("role", "separator");
          this.setAttribute("aria-orientation", this.orientation);
      }
  }
  SgdsDivider.styles = [css_248z$v];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsDivider.prototype, "orientation", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsDivider.prototype, "thickness", void 0);

  register("sgds-divider", SgdsDivider);

  const locks = new Set();
  /**
   * Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible
   * without premature unlocking.
   */
  function lockBodyScrolling(lockingEl) {
      locks.add(lockingEl);
      document.body.classList.add("sl-scroll-lock");
  }
  /**
   * Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.
   */
  function unlockBodyScrolling(lockingEl) {
      locks.delete(lockingEl);
      if (locks.size === 0) {
          document.body.classList.remove("sl-scroll-lock");
      }
  }

  var css_248z$u = css`:host{display:contents}.drawer{height:100%;inset-inline-start:0;overflow:hidden;pointer-events:none;top:0;width:100%}.drawer-fixed{position:fixed;z-index:1100}.drawer-panel{background-color:var(--sgds-surface-default);display:flex;flex-direction:column;gap:var(--sgds-gap-2-xl);max-height:100%;max-width:100%;overflow:auto;padding:var(--sgds-padding-4-xl) var(--sgds-padding-3-xl);pointer-events:all;position:absolute;z-index:2}.drawer-panel:focus{outline:none}.drawer-top .drawer-panel{bottom:auto;height:var(--sgds-dimension-512);inset-inline-end:auto;inset-inline-start:0;top:0;width:100%}.drawer-end .drawer-panel{bottom:auto;height:100%;inset-inline-end:0;inset-inline-start:auto;top:0;width:var(--sgds-dimension-512)}.drawer-bottom .drawer-panel{bottom:0;height:var(--sgds-dimension-512);inset-inline-end:auto;inset-inline-start:0;top:auto;width:100%}.drawer-start .drawer-panel{bottom:auto;height:100%;inset-inline-end:auto;inset-inline-start:0;top:0;width:var(--sgds-dimension-512)}.drawer-header{display:flex;flex-direction:column;gap:var(--sgds-gap-sm)}slot[name=title]::slotted(*){--sgds-margin-2-xs:var(--sgds-margin-none);--sgds-font-size-6:var(--sgds-font-size-4);color:var(--sgds-color-default)!important;font-size:var(--sgds-font-size-6,var(--sgds-font-size-4));margin-bottom:var(--sgds-margin-2-xs,var(--sgds-margin-none))}slot[name=description]::slotted(*){--sgds-paragraph-spacing-xl:var(--sgds-margin-none);color:var(--sgds-color-subtle);margin-bottom:var(--sgds-paragraph-spacing-xl,var(--sgds-margin-none))}sgds-close-button{position:absolute;right:32px;top:32px}.drawer-body{-webkit-overflow-scrolling:touch;display:block;flex:1 1 auto;overflow:auto}.drawer-overlay{background-color:var(--sgds-bg-overlay);bottom:0;display:block;left:0;pointer-events:all;position:fixed;right:0;top:0}.drawer-contained .drawer-overlay{display:none}@media screen and (max-width:768px){.drawer-panel{padding:var(--sgds-padding-3-xl) var(--sgds-padding-lg)}sgds-close-button{right:20px;top:20px}}`;

  /**
   * @summary Drawers slide in from a container to expose additional options and information.
   *
   * @slot default - The drawer's main content
   * @slot title - The title of the drawer
   * @slot description - The description of the drawer
   *
   * @event sgds-show - Emitted when the drawer opens.
   * @event sgds-after-show - Emitted after the drawer opens and all animations are complete.
   * @event sgds-hide - Emitted when the drawer closes.
   * @event sgds-after-hide - Emitted after the drawer closes and all animations are complete.
   * @event sgds-initial-focus - Emitted when the drawer opens and is ready to receive focus. Calling
   *   `event.preventDefault()` will prevent focusing and allow you to set it on a different element, such as an input.
   * @event {{ source: 'close-button' | 'keyboard' | 'overlay' }} sgds-request-close - Emitted when the user attempts to
   *   close the drawer by clicking the close button, clicking the overlay, or pressing escape. Calling
   *   `event.preventDefault()` will keep the drawer open. Avoid using this unless closing the drawer will result in
   *   destructive behavior such as data loss.
   *
   */
  class SgdsDrawer extends SgdsElement {
      constructor() {
          super(...arguments);
          /**
           * Indicates whether or not the drawer is open. You can toggle this attribute to show and hide the drawer, or you can
           * use the `show()` and `hide()` methods and this attribute will reflect the drawer's open state.
           */
          this.open = false;
          /** The direction from which the drawer will open. */
          this.placement = "end";
          /**
           * By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of
           * its parent element, set this attribute and add `position: relative` to the parent.
           */
          this.contained = false;
          this.handleDocumentKeyDown = (event) => {
              if (this.open && !this.contained && event.key === "Escape") {
                  event.stopPropagation();
                  this.requestClose("keyboard");
              }
          };
      }
      firstUpdated() {
          this.drawer.hidden = !this.open;
          if (this.open) {
              this.addOpenListeners();
              if (!this.contained) {
                  lockBodyScrolling(this);
              }
          }
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          unlockBodyScrolling(this);
      }
      uppercaseFirstLetter(string) {
          return string.charAt(0).toUpperCase() + string.slice(1);
      }
      requestClose(source) {
          const slRequestClose = this.emit("sgds-request-close", {
              cancelable: true,
              detail: { source }
          });
          if (slRequestClose.defaultPrevented) {
              const animation = getAnimation(this, "drawer.denyClose");
              animateTo(this.panel, animation.keyframes, animation.options);
              return;
          }
          this.hide();
      }
      addOpenListeners() {
          document.addEventListener("keydown", this.handleDocumentKeyDown);
      }
      removeOpenListeners() {
          document.removeEventListener("keydown", this.handleDocumentKeyDown);
      }
      async handleOpenChange() {
          if (this.open) {
              // Show
              this.emit("sgds-show");
              this.addOpenListeners();
              this.originalTrigger = document.activeElement;
              // Lock body scrolling only if the drawer isn't contained
              if (!this.contained) {
                  lockBodyScrolling(this);
              }
              // When the drawer is shown, Safari will attempt to set focus on whatever element has autofocus. This causes the
              // drawer's animation to jitter, so we'll temporarily remove the attribute, call `focus({ preventScroll: true })`
              // ourselves, and add the attribute back afterwards.
              //
              // Related: https://github.com/shoelace-style/shoelace/issues/693
              //
              const autoFocusTarget = this.querySelector("[autofocus]");
              if (autoFocusTarget) {
                  autoFocusTarget.removeAttribute("autofocus");
              }
              await Promise.all([stopAnimations(this.drawer), stopAnimations(this.overlay)]);
              this.drawer.hidden = false;
              // Set initial focus
              requestAnimationFrame(() => {
                  const slInitialFocus = this.emit("sgds-initial-focus", { cancelable: true });
                  if (!slInitialFocus.defaultPrevented) {
                      // Set focus to the autofocus target and restore the attribute
                      if (autoFocusTarget) {
                          autoFocusTarget.focus({ preventScroll: true });
                      }
                      else {
                          this.panel.focus({ preventScroll: true });
                      }
                  }
                  // Restore the autofocus attribute
                  if (autoFocusTarget) {
                      autoFocusTarget.setAttribute("autofocus", "");
                  }
              });
              const panelAnimation = getAnimation(this, `drawer.show${this.uppercaseFirstLetter(this.placement)}`);
              const overlayAnimation = getAnimation(this, "drawer.overlay.show");
              await Promise.all([
                  animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
                  animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
              ]);
              this.emit("sgds-after-show");
          }
          else {
              // Hide
              this.emit("sgds-hide");
              this.removeOpenListeners();
              if (!this.contained) {
                  unlockBodyScrolling(this);
              }
              await Promise.all([stopAnimations(this.drawer), stopAnimations(this.overlay)]);
              const panelAnimation = getAnimation(this, `drawer.hide${this.uppercaseFirstLetter(this.placement)}`);
              const overlayAnimation = getAnimation(this, "drawer.overlay.hide");
              // Animate the overlay and the panel at the same time. Because animation durations might be different, we need to
              // hide each one individually when the animation finishes, otherwise the first one that finishes will reappear
              // unexpectedly. We'll unhide them after all animations have completed.
              await Promise.all([
                  animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options).then(() => {
                      this.overlay.hidden = true;
                  }),
                  animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options).then(() => {
                      this.panel.hidden = true;
                  })
              ]);
              this.drawer.hidden = true;
              // Now that the dialog is hidden, restore the overlay and panel for next time
              this.overlay.hidden = false;
              this.panel.hidden = false;
              // Restore focus to the original trigger
              const trigger = this.originalTrigger;
              if (typeof (trigger === null || trigger === void 0 ? void 0 : trigger.focus) === "function") {
                  setTimeout(() => trigger.focus());
              }
              this.emit("sgds-after-hide");
          }
      }
      handleNoModalChange() {
          if (this.open && !this.contained) {
              lockBodyScrolling(this);
          }
          if (this.open && this.contained) {
              unlockBodyScrolling(this);
          }
      }
      /** Shows the drawer. */
      async show() {
          if (this.open) {
              return undefined;
          }
          this.open = true;
          return waitForEvent(this, "sgds-after-show");
      }
      /** Hides the drawer */
      async hide() {
          if (!this.open) {
              return undefined;
          }
          this.open = false;
          return waitForEvent(this, "sgds-after-hide");
      }
      render() {
          return html$1 `
      <div
        class=${classMap({
            drawer: true,
            "drawer-open": this.open,
            "drawer-top": this.placement === "top",
            "drawer-end": this.placement === "end",
            "drawer-bottom": this.placement === "bottom",
            "drawer-start": this.placement === "start",
            "drawer-contained": this.contained,
            "drawer-fixed": !this.contained
        })}
      >
        <div class="drawer-overlay" @click=${() => this.requestClose("overlay")} tabindex="-1"></div>

        <div
          class="drawer-panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          tabindex="0"
        >
          <header class="drawer-header">
            <slot name="title"></slot>
            <slot name="description"></slot>
            <sgds-close-button
              class="drawer-close"
              aria-label="close drawer"
              @click="${() => this.requestClose("close-button")}"
            ></sgds-close-button>
          </header>
          <slot class="drawer-body"></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsDrawer.styles = [...SgdsElement.styles, css_248z$u];
  /**@internal */
  SgdsDrawer.dependencies = {
      "sgds-close-button": SgdsCloseButton
  };
  __decorate([
      query(".drawer")
  ], SgdsDrawer.prototype, "drawer", void 0);
  __decorate([
      query(".drawer-panel")
  ], SgdsDrawer.prototype, "panel", void 0);
  __decorate([
      query(".drawer-overlay")
  ], SgdsDrawer.prototype, "overlay", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDrawer.prototype, "open", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsDrawer.prototype, "placement", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsDrawer.prototype, "contained", void 0);
  __decorate([
      watch("open", { waitUntilFirstUpdate: true })
  ], SgdsDrawer.prototype, "handleOpenChange", null);
  __decorate([
      watch("contained", { waitUntilFirstUpdate: true })
  ], SgdsDrawer.prototype, "handleNoModalChange", null);
  // Top
  setDefaultAnimation("drawer.showTop", {
      keyframes: [
          { opacity: 0, translate: "0 -100%" },
          { opacity: 1, translate: "0 0" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  setDefaultAnimation("drawer.hideTop", {
      keyframes: [
          { opacity: 1, translate: "0 0" },
          { opacity: 0, translate: "0 -100%" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  // End
  setDefaultAnimation("drawer.showEnd", {
      keyframes: [
          { opacity: 0, translate: "100%" },
          { opacity: 1, translate: "0" }
      ],
      rtlKeyframes: [
          { opacity: 0, translate: "-100%" },
          { opacity: 1, translate: "0" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  setDefaultAnimation("drawer.hideEnd", {
      keyframes: [
          { opacity: 1, translate: "0" },
          { opacity: 0, translate: "100%" }
      ],
      rtlKeyframes: [
          { opacity: 1, translate: "0" },
          { opacity: 0, translate: "-100%" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  // Bottom
  setDefaultAnimation("drawer.showBottom", {
      keyframes: [
          { opacity: 0, translate: "0 100%" },
          { opacity: 1, translate: "0 0" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  setDefaultAnimation("drawer.hideBottom", {
      keyframes: [
          { opacity: 1, translate: "0 0" },
          { opacity: 0, translate: "0 100%" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  // Start
  setDefaultAnimation("drawer.showStart", {
      keyframes: [
          { opacity: 0, translate: "-100%" },
          { opacity: 1, translate: "0" }
      ],
      rtlKeyframes: [
          { opacity: 0, translate: "100%" },
          { opacity: 1, translate: "0" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  setDefaultAnimation("drawer.hideStart", {
      keyframes: [
          { opacity: 1, translate: "0" },
          { opacity: 0, translate: "-100%" }
      ],
      rtlKeyframes: [
          { opacity: 1, translate: "0" },
          { opacity: 0, translate: "100%" }
      ],
      options: { duration: 250, easing: "ease" }
  });
  // Deny close
  setDefaultAnimation("drawer.denyClose", {
      keyframes: [{ scale: 1 }, { scale: 1.01 }, { scale: 1 }],
      options: { duration: 250 }
  });
  // Overlay
  setDefaultAnimation("drawer.overlay.show", {
      keyframes: [{ opacity: 0 }, { opacity: 1 }],
      options: { duration: 250 }
  });
  setDefaultAnimation("drawer.overlay.hide", {
      keyframes: [{ opacity: 1 }, { opacity: 0 }],
      options: { duration: 250 }
  });

  register("sgds-drawer", SgdsDrawer);

  register("sgds-dropdown", SgdsDropdown);
  register("sgds-dropdown-item", SgdsDropdownItem);

  var css_248z$t = css`.file-upload{display:flex;flex-direction:column;gap:var(--sgds-form-gap-2-xl)}.file-upload-container{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}.file-upload-list{display:flex;flex-direction:column;gap:var(--sgds-form-gap-xl);list-style-type:none}.file-upload-list-item{align-items:center;background-color:var(--sgds-form-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-muted);border-radius:var(--sgds-form-border-radius-md);display:flex;gap:var(--sgds-form-gap-lg);padding:var(--sgds-form-padding-y) var(--sgds-form-padding-x)}.file-upload-list-item span:not(:first-of-type){cursor:pointer}ul{margin:0;padding:0}input{display:none}label,sgds-button{cursor:pointer}sgds-close-button{margin-left:auto}sgds-icon.valid{color:var(--sgds-form-success-color-default)}sgds-icon.invalid{color:var(--sgds-color-muted)}`;

  /**
   * @summary Allows users to upload files of various sizes and formats
   *
   * @slot default - Label for file upload button
   *
   * @event sgds-files-selected - Emitted when files are selected for uploading. Access the selected files with event.target.detail
   */
  class SgdsFileUpload extends SgdsFormValidatorMixin(FormControlElement) {
      constructor() {
          super(...arguments);
          /** Allows multiple files to be listed for uploading */
          this.multiple = false;
          /** Specify the acceptable file type  */
          this.accept = "";
          /** Allows invalidFeedback, invalid and valid styles to be visible with the input */
          this.hasFeedback = false;
          /** Makes the input as a required field. */
          this.required = false;
          this.selectedFiles = [];
          this.inputRef = createRef();
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      /**
       * Returns files selected for upload
       */
      get files() {
          return this.selectedFiles;
      }
      _setFileList(files) {
          this.emit("sgds-files-selected", { detail: files });
      }
      _handleClick(event) {
          event.preventDefault();
          if (!this.disabled) {
              // Get a reference to the input element using the inputRef
              const inputElement = this.inputRef.value;
              // Do something with the input element
              inputElement.click();
          }
      }
      _handleChange(event) {
          const inputElement = event.target;
          const files = inputElement.files;
          if (files.length > 0) {
              this.selectedFiles = Array.from(files);
          }
          // Trigger a re-render of the component to update the list of selected files
          this._setFileList(files);
          this.requestUpdate();
          super._mixinHandleChange(event);
      }
      _removeFileHandler(index) {
          const inputElement = this.inputRef.value;
          const attachments = inputElement.files;
          const fileBuffer = new DataTransfer();
          for (let i = 0; i < attachments.length; i++) {
              if (index !== i)
                  fileBuffer.items.add(attachments[i]);
          }
          // Assign buffer to file input
          inputElement.files = fileBuffer.files;
          // Re-populate selected files to the lists
          this._setFileList(fileBuffer.files);
          this.selectedFiles = Array.from(fileBuffer.files);
          // Trigger a re-render of the component to update the list of selected files
          this.requestUpdate();
          this._mixinValidate(this.input);
      }
      _clearAllFiles() {
          const inputElement = this.inputRef.value;
          const fileBuffer = new DataTransfer();
          inputElement.files = fileBuffer.files;
          this._setFileList(fileBuffer.files);
          this.selectedFiles = Array.from(fileBuffer.files);
      }
      /**
       * fileupload requries a custom _mixinResetFormControl for clearing files
       */
      _mixinResetFormControl() {
          this._clearAllFiles();
          this._mixinResetValidity(this.input);
      }
      _handleDisabledChange() {
          // Disabled form controls are always valid, so we need to recheck validity when the state changes
          this.setInvalid(false);
      }
      _renderLabel() {
          const labelTemplate = html$1 `
      <label for=${this._controlId} id=${this._labelId} class="form-label"> ${this.label} </label>
    `;
          return this.label && labelTemplate;
      }
      _renderHintText() {
          const hintTextTemplate = html$1 ` <div id="${this._controlId}Help" class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      _renderFeedback() {
          return html$1 `
      <div class="invalid-feedback-container">
        <sgds-icon name="exclamation-circle-fill" size="md"></sgds-icon>
        <div id="${this._controlId}-invalid" class="invalid-feedback">
          ${this.invalidFeedback ? this.invalidFeedback : this.input.validationMessage}
        </div>
      </div>
    `;
      }
      render() {
          const getCheckedIcon = () => {
              return html$1 `<sgds-icon name="check-circle-fill" class="${this.invalid ? "invalid" : "valid"}"></sgds-icon>`;
          };
          const listItems = this.selectedFiles.map((file, index) => html$1 `
        <li key=${index} class="file-upload-list-item">
          ${getCheckedIcon()}
          <span class="filename">${file.name}</span>
          <sgds-close-button
            aria-label="remove the file"
            @click=${() => this._removeFileHandler(index)}
          ></sgds-close-button>
        </li>
      `);
          return html$1 `
      <div class="file-upload">
        <input
          ${ref(this.inputRef)}
          type="file"
          @change=${this._handleChange}
          ?multiple=${this.multiple}
          accept=${this.accept}
          id=${this._controlId}
          ?required=${this.required}
          ?disabled=${this.disabled}
        />
        <div class="file-upload-container">
          ${this._renderLabel()}
          <sgds-button variant="outline" ?disabled=${this.disabled} @click=${this._handleClick}>
            <label for=${this._controlId}><slot></slot></label>
            <sgds-icon slot="rightIcon" name="upload"></sgds-icon>
          </sgds-button>
          ${this.hasFeedback && this.invalid ? this._renderFeedback() : this._renderHintText()}
        </div>
        <ul class="file-upload-list">
          ${listItems}
        </ul>
      </div>
    `;
      }
  }
  SgdsFileUpload.styles = [...FormControlElement.styles, css_248z$t];
  /**@internal */
  SgdsFileUpload.dependencies = {
      "sgds-button": SgdsButton,
      "sgds-close-button": SgdsCloseButton,
      "sgds-icon": SgdsIcon
  };
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsFileUpload.prototype, "multiple", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsFileUpload.prototype, "accept", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsFileUpload.prototype, "hasFeedback", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsFileUpload.prototype, "invalidFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsFileUpload.prototype, "required", void 0);
  __decorate([
      state()
  ], SgdsFileUpload.prototype, "selectedFiles", void 0);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsFileUpload.prototype, "_handleDisabledChange", null);

  register("sgds-file-upload", SgdsFileUpload);

  var css_248z$s = css`.footer{container:footer/inline-size;height:auto}.footer-top{background-color:var(--sgds-bg-fixed-dark);border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-default);gap:var(--sgds-gap-md);padding:var(--sgds-padding-xl) var(--sgds-padding-2-xl)}.footer-header,.footer-top{display:flex;flex-direction:column}.footer-header{gap:var(--sgds-gap-xs);margin:var(--sgds-margin-3-xs) 0}slot[name=title]::slotted(*){--sgds-header-color-default:var(--sgds-color-fixed-light);--sgds-font-size-6:var(--sgds-font-size-5);--sgds-margin-2-xs:var(--sgds-margin-none);color:var(--sgds-header-color-default,--sgds-color-fixed-light);font-size:var(--sgds-font-size-6,--sgds-font-size-5);font-weight:var(--sgds-font-weight-bold);letter-spacing:var(--sgds-letter-spacing-tight);line-height:var(--sgds-line-height-heading);margin-bottom:var(--sgds-margin-2-xs,--sgds-margin-none);margin-top:var(--sgds-margin-none)}slot[name=description]::slotted(*){--sgds-font-size-2:var(--sgds-font-size-3);--sgds-paragraph-spacing-xl:var(--sgds-margin-none);color:var(--sgds-color-fixed-light);font-size:var(--sgds-font-size-2,--sgds-font-size-3);margin-bottom:var(--sgds-paragraph-spacing-xl,--sgds-margin-none);margin-top:var(--sgds-margin-none)}.footer-items{display:grid;gap:var(--sgds-gap-md) var(--sgds-gap-lg);grid-template-columns:repeat(auto-fit,minmax(240px,1fr))}.footer ul{margin:0;padding:0}.footer ul li{list-style-type:none}.footer-mandatory-links ul li a{text-decoration:none}.footer-mandatory-links ul li a,.footer-mandatory-links ul li a:focus,.footer-mandatory-links ul li a:hover{color:var(--sgds-color-fixed-light)}.footer-mandatory-links ul li a:focus,.footer-mandatory-links ul li a:focus-visible{box-shadow:var(--sgds-box-shadow-focus);outline:0}.footer-bottom{background-color:var(--sgds-bg-fixed-dark);display:flex;flex-direction:column;gap:var(--sgds-gap-md);padding:var(--sgds-padding-xl) var(--sgds-padding-2-xl)}.social-media{display:flex;gap:var(--sgds-gap-sm)}slot[name=social-media]::slotted(a){--sgds-link-color-default:var(--sgds-color-fixed-light);--sgds-body-color-default:var(--sgds-color-fixed-light);color:var(--sgds-body-color-default,--sgds-link-color-default);display:inline-flex}slot[name=social-media]::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-color-fixed-light);color:var(--sgds-link-color-emphasis)}slot[name=social-media]::slotted(a:focus),slot[name=social-media]::slotted(a:focus-visible){--sgds-link-color-emphasis:var(--sgds-color-fixed-light);box-shadow:var(--sgds-box-shadow-focus);color:var(--sgds-link-color-emphasis);outline:0}.footer-mandatory-links{display:flex;flex-wrap:wrap;gap:var(--sgds-gap-xl) var(--sgds-gap-lg);justify-content:space-between}.footer-mandatory-links ul{display:flex;flex-wrap:wrap;gap:var(--sgds-gap-xs) var(--sgds-gap-xl)}.footer-copyrights{color:var(--sgds-color-fixed-light)}@container footer (max-width: 711px){.footer-bottom,.footer-top{padding:var(--sgds-padding-lg)}.footer-top{gap:var(--sgds-gap-lg)}.footer-mandatory-links,.footer-mandatory-links ul{flex-direction:column}}`;

  /**
   * @summary The footer contains supporting information for your service at the bottom of your website. All .gov.sg digital services shall contain a Global Footer Bar across all pages. The Global Footer Bar should include the name of the digital service, contact information, a privacy statement and the terms of use.
   *
   * @slot title - The slot for title
   * @slot description - The slot for description
   * @slot items - The slot for the list of footer items
   * @slot social-media - The slot for the list of social media with icons
   *
   */
  class SgdsFooter extends SgdsElement {
      constructor() {
          super(...arguments);
          /**
           * 	Sets copyrightLiner of SgdsFooter
           */
          this.copyrightLiner = "Government of Singapore";
          /**
           * 	href link for contacts
           */
          this.contactHref = "#";
          /**
           * 	href link for feedback
           */
          this.feedbackHref = "#";
          /**
           * 	href link for faq
           */
          this.faqHref = "#";
          /**
           * 	href link for privacy statement
           */
          this.privacyHref = "#";
          /**
           * 	href link for terms of use
           */
          this.termsOfUseHref = "#";
      }
      firstUpdated() {
          const socialMediaSlot = this.shadowRoot.querySelector("slot[name='social-media']");
          const footerTitleSlot = this.shadowRoot.querySelector("slot[name='title']");
          const footerDescriptionSlot = this.shadowRoot.querySelector("slot[name='description']");
          const footerItemsSlot = this.shadowRoot.querySelector("slot[name='items']");
          const socialMediaChildNodes = socialMediaSlot.assignedNodes({ flatten: true });
          const footerTitleChildNodes = footerTitleSlot.assignedNodes({ flatten: true });
          const footerDescriptionChildNodes = footerDescriptionSlot.assignedNodes({ flatten: true });
          const footerItemsChildNodes = footerItemsSlot.assignedNodes({ flatten: true });
          if (socialMediaChildNodes.length === 0) {
              const socialMediaContainer = this.shadowRoot.querySelector(".social-media");
              socialMediaContainer.style.display = "none";
          }
          if (footerTitleChildNodes.length === 0 && footerDescriptionChildNodes.length === 0) {
              const footerHeaderContainer = this.shadowRoot.querySelector(".footer-header");
              footerHeaderContainer.style.display = "none";
          }
          if (footerItemsChildNodes.length === 0) {
              const footerItemsContainer = this.shadowRoot.querySelector(".footer-items");
              footerItemsContainer.style.display = "none";
          }
          if (footerTitleChildNodes.length === 0 &&
              footerDescriptionChildNodes.length === 0 &&
              footerItemsChildNodes.length === 0) {
              const footerTopContainer = this.shadowRoot.querySelector(".footer-top");
              footerTopContainer.style.display = "none";
          }
      }
      render() {
          return html$1 `
      <footer class="footer">
        <section class="footer-top">
          <div class="footer-header">
            <slot name="title"></slot>
            <slot name="description"></slot>
          </div>
          <div class="footer-items">
            <slot name="items"></slot>
          </div>
        </section>
        <section class="footer-bottom">
          <div class="social-media">
            <slot name="social-media"></slot>
          </div>
          <div class="footer-mandatory-links">
            <ul>
              <li><a href=${this.contactHref}>Contact</a></li>
              <li><a href=${this.feedbackHref}>Feedback</a></li>
              <li><a href=${this.faqHref}>FAQ</a></li>
              <li>
                <a href="https://tech.gov.sg/report_vulnerability" target="_blank" rel="noopener noreferrer">
                  Report Vulnerability
                </a>
              </li>
              <li><a href=${this.privacyHref}>Privacy Statement</a></li>
              <li><a href=${this.termsOfUseHref}>Terms of use</a></li>
            </ul>
            <div class="footer-copyrights">© ${new Date().getFullYear()}, ${this.copyrightLiner}</div>
          </div>
        </section>
      </footer>
    `;
      }
  }
  SgdsFooter.styles = [...SgdsElement.styles, css_248z$s];
  __decorate([
      property({ type: String })
  ], SgdsFooter.prototype, "copyrightLiner", void 0);
  __decorate([
      property({ type: String })
  ], SgdsFooter.prototype, "contactHref", void 0);
  __decorate([
      property({ type: String })
  ], SgdsFooter.prototype, "feedbackHref", void 0);
  __decorate([
      property({ type: String })
  ], SgdsFooter.prototype, "faqHref", void 0);
  __decorate([
      property({ type: String })
  ], SgdsFooter.prototype, "privacyHref", void 0);
  __decorate([
      property({ type: String })
  ], SgdsFooter.prototype, "termsOfUseHref", void 0);

  var css_248z$r = css`.footer-item{margin-bottom:var(--sgds-margin-3-xs)}.footer-item,.links{display:flex;flex-direction:column;gap:var(--sgds-gap-xs)}slot[name=title]::slotted(*){--sgds-paragraph-spacing-xl:var(--sgds-margin-none);--sgds-font-weight-regular:var(--sgds-font-weight-semibold);color:var(--sgds-color-fixed-light);font-weight:var(--sgds-font-weight-regular,--sgds-font-weight-semibold);margin:var(--sgds-paragraph-spacing-xl,--sgds-margin-none)}.links{margin:0;padding:0}.links slot::slotted(a){--sgds-link-color-default:var(--sgds-color-fixed-light);color:var(--sgds-link-color-default,--sgds-fixed-light);text-decoration:none!important;width:fit-content}.links slot::slotted(a[target=_blank]){align-items:center;display:flex;gap:var(--sgds-gap-2-xs);justify-content:center}.links slot::slotted(a:focus),.links slot::slotted(a:focus-visible),slot::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-color-fixed-light);color:var(--sgds-link-color-emphasis,--sgds-color-fixed-light)}.links slot::slotted(a:focus),.links slot::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus);outline:0}`;

  /**
   * @summary The footer item component organizes links under a clear, descriptive title within the footer. It helps users easily navigate to related resources or information, ensuring clarity and accessibility.
   *
   * @slot default - The slot for the list of link items
   * @slot title - The slot for the title of the list of items
   *
   */
  class SgdsFooterItem extends SgdsElement {
      render() {
          return html$1 `
      <div class="footer-item">
        <slot name="title"></slot>
        <div class="links">
          <slot></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsFooterItem.styles = [...SgdsElement.styles, css_248z$r];

  register("sgds-footer", SgdsFooter);
  register("sgds-footer-item", SgdsFooterItem);

  register("sgds-icon", SgdsIcon);

  register("sgds-icon-button", SgdsIconButton);

  var css_248z$q = css`slot{display:flex;flex-direction:column;gap:var(--sgds-gap-xs)}slot::slotted(*){align-items:center;display:flex;gap:var(--sgds-gap-xs)}.sm{font-size:var(--sgds-font-size-1)}.lg{font-size:var(--sgds-font-size-3)}`;

  /**
   * @summary A IconList can be used to display content related to the same topic. Each list item begins an icon.
   *
   * @slot default - The list items of IconList. Each list items should have aria attribute role="listitem" added
   */
  class SgdsIconList extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Sets the aria-role of the sgds-icon-list */
          this.role = "list";
          /** The size of icon list. Changes the font-size the list items */
          this.size = "md";
      }
      render() {
          return html$1 `
      <div class=${classMap({ [this.size]: this.size })}>
        <slot></slot>
      </div>
    `;
      }
  }
  SgdsIconList.styles = [...SgdsElement.styles, css_248z$q];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsIconList.prototype, "role", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsIconList.prototype, "size", void 0);

  register("sgds-icon-list", SgdsIconList);

  register("sgds-input", SgdsInput);

  register("sgds-link", SgdsLink);

  /**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * An event fired by a context requester to signal it desires a specified context with the given key.
   *
   * A provider should inspect the `context` property of the event to determine if it has a value that can
   * satisfy the request, calling the `callback` with the requested value if so.
   *
   * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback
   * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`
   * method to the callback which consumers can invoke to indicate they no longer wish to receive these updates.
   *
   * If no `subscribe` value is present in the event, then the provider can assume that this is a 'one time'
   * request for the context and can therefore not track the consumer.
   */
  class ContextRequestEvent extends Event {
      /**
       *
       * @param context the context key to request
       * @param callback the callback that should be invoked when the context with the specified key is available
       * @param subscribe when, true indicates we want to subscribe to future updates
       */
      constructor(context, callback, subscribe) {
          super('context-request', { bubbles: true, composed: true });
          this.context = context;
          this.callback = callback;
          this.subscribe = subscribe ?? false;
      }
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * Creates a typed Context.
   *
   * Contexts are compared with strict equality.
   *
   * If you want two separate `createContext()` calls to referer to the same
   * context, then use a key that will by equal under strict equality like a
   * string for `Symbol.for()`:
   *
   * ```ts
   * // true
   * createContext('my-context') === createContext('my-context')
   * // true
   * createContext(Symbol.for('my-context')) === createContext(Symbol.for('my-context'))
   * ```
   *
   * If you want a context to be unique so that it's guaranteed to not collide
   * with other contexts, use a key that's unique under strict equality, like
   * a `Symbol()` or object.:
   *
   * ```
   * // false
   * createContext({}) === createContext({})
   * // false
   * createContext(Symbol('my-context')) === createContext(Symbol('my-context'))
   * ```
   *
   * @param key a context key value
   * @template ValueType the type of value that can be provided by this context.
   * @returns the context key value cast to `Context<K, ValueType>`
   */
  function createContext(key) {
      return key;
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * A ReactiveController which adds context consuming behavior to a custom
   * element by dispatching `context-request` events.
   *
   * When the host element is connected to the document it will emit a
   * `context-request` event with its context key. When the context request
   * is satisfied the controller will invoke the callback, if present, and
   * trigger a host update so it can respond to the new value.
   *
   * It will also call the dispose method given by the provider when the
   * host element is disconnected.
   */
  class ContextConsumer {
      constructor(host, contextOrOptions, callback, subscribe) {
          this.subscribe = false;
          this.provided = false;
          this.value = undefined;
          // This function must have stable identity to properly dedupe in ContextRoot
          // if this element connects multiple times.
          this._callback = (value, unsubscribe) => {
              // some providers will pass an unsubscribe function indicating they may provide future values
              if (this.unsubscribe) {
                  // if the unsubscribe function changes this implies we have changed provider
                  if (this.unsubscribe !== unsubscribe) {
                      // cleanup the old provider
                      this.provided = false;
                      this.unsubscribe();
                  }
                  // if we don't support subscription, immediately unsubscribe
                  if (!this.subscribe) {
                      this.unsubscribe();
                  }
              }
              // store the value so that it can be retrieved from the controller
              this.value = value;
              // schedule an update in case this value is used in a template
              this.host.requestUpdate();
              // only invoke callback if we are either expecting updates or have not yet
              // been provided a value
              if (!this.provided || this.subscribe) {
                  this.provided = true;
                  if (this.callback) {
                      this.callback(value, unsubscribe);
                  }
              }
              this.unsubscribe = unsubscribe;
          };
          this.host = host;
          // This is a potentially fragile duck-type. It means a context object can't
          // have a property name context and be used in positional argument form.
          if (contextOrOptions.context !== undefined) {
              const options = contextOrOptions;
              this.context = options.context;
              this.callback = options.callback;
              this.subscribe = options.subscribe ?? false;
          }
          else {
              this.context = contextOrOptions;
              this.callback = callback;
              this.subscribe = subscribe ?? false;
          }
          this.host.addController(this);
      }
      hostConnected() {
          this.dispatchRequest();
      }
      hostDisconnected() {
          if (this.unsubscribe) {
              this.unsubscribe();
              this.unsubscribe = undefined;
          }
      }
      dispatchRequest() {
          this.host.dispatchEvent(new ContextRequestEvent(this.context, this._callback, this.subscribe));
      }
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /**
   * A simple class which stores a value, and triggers registered callbacks when
   * the value is changed via its setter.
   *
   * An implementor might use other observable patterns such as MobX or Redux to
   * get behavior like this. But this is a pretty minimal approach that will
   * likely work for a number of use cases.
   */
  class ValueNotifier {
      get value() {
          return this._value;
      }
      set value(v) {
          this.setValue(v);
      }
      setValue(v, force = false) {
          const update = force || !Object.is(v, this._value);
          this._value = v;
          if (update) {
              this.updateObservers();
          }
      }
      constructor(defaultValue) {
          this.subscriptions = new Map();
          this.updateObservers = () => {
              for (const [callback, { disposer }] of this.subscriptions) {
                  callback(this._value, disposer);
              }
          };
          if (defaultValue !== undefined) {
              this.value = defaultValue;
          }
      }
      addCallback(callback, consumerHost, subscribe) {
          if (!subscribe) {
              // just call the callback once and we're done
              callback(this.value);
              return;
          }
          if (!this.subscriptions.has(callback)) {
              this.subscriptions.set(callback, {
                  disposer: () => {
                      this.subscriptions.delete(callback);
                  },
                  consumerHost,
              });
          }
          const { disposer } = this.subscriptions.get(callback);
          callback(this.value, disposer);
      }
      clearCallbacks() {
          this.subscriptions.clear();
      }
  }

  /**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  class ContextProviderEvent extends Event {
      /**
       *
       * @param context the context which this provider can provide
       */
      constructor(context) {
          super('context-provider', { bubbles: true, composed: true });
          this.context = context;
      }
  }
  /**
   * A ReactiveController which adds context provider behavior to a
   * custom element.
   *
   * This controller simply listens to the `context-request` event when
   * the host is connected to the DOM and registers the received callbacks
   * against its observable Context implementation.
   *
   * The controller may also be attached to any HTML element in which case it's
   * up to the user to call hostConnected() when attached to the DOM. This is
   * done automatically for any custom elements implementing
   * ReactiveControllerHost.
   */
  class ContextProvider extends ValueNotifier {
      constructor(host, contextOrOptions, initialValue) {
          super(contextOrOptions.context !== undefined
              ? contextOrOptions.initialValue
              : initialValue);
          this.onContextRequest = (ev) => {
              // Only call the callback if the context matches.
              // Also, in case an element is a consumer AND a provider
              // of the same context, we want to avoid the element to self-register.
              // The check on composedPath (as opposed to ev.target) is to cover cases
              // where the consumer is in the shadowDom of the provider (in which case,
              // event.target === this.host because of event retargeting).
              const consumerHost = ev.composedPath()[0];
              if (ev.context !== this.context || consumerHost === this.host) {
                  return;
              }
              ev.stopPropagation();
              this.addCallback(ev.callback, consumerHost, ev.subscribe);
          };
          /**
           * When we get a provider request event, that means a child of this element
           * has just woken up. If it's a provider of our context, then we may need to
           * re-parent our subscriptions, because is a more specific provider than us
           * for its subtree.
           */
          this.onProviderRequest = (ev) => {
              // Ignore events when the context doesn't match.
              // Also, in case an element is a consumer AND a provider
              // of the same context it shouldn't provide to itself.
              // We use composedPath (as opposed to ev.target) to cover cases
              // where the consumer is in the shadowDom of the provider (in which case,
              // event.target === this.host because of event retargeting).
              const childProviderHost = ev.composedPath()[0];
              if (ev.context !== this.context || childProviderHost === this.host) {
                  return;
              }
              // Re-parent all of our subscriptions in case this new child provider
              // should take them over.
              const seen = new Set();
              for (const [callback, { consumerHost }] of this.subscriptions) {
                  // Prevent infinite loops in the case where a one host element
                  // is providing the same context multiple times.
                  //
                  // While normally it's a no-op to attempt to re-parent a subscription
                  // that already has its proper parent, in the case where there's more
                  // than one ValueProvider for the same context on the same hostElement,
                  // they will each call the consumer, and since they will each have their
                  // own dispose function, a well behaved consumer will notice the change
                  // in dispose function and call their old one.
                  //
                  // This will cause the subscriptions to thrash, but worse, without this
                  // set check here, we can end up in an infinite loop, as we add and remove
                  // the same subscriptions onto the end of the map over and over.
                  if (seen.has(callback)) {
                      continue;
                  }
                  seen.add(callback);
                  consumerHost.dispatchEvent(new ContextRequestEvent(this.context, callback, true));
              }
              ev.stopPropagation();
          };
          this.host = host;
          if (contextOrOptions.context !== undefined) {
              this.context = contextOrOptions.context;
          }
          else {
              this.context = contextOrOptions;
          }
          this.attachListeners();
          this.host.addController?.(this);
      }
      attachListeners() {
          this.host.addEventListener('context-request', this.onContextRequest);
          this.host.addEventListener('context-provider', this.onProviderRequest);
      }
      hostConnected() {
          // emit an event to signal a provider is available for this context
          this.host.dispatchEvent(new ContextProviderEvent(this.context));
      }
  }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /*
   * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all
   * property decorators (but not class decorators) in this file that have
   * an @ExportDecoratedItems annotation must be defined as a regular function,
   * not an arrow function.
   */
  /**
   * A property decorator that adds a ContextProvider controller to the component
   * making it respond to any `context-request` events from its children consumer.
   *
   * @param context A Context identifier value created via `createContext`
   *
   * @example
   *
   * ```ts
   * import {provide} from '@lit/context';
   * import {Logger} from 'my-logging-library';
   * import {loggerContext} from './logger-context.js';
   *
   * class MyElement {
   *   @provide({context: loggerContext})
   *   logger = new Logger();
   * }
   * ```
   * @category Decorator
   */
  function provide({ context: context, }) {
      return ((protoOrTarget, nameOrContext) => {
          // Map of instances to controllers
          const controllerMap = new WeakMap();
          if (typeof nameOrContext === 'object') {
              // Standard decorators branch
              nameOrContext.addInitializer(function () {
                  controllerMap.set(this, new ContextProvider(this, { context }));
              });
              return {
                  get() {
                      return protoOrTarget.get.call(this);
                  },
                  set(value) {
                      controllerMap.get(this)?.setValue(value);
                      return protoOrTarget.set.call(this, value);
                  },
                  init(value) {
                      controllerMap.get(this)?.setValue(value);
                      return value;
                  },
              };
          }
          else {
              // Experimental decorators branch
              protoOrTarget.constructor.addInitializer((element) => {
                  controllerMap.set(element, new ContextProvider(element, { context }));
              });
              // proxy any existing setter for this property and use it to
              // notify the controller of an updated value
              const descriptor = Object.getOwnPropertyDescriptor(protoOrTarget, nameOrContext);
              let newDescriptor;
              if (descriptor === undefined) {
                  const valueMap = new WeakMap();
                  newDescriptor = {
                      get() {
                          return valueMap.get(this);
                      },
                      set(value) {
                          controllerMap.get(this).setValue(value);
                          valueMap.set(this, value);
                      },
                      configurable: true,
                      enumerable: true,
                  };
              }
              else {
                  const oldSetter = descriptor.set;
                  newDescriptor = {
                      ...descriptor,
                      set(value) {
                          controllerMap.get(this).setValue(value);
                          oldSetter?.call(this, value);
                      },
                  };
              }
              Object.defineProperty(protoOrTarget, nameOrContext, newDescriptor);
              return;
          }
      });
  }

  /**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  /*
   * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all
   * property decorators (but not class decorators) in this file that have
   * an @ExportDecoratedItems annotation must be defined as a regular function,
   * not an arrow function.
   */
  /**
   * A property decorator that adds a ContextConsumer controller to the component
   * which will try and retrieve a value for the property via the Context API.
   *
   * @param context A Context identifier value created via `createContext`
   * @param subscribe An optional boolean which when true allows the value to be updated
   *   multiple times.
   *
   * @example
   *
   * ```ts
   * import {consume} from '@lit/context';
   * import {loggerContext, Logger} from 'community-protocols/logger';
   *
   * class MyElement {
   *   @consume({context: loggerContext})
   *   logger?: Logger;
   *
   *   doThing() {
   *     this.logger!.log('thing was done');
   *   }
   * }
   * ```
   * @category Decorator
   */
  function consume({ context, subscribe, }) {
      return ((protoOrTarget, nameOrContext) => {
          if (typeof nameOrContext === 'object') {
              // Standard decorators branch
              nameOrContext.addInitializer(function () {
                  new ContextConsumer(this, {
                      context,
                      callback: (value) => {
                          protoOrTarget.set.call(this, value);
                      },
                      subscribe,
                  });
              });
          }
          else {
              // Experimental decorators branch
              protoOrTarget.constructor.addInitializer((element) => {
                  new ContextConsumer(element, {
                      context,
                      callback: (value) => {
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          element[nameOrContext] = value;
                      },
                      subscribe,
                  });
              });
          }
      });
  }

  const LG_BREAKPOINT = 992;
  const MD_BREAKPOINT = 768;
  const SM_BREAKPOINT = 576;
  const XL_BREAKPOINT = 1200;
  const XXL_BREAKPOINT = 1400;

  var css_248z$p = css`nav{background-color:var(--sgds-surface-default);box-shadow:0 2px 2px 0 hsla(0,0%,5%,.08)}.navbar{align-items:stretch;display:flex;flex-wrap:wrap;gap:var(--sgds-gap-xs);justify-content:space-between;margin:auto;max-width:var(--sgds-mainnav-max-width);min-height:80px;padding:0 var(--sgds-mainnav-padding-x);position:relative;width:100%}@media screen and (max-width:768px){.navbar{padding:0 var(--sgds-mainnav-mobile-padding-x)}}.navbar-brand{align-items:center;display:flex;text-decoration:none;white-space:nowrap}.navbar-brand:focus,.navbar-brand:focus-visible{box-shadow:var(--sgds-box-shadow-focus);outline:0}.navbar-nav{display:flex;flex-direction:column;height:100%;margin-bottom:0;margin-top:0;width:100%}nav>.navbar-body{background-color:var(--sgds-surface-default);border-top:var(--sgds-border-width-1) solid var(--sgds-border-color-translucent);bottom:0;box-shadow:0 2px 2px 0 hsla(0,0%,5%,.08);padding:var(--sgds-padding-md) 0;position:absolute;transition:transform .2s ease-in-out;width:100%;z-index:2000}nav>.navbar-body slot::slotted(:not(sgds-mainnav-item):not(sgds-mainnav-dropdown)){padding:var(--sgds-padding-sm) var(--sgds-mainnav-padding-x)}@media screen and (max-width:768px){nav>.navbar-body slot::slotted(:not(sgds-mainnav-item):not(sgds-mainnav-dropdown)){padding:var(--sgds-padding-sm) var(--sgds-mainnav-mobile-padding-x)}}.navbar-collapse{align-items:center;flex-basis:100%;flex-grow:1}.navbar-toggler{align-self:center}@media (prefers-reduced-motion:reduce){.navbar-toggler{transition:none}}.navbar-nav-scroll{overflow-y:auto}@media (min-width:576px){.navbar-expand-sm{flex-wrap:nowrap;gap:var(--sgds-gap-xl);justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}}@media (min-width:768px){.navbar-expand-md{flex-wrap:nowrap;gap:var(--sgds-gap-xl);justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}}@media (min-width:992px){.navbar-expand-lg{flex-wrap:nowrap;gap:var(--sgds-gap-xl);justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}}@media (min-width:1200px){.navbar-expand-xl{flex-wrap:nowrap;gap:var(--sgds-gap-xl);justify-content:flex-start}.navbar-expand-xl .navbar-nav .nav-link{padding-left:var(--mainnav-nav-link-padding-x);padding-right:var(--mainnav-nav-link-padding-x)}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}}@media (min-width:1400px){.navbar-expand-xxl{flex-wrap:nowrap;gap:var(--sgds-gap-xl);justify-content:flex-start}.navbar-expand-xxl .navbar-nav{flex-direction:row}.navbar-expand-xxl .navbar-nav-scroll{overflow:visible}.navbar-expand-xxl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xxl .navbar-toggler{display:none}}.navbar-expand{flex-wrap:nowrap;gap:var(--sgds-gap-xl);justify-content:flex-start}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}slot[name=non-collapsible]{align-items:center;display:flex;gap:var(--sgds-spacer-4);margin-left:auto}.slot-end{align-items:stretch;display:flex;gap:var(--sgds-gap-xs);margin-left:auto}.slot-end::slotted(:not([name$=-mainnav-item]):not([name$=-mainnav-dropdown])){align-self:center}`;

  const MainnavContext = createContext("mainnav-context");

  const SIZES = {
      sm: SM_BREAKPOINT,
      md: MD_BREAKPOINT,
      lg: LG_BREAKPOINT,
      xl: XL_BREAKPOINT,
      XXL: XXL_BREAKPOINT,
      never: Infinity,
      always: -1
  };
  /**
   * @summary This component is the primary means that your users will use to navigate through your portal. It includes horizontal navigation and branding to identify your site.
   *
   * @event sgds-show - Emitted on show. Only for collapsed menu.
   * @event sgds-after-show - Emitted on show after animation has completed. Only for collapsed menu.
   * @event sgds-hide - Emitted on hide. Only for collapsed menu.
   * @event sgds-after-hide - Emitted on hide after animation has completed. Only for collapsed menu.
   *
   * @slot default - Default slot of SgdsMainnav. Pass in SgdsMainnavItem elements here.
   * @slot end - Elements in this slot will be positioned to the right end of .navbar-nav. Elements in this slot will also be included in collapsed menu.
   * @slot brand - Brand slot of SgdsMainnav. Pass in brand logo img here
   * @slot non-collapsible - Elements in this slot will not be collapsed
   *
   */
  class SgdsMainnav extends SgdsElement {
      constructor() {
          super();
          this._breakpointReached = false;
          /** The href link for brand logo */
          this.brandHref = "";
          this.collapseId = genId("mainnav", "collapse");
          /** The breakpoint, below which, the Navbar will collapse. When always the Navbar will always be expanded regardless of screen size. When never, the Navbar will always be collapsed */
          this.expand = "lg";
          /** @internal */
          this.breakpointReached = false;
          /** @internal */
          this.expanded = false;
          window.addEventListener("resize", () => {
              const newBreakpointReachedValue = window.innerWidth < SIZES[this.expand];
              if (newBreakpointReachedValue !== this.breakpointReached) {
                  this.requestUpdate();
              }
              else {
                  this.body ? (this.body.hidden = true) : null;
                  this.expanded = false;
              }
              if (newBreakpointReachedValue) {
                  this._handleMobileNav();
                  if (!this._breakpointReached) {
                      this._breakpointReached = true;
                  }
              }
              else {
                  this._handleDesktopNav();
                  this._breakpointReached = false;
              }
          });
      }
      /** @internal */
      get defaultSlotItems() {
          return [...(this.defaultNodes || [])].filter((node) => typeof node.tagName !== "undefined");
      }
      /** @internal */
      get endSlotItems() {
          return [...(this.endNodes || [])].filter((node) => typeof node.tagName !== "undefined");
      }
      connectedCallback() {
          super.connectedCallback();
          this.addEventListener("click", (event) => this._handleClickOutOfElement(event, this.body));
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          this.removeEventListener("click", (event) => this._handleClickOutOfElement(event, this.body));
      }
      firstUpdated() {
          if (this.breakpointReached && this.body) {
              this.expanded = false;
              this.body.hidden = true;
              this._handleMobileNav();
              this._breakpointReached = true;
          }
          const items = [...this.defaultSlotItems, ...this.endSlotItems];
          items.forEach((item) => {
              item.setAttribute("expand", this.expand);
          });
      }
      _handleClickOutOfElement(e, self) {
          if (!e.composedPath().includes(self) && !e.composedPath().includes(this.header)) {
              this.hide();
          }
      }
      _handleSummaryClick() {
          if (this.expanded) {
              this.hide();
          }
          else {
              document.querySelector("body").style.overflow = "hidden";
              this.show();
          }
          this.header.focus();
      }
      async _handleMobileNav() {
          if (!this.nav)
              return;
          this.nav.appendChild(this.body);
          await customElements.whenDefined("sgds-masthead");
          const offsetTop = this.nav.offsetTop;
          const navHeight = this.nav.clientHeight;
          const mainNavPosition = offsetTop + navHeight;
          this.body.style.top = `${mainNavPosition}px`;
          this.navScroll.style.maxHeight = `calc(100dvh - ${mainNavPosition}px)`;
      }
      _handleDesktopNav() {
          var _a;
          (_a = this.navbar) === null || _a === void 0 ? void 0 : _a.insertBefore(this.body, this.nonCollapsibleSlot);
      }
      async _animateToShow() {
          const sgdsShow = this.emit("sgds-show", { cancelable: true });
          if (sgdsShow.defaultPrevented) {
              this.expanded = false;
              return;
          }
          await stopAnimations(this.body);
          this.body.hidden = false;
          const { keyframes, options } = getAnimation(this, "mainnav.show");
          await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
          this.body.style.height = "auto";
          this.emit("sgds-after-show");
      }
      async _animateToHide() {
          const slHide = this.emit("sgds-hide", { cancelable: true });
          if (slHide.defaultPrevented) {
              this.expanded = true;
              return;
          }
          await stopAnimations(this.body);
          const { keyframes, options } = getAnimation(this, "mainnav.hide");
          await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
          this.body.hidden = true;
          this.body.style.height = "auto";
          this.emit("sgds-after-hide");
      }
      async handleOpenChange() {
          if (this.expanded) {
              // Show
              this._animateToShow();
          }
          else {
              // Hide
              this._animateToHide();
          }
      }
      /** Shows the menu. For when mainnav is in the collapsed form */
      async show() {
          if (this.expanded) {
              return;
          }
          this.expanded = true;
          return waitForEvent(this, "sgds-after-show");
      }
      /** Hide the menu. For when mainnav is in the collapsed form */
      async hide() {
          if (!this.expanded) {
              return;
          }
          this.expanded = false;
          document.querySelector("body").style.removeProperty("overflow");
          this.emit("close-dropdown-menu");
          return waitForEvent(this, "sgds-after-hide");
      }
      // assigning name attribute to elements added in slot="end", to use wildcard css selector to assign styles only to *-mainnav-item
      _handleSlotChange(e) {
          const childElements = e.target.assignedElements({ flatten: true });
          childElements.forEach(e => {
              e.setAttribute("name", e.tagName.toLowerCase());
          });
      }
      render() {
          this.breakpointReached = window.innerWidth < SIZES[this.expand];
          return html$1 `
      <nav>
        <div class="navbar ${this._expandClass()}">
          <a class="navbar-brand" href=${this.brandHref} aria-label="brand-link">
            <slot name="brand"></slot>
          </a>
          <div class="navbar-body navbar-collapse" id=${this.collapseId}>
            <div class="navbar-nav navbar-nav-scroll">
              <slot></slot>
              <slot
                name="end"
                class=${classMap({ "slot-end": !this.breakpointReached })}
                @slotchange=${this._handleSlotChange}
              ></slot>
            </div>
          </div>
          <slot name="non-collapsible"></slot>
          <sgds-icon-button
            name=${this.expanded ? "cross" : "menu"}
            variant="ghost"
            size="sm"
            class="navbar-toggler"
            @click=${this._handleSummaryClick}
            aria-controls="${this.collapseId}"
            aria-expanded="${this.expanded}"
            aria-label="Toggle navigation"
          ></sgds-icon-button>
        </div>
      </nav>
    `;
      }
      _expandClass() {
          switch (this.expand) {
              case "always":
                  return "navbar-expand";
              case "never":
                  break;
              default:
                  return `navbar-expand-${this.expand}`;
          }
      }
  }
  SgdsMainnav.styles = [...SgdsElement.styles, css_248z$p];
  /** @internal */
  SgdsMainnav.dependencies = {
      "sgds-icon": SgdsIcon
  };
  __decorate([
      provide({ context: MainnavContext }),
      state()
  ], SgdsMainnav.prototype, "_breakpointReached", void 0);
  __decorate([
      query("nav")
  ], SgdsMainnav.prototype, "nav", void 0);
  __decorate([
      query(".navbar")
  ], SgdsMainnav.prototype, "navbar", void 0);
  __decorate([
      query(".navbar-toggler")
  ], SgdsMainnav.prototype, "header", void 0);
  __decorate([
      query(".navbar-body")
  ], SgdsMainnav.prototype, "body", void 0);
  __decorate([
      query(".navbar-nav-scroll")
  ], SgdsMainnav.prototype, "navScroll", void 0);
  __decorate([
      query("slot[name='non-collapsible']")
  ], SgdsMainnav.prototype, "nonCollapsibleSlot", void 0);
  __decorate([
      property({ type: String })
  ], SgdsMainnav.prototype, "brandHref", void 0);
  __decorate([
      property({ type: String })
  ], SgdsMainnav.prototype, "expand", void 0);
  __decorate([
      state()
  ], SgdsMainnav.prototype, "breakpointReached", void 0);
  __decorate([
      state()
  ], SgdsMainnav.prototype, "expanded", void 0);
  __decorate([
      queryAssignedElements()
  ], SgdsMainnav.prototype, "defaultNodes", void 0);
  __decorate([
      queryAssignedElements({ slot: "end" })
  ], SgdsMainnav.prototype, "endNodes", void 0);
  __decorate([
      watch("expanded", { waitUntilFirstUpdate: true })
  ], SgdsMainnav.prototype, "handleOpenChange", null);
  setDefaultAnimation("mainnav.show", {
      keyframes: [
          { height: "0", opacity: "0" },
          { height: "auto", opacity: "1" }
      ],
      options: { duration: 200, easing: "ease-in-out" }
  });
  setDefaultAnimation("mainnav.hide", {
      keyframes: [
          { height: "auto", opacity: "1" },
          { height: "0", opacity: "0" }
      ],
      options: { duration: 200, easing: "ease-in-out" }
  });

  var css_248z$o = css`:host([expand=always]) .nav-link{border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}@media (min-width:576px){:host([expand=sm]) .nav-link{border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host([expand=sm]) .nav-link:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus)}}@media (min-width:768px){:host([expand=md]) .nav-link{border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host([expand=md]) .nav-link:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus)}}@media (min-width:992px){:host(:not([expand])) .nav-link,:host([expand=lg]) .nav-link{border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host([expand=lg]) .nav-link:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus)}}@media (min-width:1200px){:host([expand=xl]) .nav-link{border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host([expand=xl]) .nav-link:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus)}}@media (min-width:1400px){:host([expand=xxl]) .nav-link{border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host([expand=xxl]) .nav-link:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus)}}.nav-link{align-items:center;cursor:pointer;display:flex;gap:var(--sgds-gap-xs);padding:var(--sgds-padding-sm) var(--sgds-mainnav-padding-x);text-decoration:none}@media screen and (max-width:768px){.nav-link{padding:var(--sgds-padding-sm) var(--sgds-mainnav-mobile-padding-x)}}.nav-link.show,.nav-link:not(.disabled).active{border-color:var(--sgds-primary-border-color-default);color:var(--sgds-primary-color-default)}.nav-link:not(.disabled):hover{color:var(--sgds-primary-color-default)}.nav-link:not(.disabled):focus,.nav-link:not(.disabled):focus-visible{outline:0}.nav-link:not(.disabled):focus-visible{box-shadow:var(--sgds-box-shadow-focus) inset;color:var(--sgds-primary-color-default)}.nav-link.disabled{cursor:not-allowed;opacity:var(--sgds-opacity-50)}.dropdown-items{background-color:var(--sgds-surface-default);height:100%;left:100%;padding:var(--sgds-padding-md) 0;position:absolute;top:0;width:100%}.dropdown-items a{align-items:center;color:var(--sgds-color-default);cursor:pointer;display:flex;gap:var(--sgds-gap-xs);padding:var(--sgds-padding-sm) var(--sgds-mainnav-padding-x);text-decoration:none}.dropdown-items a:hover{color:var(--sgds-primary-color-default)}.dropdown-items a:focus,.dropdown-items a:focus-visible{outline:0}.dropdown-items a:focus-visible{box-shadow:var(--sgds-box-shadow-focus) inset;color:var(--sgds-primary-color-default)}slot[name=toggler]::slotted(*){flex:1}`;

  const TAB = "Tab";
  const ENTER = "Enter";
  const SPACE = " ";
  /**
   * @slot default - The menu items. Pass in sgds-dropdown-item as the menu items
   * @slot toggler - The content of the toggler to pass in html content.
   */
  class SgdsMainnavDropdown extends SgdsElement {
      constructor() {
          super(...arguments);
          /** @internal Forwards value to id attribute of toggle button of Dropdown. An unique id generated by default */
          this.togglerId = genId("dropdown", "button");
          /** When true,  applies active styles on the dropdown button */
          this.active = false;
          /** When true,  applies active styles on the dropdown button */
          this.disabled = false;
      }
      /** @internal */
      get defaultSlotItems() {
          return [...(this.defaultNodes || [])].filter((node) => typeof node.tagName !== "undefined");
      }
      connectedCallback() {
          super.connectedCallback();
          document.addEventListener("close-dropdown-menu", () => {
              this._resetDropdownMenu();
              this._hideDropdownMenuItems();
          });
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          // Clean up the event listener when the element is removed from the DOM
          document.removeEventListener("close-dropdown-menu", () => {
              this._resetDropdownMenu();
              this._hideDropdownMenuItems();
          });
      }
      willUpdate(changedProperties) {
          super.willUpdate(changedProperties);
          if (!this.shadowRoot) {
              return;
          }
          if (this._breakpointReached) {
              this.shadowRoot.adoptedStyleSheets = [css_248z$$.styleSheet, css_248z$o.styleSheet];
          }
      }
      updated() {
          if (this._breakpointReached) {
              this._copyTextToMenu();
              this._resetDropdownMenu();
              this._hideDropdownMenuItems();
          }
      }
      _handleSlotChange(e) {
          const items = e.target.assignedElements({ flatten: true });
          items.forEach(item => {
              item.addEventListener("keydown", this._handleKeyboardMenuItemsEvent.bind(this));
              const dropdownItem = item.shadowRoot.querySelector(".dropdown-item");
              dropdownItem.classList.add("nav-link");
              const slottedItem = item.shadowRoot.querySelector(".dropdown-item slot").assignedElements({
                  flatten: true
              });
              slottedItem.forEach(item => {
                  item.tabIndex = -1;
              });
          });
      }
      _handleDesktopSlotChange(e) {
          const items = e.target.assignedElements({ flatten: true });
          items.forEach(item => {
              const dropdownItem = item.shadowRoot.querySelector(".dropdown-item");
              dropdownItem.classList.remove("nav-link");
          });
      }
      _handleKeyboardMenuItemsEvent(e) {
          if (!this._breakpointReached) {
              return;
          }
          const slottedItems = this.defaultSlotItems.filter(item => !item.hasAttribute("disabled"));
          const items = [this.menuHeaderButton, ...slottedItems];
          const itemLength = items.length;
          if (itemLength === 0) {
              return;
          }
          const firstItem = items[0];
          const lastItem = items[itemLength - 1].shadowRoot.querySelector(".dropdown-item");
          let activeElement = document.activeElement;
          if (activeElement === this) {
              activeElement = this.shadowRoot.activeElement;
          }
          switch (e.key) {
              case "Tab": {
                  if (e.shiftKey) {
                      if (activeElement === firstItem) {
                          e.preventDefault();
                          setTimeout(() => {
                              lastItem.focus();
                          }, 0);
                      }
                  }
                  else {
                      const activeShadowElement = activeElement.shadowRoot
                          ? activeElement.shadowRoot.querySelector(".dropdown-item")
                          : null;
                      if (activeShadowElement && activeShadowElement === lastItem) {
                          e.preventDefault();
                          firstItem.focus();
                      }
                  }
                  break;
              }
          }
      }
      _copyTextToMenu() {
          this.menuHeaderText.innerHTML = this.togglerNodes[0].innerHTML;
      }
      _hideDropdownMenuItems() {
          this.dropdownItems.style.display = "none";
          this.dropdownItems.setAttribute("aria-hidden", "true");
      }
      _resetDropdownMenu() {
          const navbarBody = this._getNavbarBody();
          navbarBody.style.removeProperty("transform");
      }
      _handleKeyboardOpen(event) {
          if (this.disabled) {
              return;
          }
          if (event.key === ENTER || event.key === SPACE) {
              event.preventDefault();
              this._openMenu();
          }
      }
      _getNavbarBody() {
          const mainNav = document.querySelector("sgds-mainnav");
          if (!(mainNav === null || mainNav === void 0 ? void 0 : mainNav.shadowRoot)) {
              console.warn("sgds-mainnav or its shadowRoot not found");
              return;
          }
          const navbarBody = mainNav.shadowRoot.querySelector(".navbar-body");
          if (!navbarBody) {
              console.warn(".navbar-body not found in sgds-mainnav");
              return;
          }
          return navbarBody;
      }
      _openMenu() {
          const navbarBody = this._getNavbarBody();
          navbarBody.style.transform = "translateX(-100%)";
          this.dropdownItems.style.removeProperty("display");
          this.dropdownItems.setAttribute("aria-hidden", "false");
          setTimeout(() => {
              this.menuHeaderButton.focus();
          }, 50);
      }
      _handleHeaderKeyboardEvent(event) {
          switch (event.key) {
              case TAB: {
                  this._handleKeyboardMenuItemsEvent(event);
                  break;
              }
              case ENTER:
              case SPACE: {
                  event.preventDefault();
                  this._closeMenu();
                  break;
              }
          }
      }
      _closeMenu() {
          // 200ms delay as the transform transition is set to this timing
          this._resetDropdownMenu();
          setTimeout(() => {
              this._hideDropdownMenuItems();
              this.navLink.focus();
          }, 200);
      }
      render() {
          const mobileView = html$1 `
      <a
        class="${classMap({
            "nav-link": true,
            active: this.active,
            disabled: this.disabled
        })}"
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        role="button"
        @click=${this._openMenu}
        @keydown=${this._handleKeyboardOpen}
      >
        <slot name="toggler"></slot>
        <sgds-icon name="chevron-right"></sgds-icon>
      </a>
      <div class="dropdown-items">
        <a tabindex="0" role="button" @click=${this._closeMenu} @keydown=${this._handleHeaderKeyboardEvent}>
          <sgds-icon name="chevron-left"></sgds-icon>
          <span></span>
        </a>
        <slot @slotchange=${this._handleSlotChange}></slot>
      </div>
    `;
          const desktopView = html$1 `<sgds-dropdown
      modifierOpt=${[
            {
                name: "offset",
                options: {
                    offset: [0, 0]
                }
            }
        ]}
      ?disabled=${this.disabled}
    >
      <a
        class="${classMap({
            "nav-link": true,
            active: this.active,
            disabled: this.disabled
        })}"
        aria-disabled=${this.disabled ? "true" : "false"}
        id=${this.togglerId}
        tabindex=${this.disabled ? "-1" : "0"}
        role="button"
        slot="toggler"
      >
        <slot name="toggler"></slot>
        <sgds-icon name="chevron-down"></sgds-icon>
      </a>
      <slot @slotchange=${this._handleDesktopSlotChange}></slot>
    </sgds-dropdown>`;
          return this._breakpointReached ? mobileView : desktopView;
      }
  }
  SgdsMainnavDropdown.styles = [...SgdsElement.styles, css_248z$_, css_248z$$, css_248z$o];
  /** @internal */
  SgdsMainnavDropdown.dependencies = {
      "sgds-dropdown": SgdsDropdown,
      "sgds-dropdown-item": SgdsDropdownItem,
      "sgds-icon": SgdsIcon
  };
  __decorate([
      consume({ context: MainnavContext, subscribe: true }),
      state()
  ], SgdsMainnavDropdown.prototype, "_breakpointReached", void 0);
  __decorate([
      query(".nav-link")
  ], SgdsMainnavDropdown.prototype, "navLink", void 0);
  __decorate([
      query(".dropdown-items")
  ], SgdsMainnavDropdown.prototype, "dropdownItems", void 0);
  __decorate([
      query(".dropdown-items a")
  ], SgdsMainnavDropdown.prototype, "menuHeaderButton", void 0);
  __decorate([
      query(".dropdown-items span")
  ], SgdsMainnavDropdown.prototype, "menuHeaderText", void 0);
  __decorate([
      property({ type: Boolean })
  ], SgdsMainnavDropdown.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsMainnavDropdown.prototype, "disabled", void 0);
  __decorate([
      queryAssignedElements({ slot: "toggler" })
  ], SgdsMainnavDropdown.prototype, "togglerNodes", void 0);
  __decorate([
      queryAssignedElements()
  ], SgdsMainnavDropdown.prototype, "defaultNodes", void 0);

  var css_248z$n = css`:host([expand=always]) ::slotted(*){border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}@media screen and (min-width:576px){:host([expand=sm]) ::slotted(*){border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host(:not([disabled])[active][expand=sm]) ::slotted(*){border-color:var(--sgds-primary-border-color-default)}:host([expand=sm]) ::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus)}}@media screen and (min-width:768px){:host([expand=md]) ::slotted(*){border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host(:not([disabled])[active][expand=md]) ::slotted(*){border-color:var(--sgds-primary-border-color-default)}:host([expand=md]) ::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus)}}@media screen and (min-width:992px){:host([expand=lg]) ::slotted(*){border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host(:not([disabled])[active][expand=lg]) ::slotted(*){border-color:var(--sgds-primary-border-color-default)}:host([expand=lg]) ::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus)}}@media screen and (min-width:1200px){:host([expand=xl]) ::slotted(*){border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host(:not([disabled])[active][expand=xl]) ::slotted(*){border-color:var(--sgds-primary-border-color-default)}:host([expand=xl]) ::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus)}}@media screen and (min-width:1400px){:host([expand=xxl]) ::slotted(*){border-bottom:var(--sgds-border-width-4) solid transparent;min-height:100%;padding:0 var(--sgds-padding-md)}:host(:not([disabled])[active][expand=xxl]) ::slotted(*){border-color:var(--sgds-primary-border-color-default)}:host([expand=xxl]) ::slotted(a:focus-visible){box-shadow:var(--sgds-box-shadow-focus)}}@media screen and (max-width:576px){:host(:not([disabled])[active][expand=sm]) ::slotted(*){background-color:var(--sgds-bg-translucent-subtle)}}@media screen and (max-width:768px){:host(:not([disabled])[active][expand=md]) ::slotted(*){background-color:var(--sgds-bg-translucent-subtle)}}@media screen and (max-width:992px){:host(:not([disabled])[active][expand=lg]) ::slotted(*){background-color:var(--sgds-bg-translucent-subtle)}}@media screen and (max-width:1200px){:host(:not([disabled])[active][expand=xl]) ::slotted(*){background-color:var(--sgds-bg-translucent-subtle)}}@media screen and (max-width:1400px){:host(:not([disabled])[active][expand=xxl]) ::slotted(*){background-color:var(--sgds-bg-translucent-subtle)}}::slotted(*){--sgds-link-color-default:var(--sgds-color-default);align-items:center;box-sizing:border-box;color:var(--sgds-link-color-default,var(--sgds-color-default));cursor:pointer;display:flex;height:auto!important;padding:var(--sgds-padding-sm) var(--sgds-mainnav-padding-x);text-decoration:none!important;text-decoration:none}@media screen and (max-width:768px){::slotted(*){padding:var(--sgds-padding-sm) var(--sgds-mainnav-mobile-padding-x)}}:host(:not([disabled])[active]) ::slotted(*){--sgds-link-color-default:var(--sgds-primary-color-default);color:var(--sgds-link-color-default,var(--sgds-primary-color-default))}:host([disabled]) ::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-color-default);color:var(--sgds-link-color-emphasis,var(--sgds-color-default))}:host(:not([disabled])) ::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-primary-color-default);color:var(--sgds-link-color-emphasis,var(--sgds-primary-color-default))}::slotted(a:focus),::slotted(a:focus-visible){outline:0}::slotted(a:focus-visible){--sgds-link-color-emphasis:var(--sgds-primary-color-default);box-shadow:var(--sgds-box-shadow-focus) inset;color:var(--sgds-link-color-emphasis,var(--sgds-primary-color-default))}:host([disabled]) ::slotted(*){cursor:not-allowed;opacity:var(--sgds-opacity-50)}`;

  /**
   * @slot default - slot for SgdsMainnavItem element.
   *
   *  */
  class SgdsMainnavItem extends SgdsElement {
      constructor() {
          super(...arguments);
          /** when true, sets the active stylings of .nav-link */
          this.active = false;
          /** Disables the SgdsMainnavItem */
          this.disabled = false;
      }
      _handleDisabled() {
          this.setAttribute("aria-disabled", `${this.disabled}`);
      }
      _handleSlotChange(e) {
          const slot = e.target;
          const assignedElements = slot.assignedElements({ flatten: true });
          const anchorItems = assignedElements.filter(item => item.tagName.toLowerCase() === "a" || item.tagName.toLowerCase() === "sgds-link");
          if (anchorItems.length > 1) {
              console.error("More than one anchor tag is added to sgds-mainnav-item");
              return;
          }
          if (anchorItems.length === 0) {
              const nodes = slot.assignedNodes({ flatten: true });
              nodes.forEach(node => {
                  if (node.nodeType === Node.TEXT_NODE) {
                      const hyperlink = document.createElement("a");
                      hyperlink.textContent = node.textContent;
                      node.parentNode.replaceChild(hyperlink, node);
                  }
              });
          }
          if (anchorItems.length === 1) {
              const anchor = anchorItems[0];
              if (this.active) {
                  anchor.setAttribute("aria-current", "true");
              }
              if (this.disabled) {
                  anchor.setAttribute("href", "javascript:void(0)");
                  anchor.setAttribute("tabindex", "-1");
              }
          }
      }
      render() {
          return html$1 `<slot @slotchange=${this._handleSlotChange}></slot>`;
      }
  }
  SgdsMainnavItem.styles = [...SgdsElement.styles, css_248z$n];
  __decorate([
      property({ type: Boolean })
  ], SgdsMainnavItem.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsMainnavItem.prototype, "disabled", void 0);
  __decorate([
      watch("disabled")
  ], SgdsMainnavItem.prototype, "_handleDisabled", null);

  register("sgds-mainnav", SgdsMainnav);
  register("sgds-mainnav-dropdown", SgdsMainnavDropdown);
  register("sgds-mainnav-item", SgdsMainnavItem);

  var css_248z$m = css`b{font-weight:bolder}[role=button]{cursor:pointer}a{color:#0049dc}a:hover{color:#0022b9}.sgds-masthead{font-family:Inter,system-ui,sans-serif;font-size:.875rem;line-height:1.25rem}.banner{background-color:light-dark(#f3f3f3,#1a1a1a)}.container{margin-left:auto;margin-right:auto;max-width:var(--sgds-mainnav-max-width);padding:.25rem var(--sgds-mainnav-padding-x);width:100%}.sg-crest{flex-shrink:0;height:20px;width:20px}.sg-crest path{fill:#db0000}.masthead-layout{display:flex;gap:.25rem}.masthead-text-layout{align-items:center;display:flex;flex-wrap:wrap;gap:0 .75rem}.sgds-masthead-identify-icon{align-self:center;display:block;height:20px;transform:rotate(180deg);transition:transform .3s ease-in-out 0s;user-select:none;width:20px}.sgds-masthead-identify-icon.show{transform:rotate(0deg)}.sgds-masthead-button{align-items:center;color:light-dark(#0269d0,#60aaf4);cursor:pointer;display:flex;gap:4px}.sgds-masthead-button:hover{color:light-dark(#0151a0,#96c7f7)}.panel{background-color:light-dark(oklch(from #0e0e0e l c h/.1),oklch(from #fff l c h/.1))}.sgds-masthead .sgds-masthead-content{display:none;padding-bottom:1rem;padding-top:1rem}.sgds-masthead .sgds-masthead-content.show{display:block}.content-grid{display:grid;gap:1.5rem;grid-template-columns:repeat(auto-fit,minmax(300px,1fr))}.icon{margin-top:-.1em}.wrapper{display:flex;gap:.5rem}.content{display:flex;flex-direction:column;gap:.25rem}.content .title{font-weight:600}.content article{color:light-dark(#525252,#a5a5a5)}.banner-icon,.banner-icon-inline{height:20px;width:20px}.banner-icon path,.banner-icon-inline path{fill:light-dark(#1a1a1a,#f3f3f3)}a.trusted-websites-link{color:light-dark(#0269d0,#60aaf4);text-decoration:underline;width:fit-content}a.trusted-websites-link:hover{color:light-dark(#0151a0,#96c7f7)}.sgds-masthead-button:focus,.sgds-masthead-button:focus-visible,a.trusted-websites-link:focus,a.trusted-websites-link:focus-visible{box-shadow:0 0 0 4px #60aaf4;outline:0}@media screen and (max-width:768px){.container{padding:.25rem var(--sgds-mainnav-mobile-padding-x)}.sgds-masthead-content .content-grid{gap:1rem;grid-template-columns:1fr}}`;

  var css_248z$l = css`svg{vertical-align:middle}`;

  /**
   * @summary All .gov.sg digital services shall adopt The Official Government Banner for every page in the digital service and be placed at the top of the page.
   */
  class SgdsMasthead extends SgdsElement {
      constructor() {
          super(...arguments);
          /** @internal */
          this.toggleVisibility = false;
      }
      /** @internal */
      _handleKeydown(event) {
          if (event.key === "Enter" || event.key === " ") {
              event.preventDefault();
              this._toggleVisibility();
          }
      }
      /** @internal */
      _toggleVisibility() {
          this.toggleVisibility = !this.toggleVisibility;
      }
      render() {
          return html$1 `
      <div id="sgds-masthead" class="sgds-masthead" aria-label="A Singapore Government Agency Website" role="banner">
        <div class="banner">
          <div class="container">
            <div class="masthead-layout">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="20"
                height="20"
                class="sg-crest"
                viewBox="0 0 20 20"
                fill="none"
              >
                <path
                  d="M4.31179 7.0109C4.31179 7.0109 3.78527 7.78129 4.4749 8.77746C4.4749 8.77746 4.58365 8.27018 5.67275 8.27018H6.97989C8.21435 8.27018 9.13979 7.04881 8.55889 5.78895C8.55889 5.78895 9.42995 5.88317 9.72123 5.31901C10.0114 4.75544 9.70292 4.52966 9.26739 4.52966H7.07088C7.07088 4.9341 6.32687 4.9904 6.32687 4.52966H5.09241C5.09241 4.52966 4.16643 4.52966 4.14867 5.33797C4.14867 5.33797 4.35784 5.20641 4.56589 5.18803V5.40346C4.56589 5.40346 4.31179 5.45057 4.19361 5.51664C4.07599 5.58213 3.90344 5.7608 4.06711 6.22154C4.23023 6.68171 4.29403 6.84142 4.29403 6.84142C4.29403 6.84142 4.55757 6.60588 4.98422 6.60588H5.48356C6.37237 6.60588 6.20925 7.49864 5.31989 7.49864C4.43052 7.49864 4.3129 7.01032 4.3129 7.01032L4.31179 7.0109Z"
                  fill="currentColor"
                />
                <path
                  d="M8.94948 6.0808C8.94948 6.0808 9.24908 6.09976 9.46657 5.90271C9.46657 5.90271 11.4362 7.49118 8.51395 10.6859C5.59118 13.8813 7.85094 15.9494 7.85094 15.9494C7.85094 15.9494 7.32498 16.4751 7.62402 17.5C7.62402 17.5 6.40843 16.7894 5.47856 15.5823C4.13479 13.8382 3.31367 11.1697 7.00374 9.04116C7.00374 9.04116 9.43938 7.77268 8.94948 6.0808Z"
                  fill="currentColor"
                />
                <path
                  d="M5.93914 4.22922C5.93914 4.22922 6.33251 3.50249 7.24573 3.50249C7.96588 3.50249 8.13011 3.11988 8.13011 3.11988C8.13011 3.11988 8.44413 2.5 10.0298 2.5C11.4829 2.5 12.4621 3.00153 13.2544 3.67139C13.2544 3.67139 11.1183 2.2995 9.01282 4.22922H5.93914Z"
                  fill="currentColor"
                />
                <path
                  d="M14.8217 8.828C14.7612 6.5599 13.0668 4.12922 9.42448 4.2671C12.9825 1.14703 19.1543 8.11333 14.0711 11.7734C14.0711 11.7734 14.9216 10.517 14.8217 8.828Z"
                  fill="currentColor"
                />
                <path
                  d="M9.96927 4.51761C14.4106 4.37973 15.9962 9.89315 13.1278 12.3744L10.2478 13.8158C10.2478 13.8158 9.87273 12.5628 11.2648 11.0961C12.6568 9.6306 13.9994 6.88625 10.1518 5.08177C10.1518 5.08177 10.2245 4.70605 9.97038 4.51819L9.96927 4.51761Z"
                  fill="currentColor"
                />
                <path
                  d="M9.73904 5.75795C9.73904 5.75795 9.95708 5.54481 10.0298 5.36959C13.3331 6.79778 12.8133 9.21697 10.8403 11.2467C9.63029 12.537 10.0053 13.9284 10.0053 13.9284C10.0053 13.9284 8.52954 14.8803 8.02078 15.7076C8.02078 15.7076 5.88363 13.8233 8.84357 10.6957C11.748 7.62563 9.73904 5.75795 9.73904 5.75795Z"
                  fill="currentColor"
                />
              </svg>
              <div class="masthead-text-layout">
                <span>A Singapore Government Agency Website</span>
                <div
                  class="sgds-masthead-button"
                  id="sgds-masthead-identify"
                  role="button"
                  tabindex="0"
                  aria-expanded="${this.toggleVisibility}"
                  aria-controls="sgds-masthead-content"
                  @keydown=${this._handleKeydown}
                  @click=${this._toggleVisibility}
                >
                  <span>How to identify</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    class="sgds-masthead-identify-icon ${!this.toggleVisibility ? null : "show"}"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M9.64645 7.14645C9.84171 6.95118 10.1583 6.95118 10.3536 7.14645L15.3536 12.1464C15.5488 12.3417 15.5488 12.6583 15.3536 12.8536C15.1583 13.0488 14.8417 13.0488 14.6464 12.8536L10 8.20711L5.35355 12.8536C5.15829 13.0488 4.84171 13.0488 4.64645 12.8536C4.45118 12.6583 4.45118 12.3417 4.64645 12.1464L9.64645 7.14645Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="panel">
          <div
            id="sgds-masthead-content"
            class="container sgds-masthead-content ${this.toggleVisibility ? "show" : null}"
          >
            <div class="content-grid">
              <div class="wrapper">
                <div class="icon">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="none"
                    class="banner-icon"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M2.5 7.31409C2.5 7.01647 2.65873 6.74143 2.91644 6.59254L9.5831 2.74069C9.84105 2.59165 10.1589 2.59165 10.4169 2.74069L17.0836 6.59254C17.3413 6.74143 17.5 7.01647 17.5 7.31409V8.33314C17.5 8.79338 17.1269 9.16648 16.6667 9.16648H15.8333V14.9998H16.6667C17.1269 14.9998 17.5 15.3729 17.5 15.8331V16.6665C17.5 17.1267 17.1269 17.4998 16.6667 17.4998H3.33333C2.8731 17.4998 2.5 17.1267 2.5 16.6665V15.8331C2.5 15.3729 2.8731 14.9998 3.33333 14.9998H4.16667V9.16648H3.33333C2.8731 9.16648 2.5 8.79338 2.5 8.33314V7.31409ZM6.66667 9.16648V14.9998H8.75V9.16648H6.66667ZM11.25 9.16648V14.9998H13.3333V9.16648H11.25ZM11.25 6.24981C11.25 6.94017 10.6904 7.49981 10 7.49981C9.30964 7.49981 8.75 6.94017 8.75 6.24981C8.75 5.55945 9.30964 4.99981 10 4.99981C10.6904 4.99981 11.25 5.55945 11.25 6.24981Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div class="content">
                  <div class="title">Official website links end with .gov.sg</div>
                  <article>Government agencies communicate via .gov.sg websites (e.g. go.gov.sg/open).</article>
                  <a
                    href="https://www.gov.sg/trusted-sites#govsites"
                    class="trusted-websites-link"
                    rel="noreferrer"
                    target="_blank"
                    >Trusted websites</a
                  >
                </div>
              </div>
              <div class="wrapper">
                <div class="icon">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 20 20"
                    fill="none"
                    class="banner-icon"
                  >
                    <path
                      fill-rule="evenodd"
                      clip-rule="evenodd"
                      d="M5.83334 8.33317H5.41668C4.26608 8.33317 3.33334 9.26591 3.33334 10.4165V16.2498C3.33334 17.4004 4.26608 18.3332 5.41668 18.3332H14.5833C15.7339 18.3332 16.6667 17.4004 16.6667 16.2498V10.4165C16.6667 9.26591 15.7339 8.33317 14.5833 8.33317H14.1667V5.83317C14.1667 3.53198 12.3012 1.6665 10 1.6665C7.69882 1.6665 5.83334 3.53198 5.83334 5.83317V8.33317ZM7.50001 8.33317H12.5V5.83317C12.5 4.45246 11.3807 3.33317 10 3.33317C8.6193 3.33317 7.50001 4.45246 7.50001 5.83317V8.33317Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
                <div class="content">
                  <div class="title">Secure websites use HTTPS</div>
                  <article>
                    Look for a lock (<svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="20"
                      height="20"
                      viewBox="0 0 20 20"
                      fill="none"
                      class="banner-icon-inline"
                    >
                      <path
                        fill-rule="evenodd"
                        clip-rule="evenodd"
                        d="M5.83331 8.33317H5.41665C4.26605 8.33317 3.33331 9.26591 3.33331 10.4165V16.2498C3.33331 17.4004 4.26605 18.3332 5.41665 18.3332H14.5833C15.7339 18.3332 16.6666 17.4004 16.6666 16.2498V10.4165C16.6666 9.26591 15.7339 8.33317 14.5833 8.33317H14.1666V5.83317C14.1666 3.53198 12.3012 1.6665 9.99998 1.6665C7.69879 1.6665 5.83331 3.53198 5.83331 5.83317V8.33317ZM7.49998 8.33317H12.5V5.83317C12.5 4.45246 11.3807 3.33317 9.99998 3.33317C8.61927 3.33317 7.49998 4.45246 7.49998 5.83317V8.33317Z"
                        fill="currentColor"
                      /></svg
                    >) or https:// as an added precaution. Share sensitive information only on official, secure
                    websites.
                  </article>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
      }
  }
  SgdsMasthead.styles = [...SgdsElement.styles, css_248z$l, css_248z$12, css_248z$m];
  __decorate([
      state()
  ], SgdsMasthead.prototype, "toggleVisibility", void 0);

  register("sgds-masthead", SgdsMasthead);

  /** Determines if the specified element is tabbable using heuristics inspired by https://github.com/focus-trap/tabbable */
  function isTabbable(el) {
      const tag = el.tagName.toLowerCase();
      // Elements with a -1 tab index are not tabbable
      if (el.getAttribute("tabindex") === "-1") {
          return false;
      }
      // Elements with a disabled attribute are not tabbable
      if (el.hasAttribute("disabled")) {
          return false;
      }
      // Elements with aria-disabled are not tabbable
      if (el.hasAttribute("aria-disabled") && el.getAttribute("aria-disabled") !== "false") {
          return false;
      }
      // Radios without a checked attribute are not tabbable
      if (tag === "input" && el.getAttribute("type") === "radio" && !el.hasAttribute("checked")) {
          return false;
      }
      // Elements that are hidden have no offsetParent and are not tabbable
      if (el.offsetParent === null) {
          return false;
      }
      // Elements without visibility are not tabbable
      if (window.getComputedStyle(el).visibility === "hidden") {
          return false;
      }
      // Audio and video elements with the controls attribute are tabbable
      if ((tag === "audio" || tag === "video") && el.hasAttribute("controls")) {
          return true;
      }
      // Elements with a tabindex other than -1 are tabbable
      if (el.hasAttribute("tabindex")) {
          return true;
      }
      // Elements with a contenteditable attribute are tabbable
      if (el.hasAttribute("contenteditable") && el.getAttribute("contenteditable") !== "false") {
          return true;
      }
      // At this point, the following elements are considered tabbable
      return ["button", "input", "select", "textarea", "a", "audio", "video", "summary"].includes(tag);
  }
  /**
   * Returns the first and last bounding elements that are tabbable. This is more performant than checking every single
   * element because it short-circuits after finding the first and last ones.
   */
  function getTabbableBoundary(root) {
      var _a, _b;
      const allElements = [];
      function walk(el) {
          if (el instanceof HTMLElement) {
              allElements.push(el);
              if (el.shadowRoot !== null && el.shadowRoot.mode === "open") {
                  walk(el.shadowRoot);
              }
          }
          [...el.children].forEach((e) => walk(e));
      }
      // Collect all elements including the root
      walk(root);
      // Find the first and last tabbable elements
      const start = (_a = allElements.find(el => isTabbable(el))) !== null && _a !== void 0 ? _a : null;
      const end = (_b = allElements.reverse().find(el => isTabbable(el))) !== null && _b !== void 0 ? _b : null;
      return { start, end };
  }

  let activeModals = [];
  class Modal {
      constructor(element) {
          this.tabDirection = "forward";
          this.element = element;
          this.handleFocusIn = this.handleFocusIn.bind(this);
          this.handleKeyDown = this.handleKeyDown.bind(this);
          this.handleKeyUp = this.handleKeyUp.bind(this);
      }
      activate() {
          activeModals.push(this.element);
          document.addEventListener("focusin", this.handleFocusIn);
          document.addEventListener("keydown", this.handleKeyDown);
          document.addEventListener("keyup", this.handleKeyUp);
      }
      deactivate() {
          activeModals = activeModals.filter(modal => modal !== this.element);
          document.removeEventListener("focusin", this.handleFocusIn);
          document.removeEventListener("keydown", this.handleKeyDown);
          document.removeEventListener("keyup", this.handleKeyUp);
      }
      isActive() {
          // The "active" modal is always the most recent one shown
          return activeModals[activeModals.length - 1] === this.element;
      }
      checkFocus() {
          if (this.isActive()) {
              if (!this.element.matches(":focus-within")) {
                  const { start, end } = getTabbableBoundary(this.element);
                  const target = this.tabDirection === "forward" ? start : end;
                  if (typeof (target === null || target === void 0 ? void 0 : target.focus) === "function") {
                      target.focus({ preventScroll: true });
                  }
              }
          }
      }
      handleFocusIn() {
          this.checkFocus();
      }
      handleKeyDown(event) {
          if (event.key === "Tab" && event.shiftKey) {
              this.tabDirection = "backward";
              // Ensure focus remains trapped after the key is pressed
              requestAnimationFrame(() => this.checkFocus());
          }
      }
      handleKeyUp() {
          this.tabDirection = "forward";
      }
  }

  var css_248z$k = css`:host([size=sm]) .modal-panel{max-width:480px}:host([size=lg]) .modal-panel{max-width:800px}:host([size=fullscreen]) .modal-panel{max-width:1128px}:host(:not([size=fullscreen])) .modal-panel{background-color:var(--sgds-surface-default)}:host([size=fullscreen]) .modal-overlay{background-color:var(--sgds-surface-default)}.modal{align-items:start;bottom:0;display:flex;font-family:var(--sgds-body-font-family);justify-content:center;left:0;position:fixed;right:0;top:0;z-index:105500}.modal-panel{border-radius:var(--sgds-border-radius-md);display:flex;flex-direction:column;margin:var(--sgds-spacer-9) var(--sgds-spacer-6);max-height:calc(100% - var(--sgds-spacer-9) - var(--sgds-spacer-9));max-width:640px;position:relative;width:100%}.modal-panel:focus{outline:none}@media screen and (max-width:420px){.modal-panel{margin:var(--sgds-spacer-8) var(--sgds-spacer-6);max-height:calc(100% - var(--sgds-spacer-8) - var(--sgds-spacer-8))}}.modal.show .modal-panel{opacity:1;transform:none}.modal-header{display:flex;flex:0 0 auto;flex-direction:row;justify-content:space-between;padding:var(--sgds-padding-xl)}.modal-header__title-description{display:flex;flex-direction:column;gap:var(--sgds-gap-xs)}slot[name=title]::slotted(*){--sgds-margin-2-xs:var(--sgds-margin-none);--sgds-margin-xs:var(--sgds-margin-none);--sgds-font-size-6:var(--sgds-font-size-4);align-items:center;display:flex;flex:1 1 auto;font-size:var(--sgds-font-size-6,--sgds-font-size-4);gap:1rem;line-height:var(--sgds-line-height-heading);margin:var(--sgds-margin-none,var(--sgds-margin-xs,--sgds-margin-2-xs))}slot[name=description]::slotted(*){--sgds-paragraph-spacing-xl:var(--sgds-margin-none);color:var(--sgds-color-subtle);line-height:var(--sgds-line-height-body);margin:var(--sgds-margin-none,--sgds-paragraph-spacing-xl)}.modal-body{-webkit-overflow-scrolling:touch;overflow:auto;padding:0 var(--sgds-padding-xl) var(--sgds-padding-xl)}.modal-body slot::slotted(*){--sgds-paragraph-spacing-xl:var(--sgds-margin-none);margin:var(--sgds-paragraph-spacing-xl,--sgds-margin-none)}.modal-footer{display:flex;flex:0 0 auto;flex-wrap:wrap;gap:var(--sgds-gap-md);justify-content:flex-end;padding:var(--sgds-padding-xl)}.modal:not(.has-footer) .modal-footer{display:none}.modal-overlay{background-color:var(--sgds-bg-overlay);bottom:0;left:0;position:fixed;right:0;top:0}[hidden]{display:none}`;

  /**
   * @summary The modal component inform users about a specific task and may contain critical information which users then have to make a decision.
   *
   * @slot default - The content of the Modal's body.
   * @slot title - The title of the Modal.
   * @slot description - The description of the Modal.
   * @slot footer - The content of the Modal's footer, typically used to pass in buttons for call to action.
   *
   * @event sgds-close - Emitted when the modal is called to close via mouseclick of close button, overlay or via keyboard esc key
   * @event sgds-show - Emitted when the modal opens
   * @event sgds-hide - Emitted when the modal closes
   * @event sgds-after-show - Emitted after modal opens and the animations has completed
   * @event sgds-after-hide - Emitted after modal closes and the animations has completed
   *
   */
  class SgdsModal extends SgdsElement {
      constructor() {
          super(...arguments);
          /**@internal */
          this.hasSlotController = new HasSlotController(this, "footer");
          /**Indicates whether or not the modal is open. You can use this in lieu of the show/hide methods. */
          this.open = false;
          /** Removes the default animation when opening and closing of modal */
          this.noAnimation = false;
          /** Specifies a small, medium, large or fullscreen modal, the size is medium by default. */
          this.size = "md";
      }
      connectedCallback() {
          super.connectedCallback();
          this.handleDocumentKeyDown = this.handleDocumentKeyDown.bind(this);
          this.modal = new Modal(this);
          this._resizeHandler = this._debounce(this._onWindowResize.bind(this), 200);
      }
      firstUpdated() {
          this._onWindowResize();
          this.dialog.hidden = !this.open;
          if (this.open) {
              this.addOpenListeners();
              this.modal.activate();
              lockBodyScrolling(this);
          }
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          this._removeResizeListener();
          unlockBodyScrolling(this);
      }
      _debounce(func, wait) {
          let timeout;
          return (...args) => {
              clearTimeout(timeout);
              timeout = window.setTimeout(() => func(...args), wait);
          };
      }
      /** Handle the window resize event. */
      _onWindowResize() {
          const panel = this.panel.getBoundingClientRect();
          const panelWidth = panel.width;
          const buttonElements = this.querySelectorAll("sgds-button[slot='footer']");
          if (!this.panel)
              return;
          if (buttonElements.length <= 1)
              return;
          if (panelWidth <= 360) {
              buttonElements.forEach(buttonElement => {
                  const button = buttonElement;
                  button.fullWidth = true;
              });
          }
          else {
              buttonElements.forEach(buttonElement => {
                  const button = buttonElement;
                  button.fullWidth = false;
              });
          }
      }
      /**  Add the resize event listener. */
      _addResizeListener() {
          window.addEventListener("resize", this._resizeHandler);
      }
      /** Remove the resize event listener. */
      _removeResizeListener() {
          window.removeEventListener("resize", this._resizeHandler);
      }
      /** Shows the dialog. */
      async show() {
          if (this.open) {
              return undefined;
          }
          this.open = true;
          return waitForEvent(this, "sgds-after-show");
      }
      /** Hides the dialog */
      async hide() {
          if (!this.open) {
              return undefined;
          }
          this.open = false;
          return waitForEvent(this, "sgds-after-hide");
      }
      requestClose(source) {
          const sgdsRequestClose = this.emit("sgds-close", {
              cancelable: true,
              detail: { source }
          });
          if (sgdsRequestClose.defaultPrevented) {
              const animation = getAnimation(this, "modal.denyClose");
              animateTo(this.panel, animation.keyframes);
              return;
          }
          this.hide();
      }
      addOpenListeners() {
          document.addEventListener("keydown", this.handleDocumentKeyDown);
      }
      removeOpenListeners() {
          document.removeEventListener("keydown", this.handleDocumentKeyDown);
      }
      handleDocumentKeyDown(event) {
          if (this.open && event.key === "Escape") {
              event.stopPropagation();
              this.requestClose("keyboard");
          }
      }
      _overlayClickHandler() {
          if (this.size === "fullscreen") {
              return;
          }
          this.requestClose("overlay");
      }
      async handleOpenChange() {
          if (this.open) {
              // Show
              this.emit("sgds-show");
              this.addOpenListeners();
              this.originalTrigger = document.activeElement;
              this.modal.activate();
              lockBodyScrolling(this);
              await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);
              this.dialog.hidden = false;
              const panelAnimation = getAnimation(this, "modal.show");
              const overlayAnimation = getAnimation(this, "modal.overlay.show");
              !this.noAnimation &&
                  (await Promise.all([
                      animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
                      animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
                  ]));
              this.emit("sgds-after-show");
              // Add focus on modal heading after opening it
              this.heading.focus();
              // Add resize listener only when the modal is shown
              this._addResizeListener();
          }
          else {
              // Hide
              this.emit("sgds-hide");
              this.removeOpenListeners();
              this.modal.deactivate();
              await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);
              const panelAnimation = getAnimation(this, "modal.hide");
              const overlayAnimation = getAnimation(this, "modal.overlay.hide");
              // Animate the overlay and the panel at the same time. Because animation durations might be different, we need to
              // hide each one individually when the animation finishes, otherwise the first one that finishes will reappear
              // unexpectedly. We'll unhide them after all animations have completed.
              !this.noAnimation &&
                  (await Promise.all([
                      animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options).then(() => {
                          this.overlay.hidden = true;
                      }),
                      animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options).then(() => {
                          this.panel.hidden = true;
                      })
                  ]));
              this.dialog.hidden = true;
              // Now that the dialog is hidden, restore the overlay and panel for next time
              this.overlay.hidden = false;
              this.panel.hidden = false;
              unlockBodyScrolling(this);
              // Restore focus to the original trigger
              const trigger = this.originalTrigger;
              if (typeof (trigger === null || trigger === void 0 ? void 0 : trigger.focus) === "function") {
                  setTimeout(() => trigger.focus());
              }
              this.emit("sgds-after-hide");
              // Remove resize listener when the modal is hidden
              this._removeResizeListener();
          }
      }
      render() {
          return html$1 `
      <div
        class=${classMap({
            modal: true,
            show: this.open,
            "has-footer": this.hasSlotController.test("footer")
        })}
      >
        <div class="modal-overlay" @click=${this._overlayClickHandler}></div>

        <div
          class="modal-panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-labelledby="title"
          tabindex="-1"
        >
          <div class="modal-header">
            <div class="modal-header__title-description">
              <slot class="modal-title" id="title" name="title"></slot>
              <slot name="description"></slot>
            </div>
            <sgds-close-button
              class="modal-header__close"
              @click="${() => this.requestClose("close-button")}"
              ariaLabel="close modal"
            ></sgds-close-button>
          </div>
          <div class="modal-body">
            <slot></slot>
          </div>
          <div class="modal-footer">
            <slot name="footer"></slot>
          </div>
        </div>
      </div>
    `;
      }
  }
  SgdsModal.styles = [...SgdsElement.styles, css_248z$P, css_248z$l, css_248z$k];
  /**@internal */
  SgdsModal.dependencies = {
      "sgds-close-button": SgdsCloseButton
  };
  __decorate([
      query(".modal")
  ], SgdsModal.prototype, "dialog", void 0);
  __decorate([
      query(".modal-panel")
  ], SgdsModal.prototype, "panel", void 0);
  __decorate([
      query(".modal-overlay")
  ], SgdsModal.prototype, "overlay", void 0);
  __decorate([
      query(".modal-title")
  ], SgdsModal.prototype, "heading", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsModal.prototype, "open", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsModal.prototype, "noAnimation", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsModal.prototype, "size", void 0);
  __decorate([
      watch("open", { waitUntilFirstUpdate: true })
  ], SgdsModal.prototype, "handleOpenChange", null);
  setDefaultAnimation("modal.show", {
      keyframes: [
          { opacity: 0, transform: "scale(1) translate(0, -100%)" },
          { opacity: 1, transform: "scale(1) translate(0, 0%)" }
      ],
      options: { duration: 400, easing: "ease" }
  });
  setDefaultAnimation("modal.hide", {
      keyframes: [
          { opacity: 1, transform: "scale(1) translate(0, 0)" },
          { opacity: 0, transform: "scale(1) translate(0, -100%)" }
      ],
      options: { duration: 400, easing: "ease" }
  });
  setDefaultAnimation("modal.denyClose", {
      keyframes: [{ transform: "scale(1)" }, { transform: "scale(1.02)" }, { transform: "scale(1)" }],
      options: { duration: 400 }
  });
  setDefaultAnimation("modal.overlay.show", {
      keyframes: [{ opacity: 0 }, { opacity: 1 }],
      options: { duration: 400 }
  });
  setDefaultAnimation("modal.overlay.hide", {
      keyframes: [{ opacity: 1 }, { opacity: 0 }],
      options: { duration: 400 }
  });

  register("sgds-modal", SgdsModal);

  var css_248z$j = css`ul{margin-bottom:1rem;margin-top:0;padding-left:2rem}svg{vertical-align:middle}.pagination{display:inline-flex;gap:var(--sgds-gap-2-xs);list-style:none;padding-left:0}.page-link{align-items:center;background-color:var(--sgds-bg-transparent);border:1px solid var(--sgds-border-color-default);border-radius:var(--sgds-border-radius-md);display:flex;height:var(--sgds-dimension-48);justify-content:center;width:var(--sgds-dimension-48)}@media (prefers-reduced-motion:reduce){.page-link{transition:none}}.page-link:focus,.page-link:not(.ellipsis):hover{background-color:var(--sgds-primary-bg-translucent);color:var(--sgds-primary-color-default);z-index:2}.page-link:focus{box-shadow:var(--sgds-box-shadow-focus);outline:0;z-index:3}.page-item>.page-link:not(.ellipsis){cursor:pointer}.page-item.active .page-link{background-color:var(--sgds-primary-bg-default);border-color:var(--sgds-info);color:var(--sgds-color-fixed-light);z-index:3}.ellipsis-disabled,.page-item.disabled .page-link{opacity:var(--sgds-opacity-50)}.ellipsis-disabled{cursor:not-allowed;pointer-events:none}.pagination-sm .page-link{font-size:var(--sgds-font-size-1);height:var(--sgds-dimension-40);width:var(--sgds-dimension-40)}.sr-only{clip:rect(0,0,0,0);border:0;height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;white-space:nowrap;width:1px}.pagination-description{align-items:center;display:flex}.pagination-sm .pagination-description{font-size:var(--sgds-font-size-1)}`;

  /**
   * @summary The Pagination component enables the user to select a specific page from a range of pages
   *
   * @event sgds-page-change - Event is emitted when `handleNextButton`, `handlePrevButton`, `handleNextEllipsisButton` and `handlePrevEllipsisButton` was called.
   *
   **/
  class SgdsPagination extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Inserts the length value from a given sets of data objects*/
          this.dataLength = 0;
          /** Sets the starting active page upon render*/
          this.currentPage = 1;
          /** Sets the amount of data objects to be displayed per page */
          this.itemsPerPage = 5;
          /** Sets the variant of the pagination. */
          this.variant = "default";
          /** Sets the page direction button to contain text and/or icon */
          this.navigation = "icon-button";
          /** Sets the size of all page items. */
          this.size = "md";
          /**
           * The number of pages to show besides first and last page. First and last page always appears
           */
          this._limit = 4;
          this.ellipsisContent = html$1 `
    <span aria-hidden="true">…</span>
    <span class="sr-only" role="text">Ellipsis</span>
  `;
          this._renderFirstEllipsis = () => {
              const pagesLengthWithinTotalLimit = this.pages.length <= 7;
              const isHidden = pagesLengthWithinTotalLimit || !(this.pages.length !== this._limit && this.currentPage > 4);
              if (isHidden) {
                  return null;
              }
              return html$1 `
      <li class="page-item ">
        <span class="page-link ellipsis">${this.ellipsisContent}</span>
      </li>
    `;
          };
          this._getNavButton = (direction, clickHandler, isDisabled) => {
              const icon = html$1 `<sgds-icon
      size=${this.size}
      name=${direction === "Prev" ? "arrow-left" : "arrow-right"}
      slot=${direction === "Prev" ? "leftIcon" : "rightIcon"}
    ></sgds-icon>`;
              return html$1 `
      <sgds-button
        ariaLabel=${direction === "Prev" ? "Previous" : "Next"}
        size=${this.size}
        @click=${isDisabled ? undefined : clickHandler}
        ?disabled=${isDisabled}
        variant="ghost"
        >${icon}${direction}</sgds-button
      >
    `;
          };
      }
      /**@internal */
      _handleValueChange() {
          this.emit("sgds-page-change", { detail: { currentPage: this.currentPage } });
          /**
           * Always showing 7 li at a time.
           * The case when both ellipsis is not needed
           */
          if (this.pages.length <= 7) {
              return (this._limit = 5);
          }
          /**
           * The case when currentPage is reaching the endPage
           */
          if (this.pages.length - this.currentPage <= 3) {
              return (this._limit = 4);
          }
          /**
           * The case when currentPage is after 4
           */
          if (this.currentPage > 4) {
              return (this._limit = 3);
          }
          else {
              return (this._limit = 4);
          }
      }
      _handlePageClick(event) {
          const liTarget = event.target;
          const clickedLi = liTarget.closest("li");
          if (clickedLi) {
              const clickedPage = Number(clickedLi.getAttribute("key"));
              if (clickedPage !== this.currentPage) {
                  this.currentPage = clickedPage;
              }
          }
      }
      _handleNextButton() {
          this.currentPage = this.currentPage + 1;
      }
      _handlePrevButton() {
          this.currentPage = this.currentPage - 1;
      }
      get pages() {
          const pages = [];
          for (let i = 1; i <= Math.ceil(this.dataLength / this.itemsPerPage); i++) {
              pages.push(i);
          }
          return pages;
      }
      _handleKeyDown(event, action, number, isPrevButton) {
          if (event.key === "Enter") {
              switch (action) {
                  case "pageNumber":
                      this.currentPage = number;
                      break;
                  case "directionButton":
                      if (isPrevButton) {
                          this._handlePrevButton();
                      }
                      else {
                          this._handleNextButton();
                      }
                      break;
              }
          }
      }
      _renderFirstPage() {
          return html$1 `
      <li key=${1} class="page-item ${this.currentPage === 1 ? "active" : ""}">
        <span
          role="button"
          class="page-link"
          aria-label=${this.currentPage === 1 ? `Current Page, Page 1` : "Go to Page 1"}
          aria-current="${this.currentPage === 1}"
          tabindex="0"
          @click=${this._handlePageClick}
          @keydown=${(e) => this._handleKeyDown(e, "pageNumber", 1)}
          >1</span
        >
      </li>
    `;
      }
      _getAllPageNumbers() {
          const pagesToShow = [];
          for (let i = 1; i <= this.pages.length; i++) {
              pagesToShow.push(i);
          }
          return pagesToShow;
      }
      _getPageNumbers() {
          const pagesToShow = [];
          let sanitizeStartPage = 2;
          let endPage;
          if (this._limit === 3) {
              sanitizeStartPage = this.currentPage - Math.floor(this._limit / 2);
          }
          if (this._limit === 4) {
              sanitizeStartPage = this.currentPage - Math.floor(this._limit / 2);
              if (this.currentPage + this._limit > this.pages.length) {
                  sanitizeStartPage = this.pages.length - this._limit;
              }
          }
          if (sanitizeStartPage <= 1) {
              sanitizeStartPage = 2;
          }
          endPage = sanitizeStartPage + this._limit - 1;
          if (endPage >= this.pages.length) {
              endPage = this.pages.length - 1;
          }
          for (let i = sanitizeStartPage; i <= endPage; i++) {
              pagesToShow.push(i);
          }
          return pagesToShow;
      }
      _renderPgNumbers(pagesToShow) {
          return pagesToShow.map(number => html$1 `
        <li key=${number} class="page-item ${this.currentPage === number ? "active" : ""}">
          <span
            role="button"
            class="page-link"
            tabindex="0"
            aria-label=${this.currentPage === number ? `Current Page, Page ${number}` : `Go to Page ${number}`}
            aria-current="${this.currentPage === number}"
            @click=${this._handlePageClick}
            @keydown=${(e) => this._handleKeyDown(e, "pageNumber", number)}
            >${number}</span
          >
        </li>
      `);
      }
      _renderLastEllipsis() {
          const shouldRenderEllipsis = this.pages.length !== this._limit;
          if (this.pages.length <= 7) {
              return null;
          }
          if (!shouldRenderEllipsis ||
              this._limit >= this.pages.length ||
              this.pages.length - this.currentPage < this._limit) {
              return null;
          }
          return html$1 `
      <li class="page-item">
        <span class="page-link ellipsis ">${this.ellipsisContent}</span>
      </li>
    `;
      }
      _renderLastPage() {
          return html$1 `
      <li key=${this.pages.length} class="page-item ${this.currentPage === this.pages.length ? "active" : ""}">
        <span
          role="button"
          class="page-link"
          aria-label=${this.currentPage === this.pages.length
            ? `Current Page, Page ${this.pages.length}`
            : `Go to Page ${this.pages.length}`}
          aria-current="${this.currentPage === this.pages.length}"
          tabindex="0"
          @click=${this._handlePageClick}
          @keydown=${(e) => this._handleKeyDown(e, "pageNumber", this.pages.length)}
          >${this.pages.length}</span
        >
      </li>
    `;
      }
      _renderDirectionButton(directionLabel, clickHandler) {
          const isDisabled = directionLabel === "Prev" ? this.currentPage === 1 : this.currentPage === this.pages.length;
          if (this.navigation === "button") {
              return html$1 `${this._getNavButton(directionLabel, clickHandler, isDisabled)}`;
          }
          if (this.navigation === "icon-button") {
              return html$1 `${this._getIconButton(directionLabel, clickHandler, isDisabled)}`;
          }
          return html$1 `${nothing}`;
      }
      _getIconButton(direction, clickHandler, isDisabled) {
          return html$1 `
      <sgds-icon-button
        ariaLabel=${direction === "Prev" ? "Previous" : "Next"}
        size=${this.size}
        @click=${isDisabled ? undefined : clickHandler}
        ?disabled=${isDisabled}
        variant="ghost"
        name=${direction === "Prev" ? "arrow-left" : "arrow-right"}
      ></sgds-icon-button>
    `;
      }
      _renderDescriptionPagination() {
          return html$1 `
      ${this._renderDirectionButton("Prev", this._handlePrevButton)}
      <div class="pagination-description">Page ${this.currentPage} of ${this.pages.length}</div>
      ${this._renderDirectionButton("Next", this._handleNextButton)}
    `;
      }
      _renderDefaultPagination() {
          return html$1 `
      ${this._renderDirectionButton("Prev", this._handlePrevButton)} ${this._renderFirstPage()}
      ${this._renderFirstEllipsis()} ${this._renderPgNumbers(this._getPageNumbers())} ${this._renderLastEllipsis()}
      ${this.pages.length <= 1 ? nothing : this._renderLastPage()}
      ${this._renderDirectionButton("Next", this._handleNextButton)}
    `;
      }
      _renderNumberPagination() {
          return html$1 ` ${this._renderPgNumbers(this._getAllPageNumbers())} `;
      }
      _renderButtonPagination() {
          return html$1 `
      ${this._renderDirectionButton("Prev", this._handlePrevButton)}
      ${this._renderDirectionButton("Next", this._handleNextButton)}
    `;
      }
      render() {
          return html$1 `
      <nav aria-label="pagination" role="navigation">
        <ul class="pagination pagination-${this.size}">
          ${this.variant === "description" ? this._renderDescriptionPagination() : nothing}
          ${this.variant === "default" ? this._renderDefaultPagination() : nothing}
          ${this.variant === "number" ? this._renderNumberPagination() : nothing}
          ${this.variant === "button" ? this._renderButtonPagination() : nothing}
        </ul>
      </nav>
    `;
      }
  }
  SgdsPagination.styles = [...SgdsElement.styles, css_248z$j];
  /**@internal */
  SgdsPagination.dependencies = {
      "sgds-icon-button": SgdsIconButton,
      "sgds-button": SgdsButton,
      "sgds-icon": SgdsIcon
  };
  __decorate([
      property({ type: Number })
  ], SgdsPagination.prototype, "dataLength", void 0);
  __decorate([
      property({ type: Number })
  ], SgdsPagination.prototype, "currentPage", void 0);
  __decorate([
      property({ type: Number })
  ], SgdsPagination.prototype, "itemsPerPage", void 0);
  __decorate([
      property({ type: String })
  ], SgdsPagination.prototype, "variant", void 0);
  __decorate([
      property({ type: String })
  ], SgdsPagination.prototype, "navigation", void 0);
  __decorate([
      property({ type: String })
  ], SgdsPagination.prototype, "size", void 0);
  __decorate([
      state()
  ], SgdsPagination.prototype, "_limit", void 0);
  __decorate([
      watch("currentPage", { waitUntilFirstUpdate: false })
  ], SgdsPagination.prototype, "_handleValueChange", null);

  register("sgds-pagination", SgdsPagination);

  /**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  const important = 'important';
  // The leading space is important
  const importantFlag = ' !' + important;
  // How many characters to remove from a value, as a negative number
  const flagTrim = 0 - importantFlag.length;
  class StyleMapDirective extends Directive {
      constructor(partInfo) {
          super(partInfo);
          if (partInfo.type !== PartType.ATTRIBUTE ||
              partInfo.name !== 'style' ||
              partInfo.strings?.length > 2) {
              throw new Error('The `styleMap` directive must be used in the `style` attribute ' +
                  'and must be the only part in the attribute.');
          }
      }
      render(styleInfo) {
          return Object.keys(styleInfo).reduce((style, prop) => {
              const value = styleInfo[prop];
              if (value == null) {
                  return style;
              }
              // Convert property names from camel-case to dash-case, i.e.:
              //  `backgroundColor` -> `background-color`
              // Vendor-prefixed names need an extra `-` appended to front:
              //  `webkitAppearance` -> `-webkit-appearance`
              // Exception is any property name containing a dash, including
              // custom properties; we assume these are already dash-cased i.e.:
              //  `--my-button-color` --> `--my-button-color`
              prop = prop.includes('-')
                  ? prop
                  : prop
                      .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')
                      .toLowerCase();
              return style + `${prop}:${value};`;
          }, '');
      }
      update(part, [styleInfo]) {
          const { style } = part.element;
          if (this._previousStyleProperties === undefined) {
              this._previousStyleProperties = new Set(Object.keys(styleInfo));
              return this.render(styleInfo);
          }
          // Remove old properties that no longer exist in styleInfo
          for (const name of this._previousStyleProperties) {
              // If the name isn't in styleInfo or it's null/undefined
              if (styleInfo[name] == null) {
                  this._previousStyleProperties.delete(name);
                  if (name.includes('-')) {
                      style.removeProperty(name);
                  }
                  else {
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      style[name] = null;
                  }
              }
          }
          // Add or update properties
          for (const name in styleInfo) {
              const value = styleInfo[name];
              if (value != null) {
                  this._previousStyleProperties.add(name);
                  const isImportant = typeof value === 'string' && value.endsWith(importantFlag);
                  if (name.includes('-') || isImportant) {
                      style.setProperty(name, isImportant
                          ? value.slice(0, flagTrim)
                          : value, isImportant ? important : '');
                  }
                  else {
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      style[name] = value;
                  }
              }
          }
          return noChange;
      }
  }
  /**
   * A directive that applies CSS properties to an element.
   *
   * `styleMap` can only be used in the `style` attribute and must be the only
   * expression in the attribute. It takes the property names in the
   * {@link StyleInfo styleInfo} object and adds the properties to the inline
   * style of the element.
   *
   * Property names with dashes (`-`) are assumed to be valid CSS
   * property names and set on the element's style object using `setProperty()`.
   * Names without dashes are assumed to be camelCased JavaScript property names
   * and set on the element's style object using property assignment, allowing the
   * style object to translate JavaScript-style names to CSS property names.
   *
   * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':
   * '0'})` sets the `background-color`, `border-top` and `--size` properties.
   *
   * @param styleInfo
   * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}
   */
  const styleMap = directive(StyleMapDirective);

  var css_248z$i = css`progress{vertical-align:baseline}.progress-container{display:flex;flex-direction:column;gap:var(--sgds-gap-2-xs);overflow:hidden}.progress{background-color:var(--sgds-bg-translucent)}.progress-bar{background-color:var(--sgds-primary-surface-default);display:flex;flex-direction:column;height:var(--sgds-dimension-4);justify-content:center;overflow:hidden;transition:width .6s ease}:host([variant=neutral]) .progress-bar{background-color:var(--sgds-neutral-surface-default)}.label{color:var(--sgds-color-subtle);font-size:var(--sgds-font-size-1);white-space:nowrap}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}`;

  /**
   * @summary Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.
   */
  class SgdsProgressBar extends SgdsElement {
      constructor() {
          super(...arguments);
          /** The background color of the progress bar. Available options: `primary`, `neutral` */
          this.variant = "primary";
          /**
           * Sets the aria label for assistive devices.
           */
          this.arialabel = "";
          /** Add label on top of progress bar */
          this.label = "";
      }
      render() {
          return html$1 `
      <div class="progress-container">
        <div class="progress">
          <div
            class="progress-bar"
            role="progressbar"
            style=${styleMap({ width: `${this.value}%` })}
            aria-label=${this.arialabel}
            aria-valuenow=${this.value}
            aria-valuemin=${this.ariamin}
            aria-valuemax=${this.ariamax}
          ></div>
        </div>
        ${this.label ? html$1 `<span class="label">${this.label}</span>` : nothing}
      </div>
    `;
      }
  }
  SgdsProgressBar.styles = [...SgdsElement.styles, css_248z$i];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsProgressBar.prototype, "variant", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsProgressBar.prototype, "value", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsProgressBar.prototype, "ariamin", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsProgressBar.prototype, "ariamax", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsProgressBar.prototype, "arialabel", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsProgressBar.prototype, "label", void 0);

  register("sgds-progress-bar", SgdsProgressBar);

  var css_248z$h = css`.form-control-container{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}.input-group{align-items:stretch;display:flex;flex-wrap:wrap;gap:var(--sgds-form-gap-lg);position:relative}.input-group>sgds-input{flex:1 1 auto;min-width:0;position:relative}.input-group sgds-button:focus,.input-group>sgds-input:focus{z-index:3}.visually-hidden{clip:rect(0,0,0,0)!important;border:0!important;height:1px!important;margin:-1px!important;overflow:hidden!important;padding:0!important;position:absolute!important;white-space:nowrap!important;width:1px!important}`;

  /**
   * @summary The quantity toggle component is used to increase or decrease an incremental venue,  best used when the user needs to enter or adjust the quantity of a selected item.
   *
   * @slot invalidIcon - The slot for invalid icon
   *
   * @event sgds-change - Emitted when an alteration to the control's value is committed by the user.
   * @event sgds-input - Emitted when the control receives input and its value changes.
   *
   */
  class SgdsQuantityToggle extends SgdsFormValidatorMixin(FormControlElement) {
      constructor() {
          super(...arguments);
          /** The input's value. Set to 0 by default */
          this.value = 0;
          // /** The quantity toggle's button variants */
          // @property({ type: String }) iconButtonVariant = "ghost";
          /**  Controls the incremental / decremental value of the input */
          this.step = 1;
          /** Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
          this.defaultValue = 0;
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      async _handleChange() {
          const sgdsInput = await this._sgdsInput;
          if (parseInt(sgdsInput.value) < this.step || sgdsInput.value === "") {
              sgdsInput.value = "0";
          }
          this.value = parseInt(sgdsInput.value);
          this._mixinSetFormValue();
          this._mixinValidate(sgdsInput.input);
          this.invalid = !this._mixinReportValidity();
      }
      async _handleInputChange() {
          const sgdsInput = await this._sgdsInput;
          this.invalid = false;
          if (parseInt(sgdsInput.value) < this.step || sgdsInput.value === "") {
              sgdsInput.value = "0";
          }
          this.value = parseInt(sgdsInput.value);
          this._mixinSetFormValue();
          this._mixinValidate(sgdsInput.input);
      }
      async _mixinResetFormControl() {
          const sgdsInput = await this._sgdsInput;
          this.value = this.defaultValue;
          sgdsInput.input.value = this.value.toString();
          this._mixinResetValidity(sgdsInput.input);
      }
      _handleKeyDown(event) {
          const allowedKeys = [
              "Backspace",
              "ArrowUp",
              "ArrowDown",
              "ArrowLeft",
              "ArrowRight",
              ...Array.from(Array(10).keys()).map(key => key.toString()),
              "Tab"
          ];
          // Allow keydown event only if the pressed key is in the allowedKeys array
          if (!allowedKeys.includes(event.key)) {
              event.preventDefault();
          }
      }
      _handleInvalid() {
          this.invalid = true;
      }
      _handleValid() {
          this.invalid = false;
      }
      /** Simulates a click on the plus button */
      plus() {
          this.plusBtn.click();
      }
      /** Simulates a click on the minus button */
      minus() {
          this.minusBtn.click();
      }
      async _onPlus(event) {
          const sgdsInput = await this._sgdsInput;
          event.preventDefault();
          event.stopPropagation();
          this.value = parseInt(sgdsInput.value) + parseInt(sgdsInput.step.toString());
          this._validateOnClick(sgdsInput.input);
      }
      async _onMinus(event) {
          const sgdsInput = await this._sgdsInput;
          event.preventDefault();
          event.stopPropagation();
          if (this.value < this.step) {
              this.value = 0;
          }
          else {
              this.value = parseInt(sgdsInput.value) - parseInt(sgdsInput.step.toString());
          }
          this._validateOnClick(sgdsInput.input);
      }
      /**
       * Validates the input on button clicks of the toggle.
       * Input is validated every time the button is click to update the invalid state
       * to indiciate the validity of quantity toggle
       * @param input native HTMLInputElement
       */
      async _validateOnClick(input) {
          const sgdsInput = await this._sgdsInput;
          await sgdsInput.updateComplete;
          this._mixinSetFormValue();
          this._mixinValidate(input);
          this.invalid = !this._mixinReportValidity();
      }
      _renderFeedback() {
          const wantFeedbackText = this.hasFeedback === "both" || this.hasFeedback === "text";
          return this.invalid && wantFeedbackText
              ? html ` <div class="invalid-feedback-container">
          <slot name="invalidIcon">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
              <path
                d="M17.5 10C17.5 14.1421 14.1421 17.5 10 17.5C5.85786 17.5 2.5 14.1421 2.5 10C2.5 5.85786 5.85786 2.5 10 2.5C14.1421 2.5 17.5 5.85786 17.5 10ZM10 6.25C9.49805 6.25 9.10584 6.68339 9.15578 7.18285L9.48461 10.4711C9.51109 10.7359 9.7339 10.9375 10 10.9375C10.2661 10.9375 10.4889 10.7359 10.5154 10.4711L10.8442 7.18285C10.8942 6.68339 10.5019 6.25 10 6.25ZM10.0014 11.875C9.48368 11.875 9.06394 12.2947 9.06394 12.8125C9.06394 13.3303 9.48368 13.75 10.0014 13.75C10.5192 13.75 10.9389 13.3303 10.9389 12.8125C10.9389 12.2947 10.5192 11.875 10.0014 11.875Z"
                fill="currentColor"
              />
            </svg>
          </slot>
          <div id="${this._controlId}-invalid" class="invalid-feedback">
            ${this.invalidFeedback ? this.invalidFeedback : this.validationMessage}
          </div>
        </div>`
              : html `${this._renderHintText()}`;
      }
      _renderLabel() {
          const labelTemplate = html `
      <label
        for=${this._controlId}
        id=${this._labelId}
        class=${classMap({
            "form-label": true,
            disabled: this.disabled
        })}
        >${this.label}</label
      >
    `;
          return this.label && labelTemplate;
      }
      _renderHintText() {
          const hintTextTemplate = html ` <div id="${this._controlId}Help" class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      render() {
          return html `
      <div class="form-control-container">
        ${this._renderLabel()}
        <div class="input-group">
          <sgds-icon-button
            variant="ghost"
            ariaLabel=${`decrease by ${this.step}`}
            ?disabled=${this.disabled || (this.min !== undefined ? this.value <= this.min : this.value < 1)}
            @click=${this._onMinus}
            name="dash"
          >
          </sgds-icon-button>
          <sgds-input
            type="number"
            class="quantity-toggle"
            name=${ifDefined(this.name)}
            step=${ifDefined(this.step)}
            min=${ifDefined(this.min)}
            max=${ifDefined(this.max)}
            .value=${live(this.value)}
            @sgds-change=${this._handleChange}
            @sgds-input=${this._handleInputChange}
            @sgds-invalid=${this._handleInvalid}
            @sgds-valid=${this._handleValid}
            @keydown=${this._handleKeyDown}
            ?disabled=${this.disabled}
            id=${this._controlId}
            ?invalid=${this.invalid}
            hasFeedback=${ifDefined(this.hasFeedback !== "text" ? "style" : undefined)}
          ></sgds-input>
          <sgds-icon-button
            variant="ghost"
            ariaLabel=${`increase by ${this.step}`}
            @click=${this._onPlus}
            ?disabled=${this.disabled || (this.max !== undefined && this.max && this.value >= this.max)}
            name="plus"
          >
          </sgds-icon-button>
        </div>
        <div id="announcer" role="region" aria-live="assertive" class="visually-hidden">${this.value}</div>
        ${this._renderFeedback()}
      </div>
    `;
      }
  }
  SgdsQuantityToggle.styles = [...FormControlElement.styles, css_248z$J, css_248z$l, css_248z$h];
  /** @internal */
  SgdsQuantityToggle.dependencies = {
      "sgds-input": SgdsInput,
      "sgds-icon-button": SgdsIconButton
  };
  __decorate([
      query("sgds-icon-button[ariaLabel^='increase by']")
  ], SgdsQuantityToggle.prototype, "plusBtn", void 0);
  __decorate([
      query("sgds-icon-button[ariaLabel^='decrease by']")
  ], SgdsQuantityToggle.prototype, "minusBtn", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsQuantityToggle.prototype, "value", void 0);
  __decorate([
      property({ type: Number })
  ], SgdsQuantityToggle.prototype, "step", void 0);
  __decorate([
      property()
  ], SgdsQuantityToggle.prototype, "min", void 0);
  __decorate([
      property()
  ], SgdsQuantityToggle.prototype, "max", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsQuantityToggle.prototype, "hasFeedback", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsQuantityToggle.prototype, "invalidFeedback", void 0);
  __decorate([
      defaultValue()
  ], SgdsQuantityToggle.prototype, "defaultValue", void 0);
  __decorate([
      queryAsync("sgds-input")
  ], SgdsQuantityToggle.prototype, "_sgdsInput", void 0);

  register("sgds-quantity-toggle", SgdsQuantityToggle);

  var css_248z$g = css`:host{outline:0}input{margin:0}.form-check{display:flex;gap:var(--sgds-form-gap-md);padding:var(--sgds-form-padding-inline-sm) 0}.form-check-input-container{height:var(--sgds-form-height-sm);width:var(--sgds-form-width-xs)}.form-check-input{appearance:none;background-color:var(--sgds-form-surface-default);background-image:var(--sgds-radio-bg-image);background-position:50%;background-repeat:no-repeat;background-size:auto;border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-default);border-radius:50%;height:var(--sgds-form-height-sm);width:var(--sgds-form-height-sm)}.form-check-input:not([disabled]):not(.is-invalid):not([aria-checked=true]):hover{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis)}.form-check-input:focus,.form-check-input:focus-visible{border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-emphasis);box-shadow:var(--sgds-form-box-shadow-focus);outline:0}.form-check-input:checked,.form-check-input[checked]{--sgds-radio-bg-image:url('data:image/svg+xml;charset=utf-8,<svg width="8" height="8" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0 4a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z" fill="%23fff"/></svg>');background-color:var(--sgds-form-primary-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-transparent)}.form-check-input:not([disabled]):not(.is-invalid):checked:focus-visible,.form-check-input:not([disabled]):not(.is-invalid):checked:hover,.form-check-input:not([disabled]):not(.is-invalid)[checked]:focus-visible,.form-check-input:not([disabled]):not(.is-invalid)[checked]:hover{background-color:var(--sgds-form-primary-surface-emphasis)}:host([disabled]) .form-check{cursor:not-allowed;opacity:var(--sgds-opacity-50)}.form-check-input:not([disabled]).is-invalid{border:var(--sgds-form-border-width-thick) solid var(--sgds-form-danger-border-color-default)}.form-check-input:checked.is-invalid,.form-check-input[checked].is-invalid{background-color:var(--sgds-form-danger-surface-default)}`;

  /**
   * @summary Radio allows the user to select one option from a set while seeing all available options.
   *
   * @slot default - The label of the radio input
   *
   * @event sgds-focus - Emitted when the control gains focus.
   * @event sgds-blur - Emitted when the control loses focus.
   */
  class SgdsRadio extends SgdsElement {
      constructor() {
          super(...arguments);
          /**
           * Draws the radio in a checked state. When used with SgdsRadioGroup, the value prop of SgdsRadioGroup overrides the checked prop
           */
          this.checked = false;
          /** Disables the radio. */
          this.disabled = false;
          /** Marks the radio input as invalid. Replace the pseudo :invalid selector for absent in custom elements */
          this.invalid = false;
          this.radioId = genId("radio");
      }
      connectedCallback() {
          super.connectedCallback();
          this.setInitialAttributes();
          this.addEventListeners();
      }
      handleCheckedChange() {
          var _a;
          if (this.checked) {
              (_a = this.input) === null || _a === void 0 ? void 0 : _a.focus();
          }
          this.setAttribute("aria-checked", this.checked ? "true" : "false");
          this.setAttribute("tabindex", this.checked ? "0" : "-1");
      }
      handleDisabledChange() {
          this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
      }
      handleBlur() {
          this.emit("sgds-blur");
      }
      handleClick() {
          if (!this.disabled) {
              this.checked = true;
          }
      }
      handleFocus() {
          this.emit("sgds-focus");
      }
      addEventListeners() {
          this.addEventListener("blur", () => this.handleBlur());
          this.addEventListener("click", () => this.handleClick());
          this.addEventListener("focus", () => this.handleFocus());
      }
      setInitialAttributes() {
          this.setAttribute("role", "radio");
          this.setAttribute("tabindex", "-1");
          this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
      }
      render() {
          return html$1 `
      <div class="form-check">
        <div class="form-check-input-container">
          <input
            class=${classMap({
            "form-check-input": true,
            "is-invalid": this.invalid
        })}
            type="radio"
            id=${ifDefined(this.radioId)}
            value=${ifDefined(this.value)}
            ?checked=${this.checked}
            ?disabled=${this.disabled}
            aria-disabled=${this.disabled ? "true" : "false"}
            aria-checked=${this.checked ? "true" : "false"}
            @click=${this.handleClick}
          />
        </div>
        <label for="${ifDefined(this.radioId)}" aria-label=${ifDefined(this.ariaLabel)} class="form-check-label">
          <slot></slot>
        </label>
      </div>
    `;
      }
  }
  SgdsRadio.styles = [...SgdsElement.styles, css_248z$K, css_248z$g];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsRadio.prototype, "checked", void 0);
  __decorate([
      property()
  ], SgdsRadio.prototype, "value", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsRadio.prototype, "disabled", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsRadio.prototype, "invalid", void 0);
  __decorate([
      query("input")
  ], SgdsRadio.prototype, "input", void 0);
  __decorate([
      watch("checked")
  ], SgdsRadio.prototype, "handleCheckedChange", null);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsRadio.prototype, "handleDisabledChange", null);

  var css_248z$f = css`fieldset{border:0;gap:var(--sgds-form-gap-md);margin:0;min-width:0;padding:0}.label-hint-container,fieldset{display:flex;flex-direction:column}.label-hint-container{gap:var(--sgds-form-gap-sm)}.radio-group-validation-input{display:none}.radio-container{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}`;

  /**
   * @summary RadioGroup group multiple radios so they function as a single form control.
   *
   * @slot default - The default slot where sgds-radio are placed.
   * @slot invalidIcon - The slot for invalid icon
   *
   * @event sgds-change - Emitted when the radio group's selected value changes.
   *
   */
  class SgdsRadioGroup extends SgdsFormValidatorMixin(FormControlElement) {
      constructor() {
          super(...arguments);
          /**@internal */
          this.defaultValue = "";
          /** The selected value of the control. */
          this.value = "";
          /**Feedback text for error state when validated */
          this.invalidFeedback = "";
          /** Allows invalidFeedback, invalid and valid styles to be visible with the input */
          this.hasFeedback = false;
          /** Makes the input as a required field. */
          this.required = false;
          this._isTouched = false;
      }
      _handleValueChange() {
          this.emit("sgds-change", { detail: { value: this.value } });
          this._updateCheckedRadio();
      }
      _handleInvalidChange() {
          this._radios.forEach(r => (r.invalid = this.invalid));
      }
      /**
       * radio requries a custom _mixinResetFormControl as the update of input value
       * requires to fire a reset event manually
       * */
      _mixinResetFormControl() {
          this.value = this.input.value = this.defaultValue;
          this._updateInputValue("reset");
          this._mixinResetValidity(this.input);
      }
      connectedCallback() {
          super.connectedCallback();
          this.defaultValue = this.value;
          this.addEventListener("sgds-blur", () => {
              this._isTouched = true;
          });
      }
      firstUpdated(changedProperties) {
          super.firstUpdated(changedProperties);
          const radios = this._radios;
          radios.forEach((item, index) => {
              if (radios.length > 1) {
                  switch (index) {
                      case 0:
                          item.setAttribute("first-of-type", "");
                          break;
                      case radios.length - 1:
                          item.setAttribute("last-of-type", "");
                          break;
                      default:
                          item.setAttribute("nth-of-type", "");
                  }
              }
          });
          if (this.value) {
              this._updateInputValue("change");
          }
      }
      _handleRadioClick(event) {
          event.preventDefault();
          const target = event.target;
          if (target.disabled) {
              return;
          }
          this.value = target.value;
          this._updateInputValue();
          const radios = this._radios;
          radios.forEach(radio => {
              return (radio.checked = radio === target);
          });
      }
      /**
       * when input value is set programatically, need to manually dispatch a change event
       * In order to prevent race conditions and ensure sequence of events, set input's value here instead of binding to value prop of input
       */
      _updateInputValue(eventName = "change") {
          this.input.value = this.value;
          this.input.dispatchEvent(new InputEvent(eventName));
      }
      _handleKeyDown(event) {
          var _a;
          if (!["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(event.key)) {
              return;
          }
          const radios = this._radios.filter(radio => !radio.disabled);
          const checkedRadio = (_a = radios.find(radio => radio.checked)) !== null && _a !== void 0 ? _a : radios[0];
          //if eventkey is space, index increment is 0, if eventkey arrowup/arrowleft, index is -1, arrowright/arrowdown, index incr is 1
          const incr = event.key === " " ? 0 : ["ArrowUp", "ArrowLeft"].includes(event.key) ? -1 : 1;
          let index = radios.indexOf(checkedRadio) + incr;
          if (index < 0) {
              index = radios.length - 1;
          }
          if (index > radios.length - 1) {
              index = 0;
          }
          this._radios.forEach(radio => {
              radio.checked = false;
              radio.tabIndex = -1;
          });
          this.value = radios[index].value;
          this._updateInputValue();
          radios[index].checked = true;
          radios[index].tabIndex = 0;
          // preventDefault at the end to allow Tab
          event.preventDefault();
      }
      _handleSlotChange() {
          const radios = this._radios;
          radios.forEach(radio => (radio.checked = radio.value === this.value));
          this._disabledChildRadios();
          if (!radios.some(radio => radio.checked)) {
              if (radios[0])
                  radios[0].tabIndex = 0;
          }
      }
      _updateCheckedRadio() {
          const radios = this._radios;
          radios.forEach(radio => (radio.checked = radio.value === this.value));
      }
      _renderHintText() {
          const hintTextTemplate = html$1 ` <div id="${this._controlId}Help" class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      _handleIsTouched() {
          if (this._isTouched) {
              this.invalid = !this.input.checkValidity();
          }
      }
      _handleDisabledChange() {
          // Disabled form controls are always valid, so we need to recheck validity when the state changes
          this.setInvalid(false);
          this._disabledChildRadios();
      }
      _disabledChildRadios() {
          if (this.disabled) {
              const radios = this._radios;
              radios.forEach(radio => (radio.disabled = this.disabled));
          }
      }
      render() {
          const defaultSlot = html$1 `
      <slot
        class="radio-container"
        @click=${this._handleRadioClick}
        @keydown=${this._handleKeyDown}
        @slotchange=${this._handleSlotChange}
        role="presentation"
      ></slot>
    `;
          return html$1 `
      <fieldset name=${this.name}>
        <div class="label-hint-container">
          <label
            class=${classMap({
            "form-label": true,
            required: this.required
        })}
          >
            ${this.label}
          </label>
          ${this._renderHintText()}
        </div>
        ${defaultSlot}
        <input
          type="text"
          class="radio-group-validation-input ${classMap({
            "is-invalid": this.hasFeedback && this.invalid
        })}"
          ?required=${this.required}
          tabindex="-1"
          @change=${(e) => super._mixinHandleChange(e)}
          .value=${live(this.value)}
        />
        ${this.invalid && this.hasFeedback
            ? html$1 `
              <div class="invalid-feedback-container">
                <slot name="invalidIcon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none">
                    <path
                      d="M17.5 10C17.5 14.1421 14.1421 17.5 10 17.5C5.85786 17.5 2.5 14.1421 2.5 10C2.5 5.85786 5.85786 2.5 10 2.5C14.1421 2.5 17.5 5.85786 17.5 10ZM10 6.25C9.49805 6.25 9.10584 6.68339 9.15578 7.18285L9.48461 10.4711C9.51109 10.7359 9.7339 10.9375 10 10.9375C10.2661 10.9375 10.4889 10.7359 10.5154 10.4711L10.8442 7.18285C10.8942 6.68339 10.5019 6.25 10 6.25ZM10.0014 11.875C9.48368 11.875 9.06394 12.2947 9.06394 12.8125C9.06394 13.3303 9.48368 13.75 10.0014 13.75C10.5192 13.75 10.9389 13.3303 10.9389 12.8125C10.9389 12.2947 10.5192 11.875 10.0014 11.875Z"
                      fill="currentColor"
                    />
                  </svg>
                </slot>
                <div id="radio-group-feedback" tabindex="0" class="invalid-feedback">
                  ${this.invalidFeedback ? this.invalidFeedback : this.input.validationMessage}
                </div>
              </div>
            `
            : nothing}
      </fieldset>
    `;
      }
  }
  SgdsRadioGroup.styles = [...FormControlElement.styles, css_248z$f];
  __decorate([
      query("slot:not([name])")
  ], SgdsRadioGroup.prototype, "defaultSlot", void 0);
  __decorate([
      state()
  ], SgdsRadioGroup.prototype, "defaultValue", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsRadioGroup.prototype, "value", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsRadioGroup.prototype, "invalidFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsRadioGroup.prototype, "hasFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsRadioGroup.prototype, "required", void 0);
  __decorate([
      watch("value", { waitUntilFirstUpdate: true })
  ], SgdsRadioGroup.prototype, "_handleValueChange", null);
  __decorate([
      watch("invalid", { waitUntilFirstUpdate: true })
  ], SgdsRadioGroup.prototype, "_handleInvalidChange", null);
  __decorate([
      state()
  ], SgdsRadioGroup.prototype, "_isTouched", void 0);
  __decorate([
      queryAssignedElements()
  ], SgdsRadioGroup.prototype, "_radios", void 0);
  __decorate([
      watch("_isTouched", { waitUntilFirstUpdate: true })
  ], SgdsRadioGroup.prototype, "_handleIsTouched", null);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsRadioGroup.prototype, "_handleDisabledChange", null);

  register("sgds-radio", SgdsRadio);
  register("sgds-radio-group", SgdsRadioGroup);

  var css_248z$e = css`:host{--sidenav-sticky-top:0rem;padding:var(--sgds-padding-md)}.sticky{height:calc(100vh - var(--sidenav-sticky-top));overflow-y:visible;position:sticky;top:var(--sidenav-sticky-top)}`;

  /**
   * @summary The side navigation is used to display a list of links to move between pages within a related category.
   * It is used as a secondary form of navigation where the primary navigation is located hierachically above the page frame.
   * Maximum three levels of navigations are allowed.
   *
   * @slot default - Default slot for SgdsSidenavItem element.
   * @cssproperty --sidenav-sticky-top - set the top value of the sticky sidenav. Defaults to 0rem
   */
  class SgdsSidenav extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Apply position sticky to the sidenav */
          this.sticky = false;
      }
      /** @internal */
      get items() {
          return [...(this.defaultNodes || [])].filter((node) => typeof node.tagName !== "undefined");
      }
      async onToggle(event) {
          const target = event.target;
          const isSidenavLink = target.tagName === "SGDS-SIDENAV-LINK";
          // Let the event pass through the DOM so that it can be
          // prevented from the outside if a user so desires.
          if (event.defaultPrevented || isSidenavLink) {
              // No toggling when the user prevents it.
              return;
          }
          const items = [...this.items];
          if (items && !items.length) {
              // no toggling when there aren't items.
              return;
          }
      }
      render() {
          return html$1 `
      <nav class=${classMap({ sticky: this.sticky })}>
        <div>
          <slot @click=${this.onToggle}></slot>
        </div>
      </nav>
    `;
      }
  }
  SgdsSidenav.styles = [...SgdsElement.styles, css_248z$e];
  __decorate([
      property({ type: Boolean, attribute: true })
  ], SgdsSidenav.prototype, "sticky", void 0);
  __decorate([
      queryAssignedElements()
  ], SgdsSidenav.prototype, "defaultNodes", void 0);

  var css_248z$d = css`:host([class^=second-level]) .sidenav-btn{font-weight:var(--sgds-font-weight-regular);padding-left:var(--sgds-padding-3-xl)}button{all:unset}.sidenav-btn{background:0;border:0;border-radius:var(--sgds-border-radius-md);display:flex;font-size:var(--sgds-font-size-2);font-weight:var(--sgds-font-weight-semibold);gap:var(--sgds-gap-xs);line-height:var(--sgds-line-height-body);padding:var(--sgds-padding-sm) var(--sgds-padding-sm) var(--sgds-padding-sm) calc(var(--sgds-padding-sm) + var(--sgds-padding-2-xs));text-align:initial;width:100%;.caret-icon,slot[name=caret-icon]::slotted(*){margin-bottom:auto;margin-left:auto;transform:rotate(180deg);transition:all .3s ease-in-out}}.sidenav-btn:hover:not(.disabled){background-color:var(--sgds-bg-translucent-subtle)}.sidenav-btn.active{color:var(--sgds-color-default)}.sidenav-btn.disabled{opacity:var(--sgds-opacity-50);pointer-events:none}.sidenav-btn:not(.active){.caret-icon,slot[name=caret-icon]::slotted(*){transform:rotate(0deg)}}.sidenav-btn:focus-visible:not(.disabled),.sidenav-btn:focus:not(.disabled){background-color:var(--sgds-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus);outline:0}.no-menu-default:focus,.no-menu-default:focus-visible{background-color:var(--sgds-default-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus)}.no-menu-default::slotted(a){background:0;border:0;border-radius:var(--sgds-border-radius-md);color:inherit!important;display:flex;font-size:var(--sgds-font-size-2);font-weight:var(--sgds-font-weight-semibold)!important;gap:var(--sgds-gap-xs);line-height:var(--sgds-line-height-body)!important;line-height:var(--sgds-line-height-body);padding:var(--sgds-padding-sm) var(--sgds-padding-sm) var(--sgds-padding-sm) calc(var(--sgds-padding-sm) + var(--sgds-padding-2-xs));text-decoration:none!important}.no-menu-default::slotted(a:focus),.no-menu-default::slotted(a:focus-visible){background-color:var(--sgds-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus);outline:0!important}:host([class^=first-level][active]) .no-menu-default::slotted(a){background-color:var(--sgds-primary-surface-translucent);color:var(--sgds-primary-color-emphasis)!important}:host([class^=first-level][disabled]) .no-menu-default::slotted(a){opacity:var(--sgds-opacity-50);pointer-events:none}`;

  /**
   * @description SgdsSidenavItem can function as either a menu type or a link type. Its type is determined by the children slotted into the default slot.
   * A single anchor tag element passed into the default slot converts SgdsSidenavItem to a link type while passing in SgdsSidenavLink components into the default slots makes it a menu type.
   *
   * @event sgds-toggle - Emitted when the sidenav item's button is clicked. Only applicable to menu type.
   * @event sgds-show - Emitted on show. Only applicable to menu type.
   * @event sgds-after-show - Emitted on show after animation has completed. Only applicable to menu type.
   * @event sgds-hide - Emitted on hide. Only applicable to menu type.
   * @event sgds-after-hide - Emitted on hide after animation has completed. Only applicable to menu type.
   *
   * @slot default - default slot for SgdsSidenavLink and second level SgdsSidenavItem. For link type SgdsSidenavItem, pass in a single anchor tag to the default slot. For menu type, pass in SgdsSidenavLink to the default slot
   * @slot title - title slot for the content of SgdsSidenavItem's menu button element. Only applicable to menu type
   * @slot icon - icon slot for the content of SgdsSidenavItem's menu button element. Only applicable to menu type
   * @slot caret-icon - The slot for the caret arrow icon of SgdsSidenavItem. Only applicable to menu type.
   */
  class SgdsSidenavItem extends SgdsElement {
      constructor() {
          super(...arguments);
          /**
           *  when true, toggles the sidenav-item to open on first load and set the active stylings.
           */
          this.active = false;
          /**
           * Disables the SgdsSidenavItem
           */
          this.disabled = false;
          this.isLink = false;
          /**
           * @internal Forwards to id attribute of div.collapse and aria-controls attribute of button in SgdsSidenavItem. By default, SgdsSidenavItem auto-generates a unique id. Override the default id by specifiying your own
           */
          this._collapseId = genId("sidenav", "collapse");
          /**
           * @internal Forwards to id attribute of button and aria-labelledby attribute of ul.sidenav-list in SgdsSidenavItem. By default, SgdsSidenavItem auto-generates a unique id. Override the default id by specifiying your own
           */
          this._buttonId = genId("sidenav", "button");
          this._levelId = genId("sidenav", "this");
          this._firstLevelId = "first-level-" + this._levelId;
          this._secondLevelId = "second-level-" + this._levelId;
          this._thirdLevelId = "third-level-" + this._levelId;
          /** @internal */
          this.index = "-1";
      }
      _onToggle() {
          this.emit("sgds-toggle", { detail: { index: this.index } });
      }
      /** Shows the sidenav item. Only applicable to sgds-sidenav-item that are of menu types */
      async show() {
          if (this.isLink)
              return;
          if (this.active) {
              return;
          }
          this.active = true;
          return waitForEvent(this, "sgds-after-show");
      }
      /** Hide the sidenav item.  Only applicable to sgds-sidenav-item that are of menu types */
      async hide() {
          if (this.isLink)
              return;
          if (!this.active) {
              return;
          }
          this.active = false;
          return waitForEvent(this, "sgds-after-hide");
      }
      connectedCallback() {
          super.connectedCallback();
          this.classList.add(this._firstLevelId);
      }
      firstUpdated() {
          if (!this.isLink) {
              this.body.hidden = !this.active;
              this.body.style.height = this.active ? "auto" : "0";
          }
          this._handleOpenMenu();
      }
      /**
       * Sets active to true to open menu ,
       * evaluating based on whether any of the child in any level is active
       * If at least 1 child is active, parent item should be active
       */
      _handleOpenMenu() {
          if (!this.active) {
              this.active = this._items.some((i) => i.active);
          }
      }
      _handleSummaryClick() {
          if (this.active) {
              this.hide();
          }
          else {
              this.show();
          }
          this._onToggle();
          this.header.focus();
      }
      _handleSummaryKeyDown(event) {
          if (event.key === "Enter" || event.key === " ") {
              event.preventDefault();
              if (this.active) {
                  this.hide();
              }
              else {
                  this.show();
              }
          }
          if (event.key === "ArrowUp" || event.key === "ArrowLeft") {
              event.preventDefault();
              this.hide();
          }
          if (event.key === "ArrowDown" || event.key === "ArrowRight") {
              event.preventDefault();
              this.show();
          }
      }
      async _handleOpenChange() {
          if (this.isLink)
              return;
          if (this.active) {
              // Show
              const sgdsShow = this.emit("sgds-show", { cancelable: true });
              if (sgdsShow.defaultPrevented) {
                  this.active = false;
                  return;
              }
              await stopAnimations(this.body);
              this.body.hidden = false;
              const { keyframes, options } = getAnimation(this, "sidenav.show");
              await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
              this.body.style.height = "auto";
              this.emit("sgds-after-show");
          }
          else {
              // Hide
              const sgdsHide = this.emit("sgds-hide", { cancelable: true });
              if (sgdsHide.defaultPrevented) {
                  this.active = true;
                  return;
              }
              await stopAnimations(this.body);
              const { keyframes, options } = getAnimation(this, "sidenav.hide");
              await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
              this.body.hidden = true;
              this.body.style.height = "auto";
              this.emit("sgds-after-hide");
          }
      }
      _handleSlotChange(e) {
          const anchorItems = e.target
              .assignedElements({ flatten: true })
              .filter(item => item.tagName.toLowerCase() === "a");
          if (anchorItems.length > 1) {
              return console.error("More than one anchor tag is added to sgds-sidenav-item");
          }
          else if (anchorItems.length === 1) {
              const anchor = anchorItems[0];
              this.disabled && anchor.setAttribute("tabindex", "-1");
              this.active && anchor.setAttribute("aria-current", "true");
              return (this.isLink = true);
          }
          const sideNavItems = e.target
              .assignedElements({ flatten: true })
              .filter(item => item.tagName.toLowerCase() === "sgds-sidenav-item");
          /** All sgds-sidenav-item in this slot is a 2nd level item */
          sideNavItems.forEach(i => {
              const firstLevelId = Array.from(i.classList).filter(c => c.startsWith("first-level"))[0];
              i.classList.replace(firstLevelId, this._secondLevelId);
          });
          /** All second level sgds-sidenav-item should only have third level sgds-sidenav-links */
          if (Array.from(this.classList).some(c => c.startsWith("second-level"))) {
              this._items.forEach((i) => i.classList.add(this._thirdLevelId));
          }
          this._handleOpenMenu();
      }
      render() {
          const withMenuTemplate = html$1 `
      <button
        @click=${this._handleSummaryClick}
        @keydown=${this._handleSummaryKeyDown}
        class="sidenav-btn ${classMap({
            disabled: this.disabled,
            active: this.active
        })}"
        aria-expanded=${this.active}
        aria-controls=${this._collapseId}
        aria-current=${this.active}
        id=${this._buttonId}
        ?disabled=${this.disabled}
        aria-disabled=${this.disabled ? "true" : "false"}
      >
        <slot name="icon"></slot>
        <slot name="title"></slot>
        <slot name="caret-icon">
          <sgds-icon name="chevron-down" size="lg" class="caret-icon"></sgds-icon>
        </slot>
      </button>
      <div class="sidenav-body" id="${this._collapseId}">
        <div class="sidenav-list" aria-labelledby="${this._buttonId}">
          <slot class="default" @slotchange=${this._handleSlotChange}></slot>
        </div>
      </div>
    `;
          const noMenuTemplate = html$1 ` <slot @slotchange=${this._handleSlotChange} class="no-menu-default"></slot> `;
          return html$1 `
      <div class="sidenav-item" aria-haspopup="${!this.isLink}">${this.isLink ? noMenuTemplate : withMenuTemplate}</div>
    `;
      }
  }
  SgdsSidenavItem.styles = [...SgdsElement.styles, css_248z$d];
  /** @internal */
  SgdsSidenavItem.dependencies = {
      "sgds-icon": SgdsIcon
  };
  __decorate([
      query(".sidenav-body")
  ], SgdsSidenavItem.prototype, "body", void 0);
  __decorate([
      query(".sidenav-btn")
  ], SgdsSidenavItem.prototype, "header", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSidenavItem.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSidenavItem.prototype, "disabled", void 0);
  __decorate([
      state()
  ], SgdsSidenavItem.prototype, "isLink", void 0);
  __decorate([
      watch("active", { waitUntilFirstUpdate: true })
  ], SgdsSidenavItem.prototype, "_handleOpenChange", null);
  __decorate([
      queryAssignedElements()
  ], SgdsSidenavItem.prototype, "_items", void 0);
  setDefaultAnimation("sidenav.show", {
      keyframes: [
          { height: "0", opacity: "0" },
          { height: "auto", opacity: "1" }
      ],
      options: { duration: 200, easing: "ease-in-out" }
  });
  setDefaultAnimation("sidenav.hide", {
      keyframes: [
          { height: "auto", opacity: "1" },
          { height: "0", opacity: "0" }
      ],
      options: { duration: 200, easing: "ease-in-out" }
  });

  var css_248z$c = css`:host([class^=third-level]) ::slotted(a){padding-left:calc(var(--sgds-padding-xl) + var(--sgds-padding-3-xl))}::slotted(a){--sgds-link-color-default:var(--sgds-color-default);border-radius:var(--sgds-border-radius-md);color:var(--sgds-color-default,var(--sgds-link-color-default));display:block;padding:var(--sgds-padding-sm) var(--sgds-padding-sm) var(--sgds-padding-sm) var(--sgds-padding-3-xl);text-decoration:none!important}:host([active]) ::slotted(a){--sgds-link-color-default:var(--sgds-primary-color-emphasis);background-color:var(--sgds-primary-surface-translucent);color:var(--sgds-primary-color-emphasis,var(--sgds-link-color-default))}:host(:not([disabled]):not([active])) ::slotted(a:hover){background-color:var(--sgds-bg-translucent-subtle)}::slotted(a:focus),::slotted(a:focus-visible),::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-color-default);color:var(--sgds-color-default,var(--sgds-link-color-emphasis))}:host([active]) ::slotted(a:focus),:host([active]) ::slotted(a:focus-visible),:host([active]) ::slotted(a:hover){--sgds-link-color-emphasis:var(--sgds-primary-color-emphasis);color:var(--sgds-primary-color-emphasis,var(--sgds-link-color-emphasis))}:host([disabled]) ::slotted(a){opacity:var(--sgds-opacity-50);pointer-events:none}:host([disabled]) ::slotted(a:focus),:host([disabled]) ::slotted(a:focus-visible){box-shadow:none;outline:0}::slotted(a:focus),::slotted(a:focus-visible){background-color:var(--sgds-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus);outline:0}:host([active]) ::slotted(a:focus),:host([active]) ::slotted(a:focus-visible){background-color:var(--sgds-primary-bg-translucent)}`;

  /**
   * @slot default - slot for label of anchor tag.
   */
  class SgdsSidenavLink extends SgdsElement {
      constructor() {
          super(...arguments);
          /** when true, sets the active stylings of .nav-link */
          this.active = false;
          /** Disables the SgdsMainnavItem */
          this.disabled = false;
      }
      connectedCallback() {
          super.connectedCallback();
          this.setAttribute("aria-disabled", `${this.disabled}`);
      }
      _handleDisabled() {
          this.setAttribute("aria-disabled", `${this.disabled}`);
          this._anchor[0].setAttribute("aria-disabled", `${this.disabled}`);
          if (!this.disabled) {
              this._anchor[0].removeAttribute("tabindex");
          }
      }
      _handleSlotChange() {
          this._anchor[0].setAttribute("aria-disabled", `${this.disabled}`);
          /** If link is disabled, set tabindex of anchor to -1 */
          if (this.disabled) {
              this._anchor[0].setAttribute("tabindex", "-1");
              this._anchor[0].removeAttribute("href");
              this._anchor[0].setAttribute("role", "link");
          }
      }
      render() {
          return html$1 ` <slot @slotchange=${this._handleSlotChange}></slot> `;
      }
  }
  SgdsSidenavLink.styles = [...SgdsElement.styles, css_248z$c];
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSidenavLink.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSidenavLink.prototype, "disabled", void 0);
  __decorate([
      queryAssignedElements({ flatten: true })
  ], SgdsSidenavLink.prototype, "_anchor", void 0);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsSidenavLink.prototype, "_handleDisabled", null);

  register("sgds-sidenav", SgdsSidenav);
  register("sgds-sidenav-item", SgdsSidenavItem);
  register("sgds-sidenav-link", SgdsSidenavLink);

  var css_248z$b = css`.skeleton{--bg:var(--sgds-bg-translucent-subtle);background-color:var(--bg);border-radius:var(--sgds-border-radius-sm);display:flex;flex-direction:column;gap:var(--sgds-gap-xs)}.skeleton.skeleton-paragraph{background-color:transparent}.skeleton.skeleton-paragraph.auto-size-rows>div[class*=skeleton-row]{background-color:var(--sgds-bg-translucent);border-radius:var(--sgds-border-radius-sm);height:-webkit-fill-available}.sheen{--sheen-color:var(--sgds-bg-translucent);animation:sheen 8s ease-in-out infinite;background:linear-gradient(270deg,var(--bg) 0,var(--sheen-color) 33.33%,var(--sheen-color) 66.67%,var(--bg) 100%);background-size:400% 100%}@keyframes sheen{0%{background-position:200% 0}to{background-position:-200% 0}}@media (prefers-reduced-motion:reduce){.sheen{animation:none}}`;

  /**
   * @summary A skeleton is a low-fidelity visual placeholder that represents the loading of interface elements
   * before they have displayed on the page.
   */
  class SgdsSkeleton extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Sets the width of skeleton. Pass value in string with length units like pixels or percentage. */
          this.width = "";
          /** Sets the height of skeleton. Pass value in string with length units like pixels or percentage. */
          this.height = "";
          /** Sets the border radius of skeleton. Pass value in string with length units like pixels and percentage
           * When `row` is defined, the borderRadius is forwarded down to the border radius of each skeleton row */
          this.borderRadius = "";
          /** Adds a sheening animated effect to the skeleton  */
          this.sheen = false;
      }
      firstUpdated() {
          this.width ? (this.skeleton.style.width = this.width) : null;
          this.height ? (this.skeleton.style.height = this.height) : null;
          this.borderRadius ? (this.skeleton.style.borderRadius = this.borderRadius) : null;
          if (this.rows > 0) {
              const skeletonRows = Array.from(this.skeleton.children);
              skeletonRows.forEach(row => (row.style.borderRadius = this.borderRadius));
          }
      }
      render() {
          return html$1 `
      <div
        class=${classMap({
            skeleton: true,
            "skeleton-paragraph": this.rows > 0,
            "auto-size-rows": this.rows > 0,
            sheen: this.sheen && !this.rows
        })}
      >
        ${this.rows > 0
            ? [...Array(this.rows).keys()].map(n => {
                const classes = { [`skeleton-row-${n}`]: true, sheen: this.sheen };
                return html$1 `<div class=${classMap(classes)}></div>`;
            })
            : nothing}
      </div>
    `;
      }
  }
  SgdsSkeleton.styles = [css_248z$b];
  __decorate([
      query(".skeleton")
  ], SgdsSkeleton.prototype, "skeleton", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsSkeleton.prototype, "width", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsSkeleton.prototype, "height", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsSkeleton.prototype, "borderRadius", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsSkeleton.prototype, "rows", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSkeleton.prototype, "sheen", void 0);
  // Accessibility to add to Documentation:
  // When user use a template of sgds-skeletons, add one visually hidden span to indicate Loading...
  // Loading labels must be unique thats why its not advisible to handle the aria labelling for users inside sgds-skeleton

  register("sgds-skeleton", SgdsSkeleton);

  register("sgds-spinner", SgdsSpinner);

  var css_248z$a = css`input{margin:0}.form-check{align-items:center;display:flex;gap:var(--sgds-form-gap-lg)}.form-check-input{--sgds-switch-width:var(--sgds-form-width-xl);--sgds-switch-height:var(--sgds-form-height-md);--sgds-switch-bg-image:url('data:image/svg+xml;charset=utf-8,<svg viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M.5 12c0-6.627 5.373-12 12-12s12 5.373 12 12-5.373 12-12 12-12-5.373-12-12Z" fill="%23fff"/></svg>');appearance:none;background-color:var(--sgds-form-surface-subtle);background-image:var(--sgds-switch-bg-image);background-position:left var(--sgds-form-padding-inline-sm) center;background-repeat:no-repeat;background-size:var(--sgds-form-width-xs) var(--sgds-form-height-sm);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-transparent);border-radius:var(--sgds-form-border-radius-full);height:var(--sgds-switch-height);padding:0 var(--sgds-form-padding-inline-sm);transition:background-position .15s ease-in-out;width:var(--sgds-switch-width)}.form-check-input:focus,.form-check-input:focus-visible{background-color:var(--sgds-form-surface-emphasis);box-shadow:var(--sgds-form-box-shadow-focus);outline:0}.form-check-input:not([disabled]):hover{background-color:var(--sgds-form-surface-emphasis)}.form-check-input:checked,.form-check-input[checked]{background-color:var(--sgds-form-primary-surface-default);background-position:right var(--sgds-form-padding-inline-sm) center}.form-check-input:not([disabled]):checked:focus,.form-check-input:not([disabled]):checked:hover,.form-check-input:not([disabled])[checked]:focus-visible,.form-check-input:not([disabled])[checked]:hover{background-color:var(--sgds-form-primary-surface-emphasis)}:host([disabled]) .form-check{cursor:not-allowed;opacity:var(--sgds-opacity-50)}:host([size=sm]) .form-check{font-size:var(--sgds-font-size-1)}:host([size=sm]) .form-check-input{--sgds-switch-width:var(--sgds-form-width-md);--sgds-switch-height:var(--sgds-form-height-sm);background-size:var(--sgds-form-width-2-xs) var(--sgds-form-height-2-xs)}:host([size=lg]) .form-check{font-size:var(--sgds-font-size-3)}:host([size=lg]) .form-check-input{--sgds-switch-width:var(--sgds-form-width-3-xl);--sgds-switch-height:var(--sgds-form-height-lg);background-size:var(--sgds-form-width-sm) var(--sgds-form-height-md)}@media (prefers-reduced-motion:reduce){.form-check .form-check-input{transition:none}}:host([icon]) .form-check-input:checked,:host([icon]) .form-check-input[checked]{--sgds-switch-bg-image:url('data:image/svg+xml;charset=utf-8,<svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16Zm8.94-21.778a.776.776 0 0 0-.424-.424.781.781 0 0 0-.854.17L13.261 20.372l-4.924-4.925a.783.783 0 1 0-1.108 1.108l5.478 5.478a.777.777 0 0 0 .692.217.787.787 0 0 0 .416-.217L24.77 11.076a.777.777 0 0 0 .17-.854Z" fill="%23fff"/></svg>')}:host([icon]) .form-check-input{--sgds-switch-bg-image:url('data:image/svg+xml;charset=utf-8,<svg viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16ZM10.164 9.416a.75.75 0 0 0-.53 1.28L14.937 16l-5.303 5.303a.75.75 0 0 0 1.06 1.061l5.304-5.303 5.303 5.303a.75.75 0 1 0 1.06-1.06L17.06 16l5.303-5.303a.75.75 0 0 0-1.06-1.061l-5.304 5.304-5.303-5.304a.75.75 0 0 0-.53-.22Z" fill="%23fff"/></svg>')}.d-none{display:none}`;

  /**
   * @summary Switch component is used to toggle on and off or yes or no action.
   *
   * @slot default - The default label of switch on the right side of the switch
   * @slot leftLabel - The label on the left side of the switch
   *
   * @event sgds-change - Emitted when the checked state changes.
   *
   */
  class SgdsSwitch extends SgdsElement {
      constructor() {
          super(...arguments);
          /** The size of the switch. By default, it is small size */
          this.size = "md";
          /** When enabled, icon appears in the switch */
          this.icon = false;
          /** Draws the switch in a checked state. */
          this.checked = false;
          /** Disables the switch (so the user can't check / uncheck it). */
          this.disabled = false;
          /** @internal Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
          this.defaultChecked = false;
          /** @internal For Id/For pair of the HTML form control and label. */
          this._inputId = genId("switch");
      }
      /** Simulates a click on the switch. */
      click() {
          this.input.click();
      }
      /** Sets focus on the switch. */
      focus(options) {
          this.input.focus(options);
      }
      /** Removes focus from the switch. */
      blur() {
          this.input.blur();
      }
      _handleChange() {
          this.checked = !this.checked;
          this.emit("sgds-change", { detail: { checked: this.checked } });
      }
      _handleKeyDown(event) {
          const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
          if (event.key === "Enter" && !hasModifier) {
              this.click();
          }
      }
      /** @internal */
      _handleDisabledChange() {
          // Disabled form controls are always valid, so we need to recheck validity when the state changes
          this.input.disabled = this.disabled;
      }
      firstUpdated() {
          var _a;
          if (this._leftIconNodes.length === 0) {
              return (_a = this.shadowRoot.querySelector(".form-check-label.left-label")) === null || _a === void 0 ? void 0 : _a.classList.add("d-none");
          }
      }
      render() {
          return html$1 `
      <div class="form-check">
        <label for="${this._inputId}" class="form-check-label left-label"><slot name="leftLabel"></slot></label>
        <input
          class=${classMap({
            "form-check-input": true
        })}
          type="checkbox"
          id=${this._inputId}
          ?checked=${this.checked}
          ?disabled=${this.disabled}
          aria-disabled=${this.disabled ? "true" : "false"}
          aria-checked=${this.checked ? "true" : "false"}
          @change=${this._handleChange}
          @keydown=${this._handleKeyDown}
        />
        <label for="${this._inputId}" class="form-check-label"><slot></slot></label>
      </div>
    `;
      }
  }
  SgdsSwitch.styles = [...SgdsElement.styles, css_248z$K, css_248z$a];
  __decorate([
      property({ reflect: true, type: String })
  ], SgdsSwitch.prototype, "size", void 0);
  __decorate([
      property({ reflect: true, type: Boolean })
  ], SgdsSwitch.prototype, "icon", void 0);
  __decorate([
      query('input[type="checkbox"]')
  ], SgdsSwitch.prototype, "input", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSwitch.prototype, "checked", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsSwitch.prototype, "disabled", void 0);
  __decorate([
      defaultValue("checked")
  ], SgdsSwitch.prototype, "defaultChecked", void 0);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsSwitch.prototype, "_handleDisabledChange", null);
  __decorate([
      queryAssignedNodes({ slot: "leftLabel", flatten: true })
  ], SgdsSwitch.prototype, "_leftIconNodes", void 0);

  register("sgds-switch", SgdsSwitch);

  var css_248z$9 = css`.stepper{display:flex;flex-wrap:wrap}.stepper.vertical{flex-direction:column}.stepper.horizontal .stepper-item-container{align-items:center;display:flex;flex-basis:1em;flex-direction:column;flex-grow:1;flex-shrink:1;position:relative}.stepper.vertical .stepper-item-container{position:relative;width:fit-content}.stepper .stepper-item{align-items:center;display:flex;flex-direction:column;gap:var(--sgds-gap-sm)}.stepper.vertical .stepper-item{align-items:flex-start;flex-direction:row}.stepper.vertical .stepper-item-container:not(:last-child) .stepper-item{margin-bottom:var(--sgds-padding-xl)}.stepper .stepper-item:focus,.stepper .stepper-item:focus-visible{outline:0}.stepper .stepper-item.is-clickable:focus,.stepper .stepper-item.is-clickable:focus-visible{box-shadow:var(--sgds-box-shadow-focus)}.stepper.horizontal .stepper-item-container:not(:first-child) .stepper-item:before{background:var(--sgds-border-color-translucent);bottom:0;content:" ";height:var(--sgds-dimension-2);left:calc(-50% + 16px);position:absolute;top:15px;width:calc(100% - var(--sgds-dimension-32))}.stepper.vertical .stepper-item-container:not(:last-child) .stepper-item:after{background:var(--sgds-bg-translucent);bottom:0;content:" ";height:calc(100% - var(--sgds-dimension-32));left:15px;position:absolute;top:32px;width:var(--sgds-dimension-2)}.stepper.horizontal .stepper-item-container .stepper-item.is-active:before,.stepper.horizontal .stepper-item-container .stepper-item.is-completed:before,.stepper.vertical .stepper-item-container .stepper-item.is-completed:after{background:var(--sgds-primary-border-color-default)}.stepper .stepper-item.is-clickable{cursor:pointer}.stepper .stepper-marker{align-items:center;background:var(--sgds-bg-translucent);border:var(--sgds-border-width-2) solid var(--sgds-border-color-transparent);border-radius:50%;color:var(--sgds-color-default);display:flex;height:var(--sgds-dimension-32);justify-content:center;width:var(--sgds-dimension-32);z-index:1}.stepper:not(.vertical) .stepper-detail{max-width:var(--sgds-dimension-128);text-align:center}.stepper.vertical .stepper-detail{padding:var(--sgds-padding-2-xs) 0 0;text-align:left}.stepper .stepper-item:not(.is-active):not(.is-completed) .stepper-detail{color:var(--sgds-color-subtle)}.stepper .stepper-item.is-clickable:focus .stepper-marker,.stepper .stepper-item.is-clickable:focus-visible .stepper-marker,.stepper .stepper-item.is-clickable:hover .stepper-marker{background-color:var(--sgds-primary-surface-emphasis);border-color:var(--sgds-border-color-transparent);color:var(--sgds-color-fixed-light)}.stepper .stepper-item.is-clickable:focus .stepper-detail,.stepper .stepper-item.is-clickable:focus-visible .stepper-detail,.stepper .stepper-item.is-clickable:hover .stepper-detail{color:var(--sgds-primary-color-emphasis)}.stepper .stepper-item.is-clickable .stepper-detail,.stepper.clickable .stepper-item.is-active .stepper-detail{color:var(--sgds-primary-color-default)}.stepper .stepper-item.is-active .stepper-marker{background-color:var(--sgds-primary-surface-default);color:var(--sgds-color-fixed-light)}.stepper .stepper-item.is-completed .stepper-marker{background-color:var(--sgds-bg-transparent);border:var(--sgds-border-width-2) solid var(--sgds-primary-border-color-default);color:var(--sgds-primary-color-default)}`;

  /**
   * @summary Steppers are used to inform users which step they are at in a form or a process
   *
   * @event sgds-next-step - Emitted right before the next step is reached. Event is fired when nextStep method is called.
   * @event sgds-previous-step - Emitted right before the previous step is reached. Event is fired when previousStep method is called.
   * @event sgds-last-step - Emitted right before the last step is reached. Event is fired when lastStep method is called.
   * @event sgds-first-step - Emitted on hide after animation has completed. Event is fired when firstStep method is called.
   * @event sgds-arrived - Emitted right after the activeStep has updated its state, when upcoming step has arrived. Call `getMethod()` on this event to get the current step's component.
   * @event sgds-reset - Emitted right before the step is reset to its defaultActiveStep. Event is fired when reset method is called.
   *
   */
  class SgdsStepper extends SgdsElement {
      constructor() {
          super(...arguments);
          /** The metadata of stepper, type `IStepMetaData`, that consist of `stepHeader: string`, `component:unknown`, `iconName:string`. `stepHeader` is the name of the step and `component` is the content that should appear at the each step. `component` is set to `unknown` to allow users to pass in their desired component based on the framework of choice. e.g. pass in your own react/angular/vue component or it can also be a text content.
           * It is required to populate this array to properly render the stepper. By default, stepper markers will render numbers. For icon stepper markers, pass the name of sgds icon via `iconName` key. `iconName` is optional.
           */
          this.steps = [];
          /** The current state of active step. Defaults to 0 */
          this.activeStep = 0;
          /** The orientation of stepper. By default, the stepper is of horizontal orientation */
          this.orientation = "horizontal";
          /** When true, the stepper's steps will be clickable */
          this.clickable = false;
          /** @internal Gets or sets the default activeStep used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
          this.defaultActiveStep = 0;
      }
      /** By default, it returns the corresponding component of the current activeStep as defined in the steps metadata. To get other components, pass in your desired step number as the parameter*/
      getComponent(step = this.activeStep) {
          return this.steps[step].component;
      }
      /** Moves the active step forward one step */
      nextStep() {
          this.emit("sgds-next-step");
          if (this.activeStep < this.steps.length - 1) {
              this.activeStep++;
          }
      }
      /** Moves the active step back one step */
      previousStep() {
          this.emit("sgds-previous-step");
          if (this.activeStep > 0) {
              this.activeStep--;
          }
      }
      /** Changes the active step to the last step */
      lastStep() {
          this.emit("sgds-last-step");
          if (this.activeStep !== this.steps.length - 1) {
              this.activeStep = this.steps.length - 1;
          }
      }
      /** Changes active step to the first step */
      firstStep() {
          this.emit("sgds-first-step");
          if (this.activeStep > 0) {
              this.activeStep = 0;
          }
      }
      /** Resets the Stepper to its initial active step state */
      reset() {
          this.emit("sgds-reset");
          this.activeStep = this.defaultActiveStep;
      }
      /**@internal */
      _onStepperItemClick(index) {
          //emit an event before moving to next step
          if (this.activeStep > index) {
              this.activeStep = index;
          }
      }
      /**@internal */
      _handleActiveStepChange() {
          this.emit("sgds-arrived");
      }
      /**@internal */
      _handleKeyDown(event, index) {
          if (event.key === "Enter") {
              this._onStepperItemClick(index);
          }
      }
      render() {
          return html$1 `
      <div
        class="stepper ${classMap({
            [`${this.orientation}`]: this.orientation,
            clickable: this.clickable
        })}"
      >
        ${this.steps.map(({ stepHeader: step, iconName }, index) => {
            return html$1 `
            <div class="stepper-item-container">
              <div
                class="stepper-item ${classMap({
                "is-active": this.activeStep === index,
                "is-completed": this.activeStep > index,
                "is-clickable": this.clickable && this.activeStep > index
            })}"
                tabindex=${this.clickable && this.activeStep > index ? "0" : "-1"}
                aria-current=${this.activeStep === index ? "step" : "false"}
                aria-disabled=${this.activeStep <= index ? "true" : "false"}
                @click="${this.clickable ? () => this._onStepperItemClick(index) : null}"
                @keydown=${this.clickable ? (e) => this._handleKeyDown(e, index) : null}
              >
                <div class="stepper-marker">
                  ${iconName ? html$1 `<sgds-icon name=${iconName} size="md"></sgds-icon>` : index + 1}
                </div>
                <div class="stepper-detail">${step}</div>
              </div>
            </div>
          `;
        })}
      </div>
    `;
      }
  }
  SgdsStepper.styles = [...SgdsElement.styles, css_248z$9];
  /** @internal */
  SgdsStepper.dependencies = { "sgds-icon": SgdsIcon };
  __decorate([
      property({ type: Array })
  ], SgdsStepper.prototype, "steps", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsStepper.prototype, "activeStep", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsStepper.prototype, "orientation", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsStepper.prototype, "clickable", void 0);
  __decorate([
      defaultValue("activeStep")
  ], SgdsStepper.prototype, "defaultActiveStep", void 0);
  __decorate([
      watch("activeStep", { waitUntilFirstUpdate: true })
  ], SgdsStepper.prototype, "_handleActiveStepChange", null);

  register("sgds-stepper", SgdsStepper);

  var css_248z$8 = css`:host([density=compact]) .tab{font-size:var(--sgds-font-size-1);padding:var(--sgds-spacer-3) var(--sgds-spacer-5)}:host(:not([active])) .tab{cursor:pointer}:host([variant=solid]) .tab{background-color:var(--sgds-bg-translucent-subtle);border-radius:var(--sgds-border-radius-md)}:host([variant=solid][active]) .tab{background-color:var(--sgds-primary-surface-default);color:var(--sgds-color-fixed-light)}:host([variant=solid]:not([active]):not([disabled])) .tab:focus,:host([variant=solid]:not([active]):not([disabled])) .tab:focus-visible{background-color:var(--sgds-bg-translucent);box-shadow:var(--sgds-box-shadow-focus);outline:0}:host([variant=solid]:not([active]):not([disabled])) .tab:hover{background-color:var(--sgds-bg-translucent)}:host([disabled]) .tab{cursor:not-allowed;opacity:var(--sgds-opacity-50)}:host([variant=underlined][active]) .tab{color:var(--sgds-primary-color-default)}:host([variant=underlined][orientation=vertical]) .tab{border-right:var(--sgds-border-width-1) solid var(--sgds-border-color-muted)}:host([variant=underlined][orientation=vertical][active]) .tab:after{background-color:var(--sgds-primary-surface-default);bottom:0;content:"";height:100%;position:absolute;right:-1px;width:var(--sgds-border-width-4)}:host([variant=underlined][orientation=horizontal]) .tab{border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-muted)}:host([variant=underlined][orientation=horizontal][active]) .tab:after{background-color:var(--sgds-primary-surface-default);bottom:-1px;content:"";height:var(--sgds-border-width-4);left:0;position:absolute;width:100%}:host([variant=underlined]:not([active]):not([disabled])) .tab:focus,:host([variant=underlined]:not([active]):not([disabled])) .tab:focus-visible{background-color:var(--sgds-bg-translucent-subtle);box-shadow:var(--sgds-box-shadow-focus);outline:0}:host([variant=underlined]:not([active]):not([disabled])) .tab:hover{background-color:var(--sgds-bg-translucent-subtle)}.tab{align-items:center;color:var(--sgds-color-default);display:flex;gap:var(--sgds-spacer-3);padding:var(--sgds-spacer-4) var(--sgds-spacer-5);position:relative}.tab:focus,.tab:focus-visible{box-shadow:var(--sgds-box-shadow-focus);outline:0}`;

  let id$1 = 0;
  /**
   * @summary Tabs are used within tab group to activate the tab panels
   *
   * @slot default - The slot for label of tab
   * @slot icon - The slot to place leading icon.
   *
   */
  class SgdsTab extends SgdsElement {
      constructor() {
          super(...arguments);
          this.attrId = ++id$1;
          this.componentId = `sgds-tab-${this.attrId}`;
          /** The name of the tab panel this tab is associated with. The panel must be located in the same tab group. */
          this.panel = "";
          /** Draws the tab in an active state. When used with tab group, this state is already managed. Use it to set the initial active tab on first load of page */
          this.active = false;
          /** When true, sets tab to disabled state */
          this.disabled = false;
      }
      connectedCallback() {
          super.connectedCallback();
          // If the user didn't provide an ID, we'll set one so we can link tabs and tab panels with aria labels
          this.id = this.id.length > 0 ? this.id : this.componentId;
          this.setAttribute("role", "tab");
      }
      /** Sets focus to the tab. */
      focus(options) {
          var _a, _b;
          (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(".tab")) === null || _b === void 0 ? void 0 : _b.focus(options);
      }
      /** Removes focus from the tab. */
      blur() {
          this.tab.blur();
      }
      /**@internal */
      handleActiveChange() {
          this.setAttribute("aria-selected", this.active ? "true" : "false");
      }
      /**@internal */
      handleDisabledChange() {
          this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
          if (this.disabled)
              this.active = false;
      }
      render() {
          return html$1 `
      <div data-testid="inner-tab" tabindex=${this.disabled ? "-1" : "0"} class="tab">
        <slot name="icon"></slot>
        <slot></slot>
      </div>
    `;
      }
  }
  SgdsTab.styles = [css_248z$8];
  __decorate([
      query(".tab")
  ], SgdsTab.prototype, "tab", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsTab.prototype, "panel", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTab.prototype, "active", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTab.prototype, "disabled", void 0);
  __decorate([
      watch("active")
  ], SgdsTab.prototype, "handleActiveChange", null);
  __decorate([
      watch("disabled")
  ], SgdsTab.prototype, "handleDisabledChange", null);

  var css_248z$7 = css`.tab-group{display:flex;flex-direction:column;gap:var(--sgds-gap-xl)}.tab-group__nav{display:flex;flex-direction:row}.tab-group__content{flex:1}:host([orientation=vertical]) .tab-group{flex-direction:row}:host([orientation=vertical]) .tab-group__nav{flex-direction:column}:host([variant=solid]) .tab-group__nav{gap:var(--sgds-gap-xs)}`;

  /**
   * @summary Tab Group organizes content into a container with the syncing of tab and their corresponding panels.
   * Each tab must be slotted into the nav slot and its `panel` must refer to a tab panel of the same name.
   *
   * @slot default - The slot for `sgds-tab-panel`
   * @slot nav - The slot for `sgds-tab`
   *
   * @event sgds-tab-show  Emitted when a tab and its panels are shown
   * @event sgds-tab-hide  Emitted when a tab and its panels are hidden.
   *
   */
  class SgdsTabGroup extends SgdsElement {
      constructor() {
          super(...arguments);
          this._tabs = [];
          this._panels = [];
          /** The variant of tabs. Controls the visual styles of all `sgds-tabs` in its slot. It also sets the variant atttribute of `sgds-tab` */
          this.variant = "underlined";
          /** The orientation of tabs. Controls the orientation of all `sgds-tabs` in its slot. It also sets the orientation attribute of `sgds-tab` */
          this.orientation = "horizontal";
          /** The density of tabs. Controls the density of all `sgds-tabs` in its slot. It also sets the density attribute of `sgds-tab` */
          this.density = "default";
      }
      connectedCallback() {
          const whenAllDefined = Promise.all([
              customElements.whenDefined("sgds-tab"),
              customElements.whenDefined("sgds-tab-panel")
          ]);
          super.connectedCallback();
          this._resizeObserver = new ResizeObserver(() => {
              return;
          });
          this._mutationObserver = new MutationObserver(mutations => {
              // Update aria labels when the DOM changes
              if (mutations.some(m => !["aria-labelledby", "aria-controls"].includes(m.attributeName))) {
                  setTimeout(() => this._setAriaLabels());
              }
              // Sync tabs when disabled states change
              if (mutations.some(m => m.attributeName === "disabled")) {
                  this._syncTabsAndPanels();
              }
          });
          this.updateComplete.then(() => {
              this._syncTabsAndPanels();
              this._mutationObserver.observe(this, { attributes: true, childList: true, subtree: true });
              this._resizeObserver.observe(this._nav);
              whenAllDefined.then(() => {
                  // Set initial tab state when the tabs first become visible
                  const intersectionObserver = new IntersectionObserver((entries, observer) => {
                      var _a;
                      if (entries[0].intersectionRatio > 0) {
                          this._setAriaLabels();
                          // this.setTabVariant();
                          this._setActiveTab((_a = this._getActiveTab()) !== null && _a !== void 0 ? _a : this._tabs[0], { emitEvents: false });
                          observer.unobserve(entries[0].target);
                      }
                  });
                  intersectionObserver.observe(this._tabGroup);
              });
          });
      }
      disconnectedCallback() {
          this._mutationObserver.disconnect();
          this._resizeObserver.unobserve(this._nav);
      }
      /** Shows the specified tab panel. */
      show(panel) {
          const tab = this._tabs.find(el => el.panel === panel);
          if (tab) {
              this._setActiveTab(tab);
          }
      }
      _getAllTabs(options = { includeDisabled: true }) {
          const slot = this.shadowRoot.querySelector('slot[name="nav"]');
          return [...slot.assignedElements()].filter(el => {
              return options.includeDisabled
                  ? el.tagName.toLowerCase() === "sgds-tab"
                  : el.tagName.toLowerCase() === "sgds-tab" && !el.disabled;
          });
      }
      _getAllPanels() {
          return [...this._body.assignedElements()].filter(el => el.tagName.toLowerCase() === "sgds-tab-panel");
      }
      _getActiveTab() {
          return this._tabs.find(el => el.active);
      }
      _handleClick(event) {
          const target = event.target;
          const tab = target.closest("sgds-tab");
          const tabGroup = tab === null || tab === void 0 ? void 0 : tab.closest("sgds-tab-group");
          // Ensure the target tab is in this tab group
          if (tabGroup !== this) {
              return;
          }
          if (tab !== null) {
              this._setActiveTab(tab);
          }
      }
      _handleKeyDown(event) {
          const target = event.target;
          const tab = target.closest("sgds-tab");
          const tabGroup = tab === null || tab === void 0 ? void 0 : tab.closest("sgds-tab-group");
          // Ensure the target tab is in this tab group
          if (tabGroup !== this) {
              return;
          }
          // Activate a tab
          if (["Enter", " "].includes(event.key)) {
              if (tab !== null) {
                  this._setActiveTab(tab);
                  event.preventDefault();
              }
          }
          // Move focus left or right
          if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
              const activeEl = this._tabs.find(t => t.matches(":focus"));
              if ((activeEl === null || activeEl === void 0 ? void 0 : activeEl.tagName.toLowerCase()) === "sgds-tab") {
                  let index = this._tabs.indexOf(activeEl);
                  if (event.key === "Home") {
                      index = 0;
                  }
                  else if (event.key === "End") {
                      index = this._tabs.length - 1;
                  }
                  else if (event.key === "ArrowUp" || event.key === "ArrowLeft") {
                      index--;
                  }
                  else if (event.key === "ArrowDown" || event.key === "ArrowRight") {
                      index++;
                  }
                  if (index < 0) {
                      index = this._tabs.length - 1;
                  }
                  if (index > this._tabs.length - 1) {
                      index = 0;
                  }
                  this._tabs[index].focus({ preventScroll: true });
                  this._setActiveTab(this._tabs[index] /** , { scrollBehavior: "smooth" }*/);
                  event.preventDefault();
              }
          }
      }
      _setActiveTab(tab, options) {
          options = Object.assign({ emitEvents: true }, options);
          if (tab !== this._activeTab && !tab.disabled) {
              const previousTab = this._activeTab;
              this._activeTab = tab;
              // Sync active tab and panel
              this._tabs.forEach(el => {
                  el.active = el === this._activeTab ? true : false;
              });
              this._panels.map(el => { var _a; return (el.active = el.name === ((_a = this._activeTab) === null || _a === void 0 ? void 0 : _a.panel)); });
              // Emit events
              if (options.emitEvents) {
                  if (previousTab) {
                      this.emit("sgds-tab-hide", { detail: { name: previousTab.panel } });
                  }
                  this.emit("sgds-tab-show", { detail: { name: this._activeTab.panel } });
              }
          }
      }
      _setAriaLabels() {
          // Link each tab with its corresponding panel
          this._tabs.forEach(tab => {
              const panel = this._panels.find(el => el.name === tab.panel);
              if (panel) {
                  tab.setAttribute("aria-controls", panel.getAttribute("id"));
                  panel.setAttribute("aria-labelledby", tab.getAttribute("id"));
              }
          });
      }
      // This stores tabs and panels so we can refer to a cache instead of calling querySelectorAll() multiple times.
      _syncTabsAndPanels() {
          this._tabs = this._getAllTabs({ includeDisabled: false });
          this._panels = this._getAllPanels();
      }
      _updateTabsAttribute(name) {
          if (!this._navSlot)
              return;
          const tabs = this._navSlot;
          tabs.forEach(tab => {
              tab.setAttribute(name, this[name]);
          });
      }
      _handleSlotChange() {
          this._updateTabsAttribute("variant");
          this._updateTabsAttribute("orientation");
          this._updateTabsAttribute("density");
          this._syncTabsAndPanels();
      }
      willUpdate(_changedProperties) {
          // similar to @watch
          if (_changedProperties.has("variant")) {
              this._updateTabsAttribute("variant");
          }
          if (_changedProperties.has("orientation")) {
              this._updateTabsAttribute("orientation");
          }
          if (_changedProperties.has("density")) {
              this._updateTabsAttribute("density");
          }
      }
      render() {
          return html$1 `
      <div class="tab-group" @click=${this._handleClick} @keydown=${this._handleKeyDown}>
        <div class="tab-group__nav" role="tablist">
          <slot name="nav" @slotchange=${this._handleSlotChange}></slot>
        </div>
        <div class="tab-group__content">
          <slot class="tab-group__body" @slotchange=${this._syncTabsAndPanels}></slot>
        </div>
      </div>
    `;
      }
  }
  SgdsTabGroup.styles = [...SgdsElement.styles, css_248z$7];
  __decorate([
      query(".tab-group")
  ], SgdsTabGroup.prototype, "_tabGroup", void 0);
  __decorate([
      query(".tab-group__body")
  ], SgdsTabGroup.prototype, "_body", void 0);
  __decorate([
      query(".tab-group__nav")
  ], SgdsTabGroup.prototype, "_nav", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTabGroup.prototype, "variant", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTabGroup.prototype, "orientation", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTabGroup.prototype, "density", void 0);
  __decorate([
      queryAssignedElements({ slot: "nav", flatten: true })
  ], SgdsTabGroup.prototype, "_navSlot", void 0);

  var css_248z$6 = css`.tab-panel{display:block}.tab-panel:not(.tab-panel--active){display:none}`;

  let id = 0;
  /**
   * @summary Tab panels are used inside tab groups to display tabbed content.
   * @slot - The tab panel's content.
   *
   */
  class SgdsTabPanel extends SgdsElement {
      constructor() {
          super(...arguments);
          this.attrId = ++id;
          this.componentId = `sgds-tab-panel-${this.attrId}`;
          /** The tab panel's name. */
          this.name = "";
          /** When true, the tab panel will be shown. When used with tab-group, this property is already being managed */
          this.active = false;
      }
      connectedCallback() {
          super.connectedCallback();
          this.id = this.id.length > 0 ? this.id : this.componentId;
          this.setAttribute("role", "tabpanel");
      }
      _handleActiveChange() {
          this.setAttribute("aria-hidden", this.active ? "false" : "true");
      }
      render() {
          return html$1 `
      <slot
        class=${classMap({
            "tab-panel": true,
            "tab-panel--active": this.active
        })}
      ></slot>
    `;
      }
  }
  SgdsTabPanel.styles = [...SgdsElement.styles, css_248z$6];
  __decorate([
      property({ reflect: true })
  ], SgdsTabPanel.prototype, "name", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTabPanel.prototype, "active", void 0);
  __decorate([
      watch("active")
  ], SgdsTabPanel.prototype, "_handleActiveChange", null);

  register("sgds-tab", SgdsTab);
  register("sgds-tab-group", SgdsTabGroup);
  register("sgds-tab-panel", SgdsTabPanel);

  var css_248z$5 = css`tbody,td,th,thead,tr{border:var(--sgds-border-width-0) solid;border-color:inherit}th{text-align:-webkit-match-parent}table{border-collapse:collapse;caption-side:bottom}.table{border-color:var(--sgds-border-color-default);vertical-align:top;width:100%}.table>:not(caption) td,.table>:not(caption) th{border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-muted);padding:var(--sgds-padding-lg)}.table>tbody{vertical-align:inherit}.table>thead{vertical-align:bottom}.table>thead th{border-bottom:var(--sgds-border-width-1) solid var(--sgds-border-color-emphasis)}.table-group-divider{border-top:calc(var(--sgds-border-width)*2) solid}.table>:not(:first-child){border-top:var(--sgds-border-width-1) solid var(--sgds-border-color-emphasis)}.table-responsive{-webkit-overflow-scrolling:touch;overflow-x:auto}@media (max-width:575.98px){.table-responsive-sm{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media (max-width:767.98px){.table-responsive-md{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media (max-width:991.98px){.table-responsive-lg{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media (max-width:1199.98px){.table-responsive-xl{-webkit-overflow-scrolling:touch;overflow-x:auto}}@media (max-width:1399.98px){.table-responsive-xxl{-webkit-overflow-scrolling:touch;overflow-x:auto}}`;

  /**
   * @summary The use of a table is to organise a collections of data into readable rows
   */
  class SgdsTable extends SgdsElement {
      constructor() {
          super(...arguments);
          /**
           * Populate row header cells using Arrays
           */
          this.rowHeader = [];
          /**
           * Populate column header cells using Arrays only when <code>headerPosition="vertical"</code> or <code>headerPosition="both"</code>
           */
          this.columnHeader = [];
          /**
           * Populate data cells using Arrays
           */
          this.tableData = [];
          /**
           * Defines the placement of headers in the table (horizontal, vertical, or both)
           */
          this.headerPosition = "horizontal";
          /** @internal */
          this.originalTableData = [];
      }
      connectedCallback() {
          super.connectedCallback();
          this.originalTableData = [...this.tableData];
      }
      _renderTable() {
          if (this.headerPosition === "horizontal") {
              return html$1 `
        <thead>
          <tr>
            ${this.rowHeader.map((header, index) => html$1 ` <th>${header}</th> `)}
          </tr>
        </thead>
        <tbody>
          ${this.tableData.map(row => html$1 `
              <tr>
                ${row.map((cell) => html$1 `<td>${cell}</td>`)}
              </tr>
            `)}
        </tbody>
      `;
          }
          if (this.headerPosition === "both") {
              return html$1 `
        <thead>
          <tr>
            <th></th>
            ${this.rowHeader.map((header, index) => html$1 ` <th>${header}</th> `)}
          </tr>
        </thead>
        <tbody>
          ${this.tableData.map((row, index) => html$1 `
              <tr>
                <th>${this.columnHeader[index]}</th>
                ${row.map((cell) => html$1 `<td>${cell}</td>`)}
              </tr>
            `)}
        </tbody>
      `;
          }
          if (this.headerPosition === "vertical") {
              const flippedTableData = this.tableData[0].map((_, colIndex) => this.tableData.map(row => row[colIndex]));
              return html$1 `
        ${flippedTableData.map((row, index) => html$1 `
            <tr>
              <th>${this.columnHeader[index]}</th>
              ${row.map((cell) => html$1 `<td>${cell}</td>`)}
            </tr>
          `)}
      `;
          }
      }
      render() {
          return html$1 `
      <div
        class=${classMap({
            "table-responsive": this.responsive === "always",
            "table-responsive-sm": this.responsive === "sm",
            "table-responsive-md": this.responsive === "md",
            "table-responsive-lg": this.responsive === "lg",
            "table-responsive-xl": this.responsive === "xl"
        })}
        tabindex="0"
      >
        <table class="table">
          ${this._renderTable()}
        </table>
      </div>
    `;
      }
  }
  SgdsTable.styles = [...SgdsElement.styles, css_248z$5];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTable.prototype, "responsive", void 0);
  __decorate([
      property({ type: Array })
  ], SgdsTable.prototype, "rowHeader", void 0);
  __decorate([
      property({ type: Array })
  ], SgdsTable.prototype, "columnHeader", void 0);
  __decorate([
      property({ type: Array })
  ], SgdsTable.prototype, "tableData", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTable.prototype, "headerPosition", void 0);
  __decorate([
      state()
  ], SgdsTable.prototype, "originalTableData", void 0);

  register("sgds-table", SgdsTable);

  var css_248z$4 = css`.form-control-container{display:flex;flex-direction:column;gap:var(--sgds-form-gap-md)}.form-control-container.disabled{opacity:var(--sgds-opacity-50)}textarea{font-family:inherit;font-size:inherit;line-height:inherit;margin:0;resize:vertical}.form-control{appearance:none;background-clip:padding-box;background-color:var(--sgds-form-surface-default);border:var(--sgds-form-border-width-default) solid var(--sgds-border-color-default);border-radius:var(--sgds-form-border-radius-md);color:var(--sgds-form-color-default);min-height:var(--sgds-dimension-136);outline:0;padding:var(--sgds-form-padding-y) var(--sgds-form-padding-x);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;width:100%}.form-control[readonly]{border-color:var(--sgds-border-color-muted)}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control:not([disabled]):not(.is-invalid):hover{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis)}.form-control:not([disabled]):not(.is-invalid):focus,.form-control:not([disabled]):not(.is-invalid):focus-visible{border:var(--sgds-form-border-width-thick) solid var(--sgds-border-color-emphasis);box-shadow:var(--sgds-form-box-shadow-focus)}.form-control.is-invalid{border:var(--sgds-form-border-width-thick) solid var(--sgds-form-danger-border-color-default)}.form-control:disabled{background-color:var(--sgds-form-surface-muted)}.textarea-resize-none{resize:none}.textarea-resize-vertical{resize:vertical}.textarea-resize-auto{height:auto;overflow-y:hidden;resize:none}.textarea-info-container{display:flex;justify-content:space-between}.word-count{margin-left:auto}`;

  /**
   * @summary Text areas allow for the collection of input longer than a single line.
   *
   * @slot invalidIcon - The slot for invalid icon
   *
   * @event sgds-change - Emitted when an alteration to the control's value is committed by the user.
   * @event sgds-input - Emitted when the control receives input and its value changes.
   * @event sgds-focus - Emitted when textarea is in focus.
   * @event sgds-blur - Emitted when textarea loses focus.
   */
  class SgdsTextarea extends SgdsFormValidatorMixin(FormControlElement) {
      constructor() {
          super(...arguments);
          /**The textarea's value attribute. */
          this.value = "";
          /**Enables spell checking on the textarea */
          this.spellcheck = false;
          /** The number of rows to display by default. */
          this.rows = 4;
          /**The textarea's placeholder text. */
          this.placeholder = "Placeholder";
          /** Custom feedback text for error state when validated */
          this.invalidFeedback = "";
          /**Autofocus the textarea */
          this.autofocus = false;
          /** Makes the textarea readonly. */
          this.readonly = false;
          /** Controls how the textarea can be resized. */
          this.resize = "vertical";
          /** @internal Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
          this.defaultValue = "";
          /** Allows invalidFeedback, invalid and valid styles to be visible with the input */
          this.hasFeedback = false;
          /** Makes the textarea as a required field. */
          this.required = false;
          /** The textarea's hint text */
          this.hintText = "";
          this._isTouched = false;
      }
      /** Sets focus on the textarea. */
      focus(options) {
          this.textarea.focus(options);
      }
      /** Sets blur on the textarea. */
      blur() {
          this.textarea.blur();
      }
      /**
       * Checks for validity. Under the hood, HTMLFormElement's reportValidity method calls this method to check for component's validity state
       * Note that the native error popup is prevented for SGDS form components by default. Instead the validation message shows up in the feedback container of SgdsInput
       */
      reportValidity() {
          return this._mixinReportValidity();
      }
      /**
       * Checks for validity without any native error popup message
       */
      checkValidity() {
          return this._mixinCheckValidity();
      }
      /**
       * Returns the ValidityState object
       */
      get validity() {
          return this._mixinGetValidity();
      }
      /**
       * Returns the validation message based on the ValidityState
       */
      get validationMessage() {
          return this._mixinGetValidationMessage();
      }
      /** Selects all the text in the textarea. */
      select() {
          this.textarea.select();
      }
      _handleInvalid(e) {
          e.preventDefault();
          this.invalid = true;
      }
      _handleChange(e) {
          this.value = this.input.value;
          this.emit("sgds-change");
          super._mixinHandleChange(e);
      }
      _handleInputChange(e) {
          this.value = this.input.value;
          this.emit("sgds-input");
          super._mixinHandleInputChange(e);
      }
      _handleFocus() {
          this.emit("sgds-focus");
      }
      _handleBlur() {
          this._isTouched = true;
          this.emit("sgds-blur");
      }
      /** @internal */
      _handleRowsChange() {
          this._setTextareaHeight();
      }
      _setTextareaHeight() {
          if (this.resize === "auto") {
              this.textarea.style.height = "auto";
              this.textarea.style.height = `${this.textarea.scrollHeight}px`;
          }
          else {
              this.textarea.style.height = undefined;
          }
      }
      /** @internal */
      _handleIsTouched() {
          if (this._isTouched) {
              this.invalid = !this.textarea.checkValidity();
          }
      }
      /** @internal */
      _handleDisabledChange() {
          // Disabled form controls are always valid, so we need to recheck validity when the state changes
          this.setInvalid(false);
      }
      /** @internal */
      _handleValueChange() {
          this.updateComplete.then(() => this._setTextareaHeight());
      }
      _renderHintText() {
          const hintTextTemplate = html ` <div id="${this._controlId}Help" class="form-text">${this.hintText}</div> `;
          return this.hintText && hintTextTemplate;
      }
      _wordCount() {
          return html `
      <div
        class="form-text word-count ${classMap({
            "invalid-feedback": this.invalid && this.hasFeedback
        })}"
      >
        ${this.value.length}/${this.maxlength}
      </div>
    `;
      }
      render() {
          return html `
      <div
        class="form-control-container ${classMap({
            disabled: this.disabled
        })}"
      >
        <label for=${this._controlId} class="form-label">${this.label}</label>
        <textarea
          class=${classMap({
            "form-control": true,
            "is-invalid": this.hasFeedback && this.invalid,
            "textarea-resize-none": this.resize === "none",
            "textarea-resize-vertical": this.resize === "vertical",
            "textarea-resize-auto": this.resize === "auto"
        })}
          id=${this._controlId}
          name=${ifDefined(this.name)}
          rows=${ifDefined(this.rows)}
          placeholder=${ifDefined(this.placeholder)}
          minlength=${ifDefined(this.minlength)}
          maxlength=${ifDefined(this.maxlength)}
          .value=${live(this.value)}
          aria-invalid=${this.invalid ? "true" : "false"}
          spellcheck=${ifDefined(this.spellcheck)}
          ?disabled=${this.disabled}
          ?readonly=${this.readonly}
          ?required=${this.required}
          ?autofocus=${this.autofocus}
          autocorrect=${ifDefined(this.autocorrect)}
          inputmode=${ifDefined(this.inputmode)}
          @input=${(e) => this._handleInputChange(e)}
          @change=${(e) => this._handleChange(e)}
          @invalid=${(e) => this._handleInvalid(e)}
          @focus=${this._handleFocus}
          @blur=${this._handleBlur}
        ></textarea>
        <div class="textarea-info-container">
          ${this.invalid && this.hasFeedback
            ? html `
                <div class="invalid-feedback-container">
                  <sgds-icon name="exclamation-circle-fill" size="md"></sgds-icon>
                  <div id="${this._controlId}-invalid" class="invalid-feedback">
                    ${this.invalidFeedback ? this.invalidFeedback : this.input.validationMessage}
                  </div>
                </div>
              `
            : html `${this._renderHintText()}`}
          ${this.maxlength > 0 ? this._wordCount() : nothing}
        </div>
      </div>
    `;
      }
  }
  SgdsTextarea.styles = [...FormControlElement.styles, css_248z$4];
  __decorate([
      query("textarea.form-control")
  ], SgdsTextarea.prototype, "textarea", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "name", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "value", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsTextarea.prototype, "minlength", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsTextarea.prototype, "maxlength", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTextarea.prototype, "spellcheck", void 0);
  __decorate([
      property({ type: Number })
  ], SgdsTextarea.prototype, "rows", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "placeholder", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "invalidFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTextarea.prototype, "autofocus", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTextarea.prototype, "readonly", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "resize", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "inputmode", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsTextarea.prototype, "autocorrect", void 0);
  __decorate([
      defaultValue()
  ], SgdsTextarea.prototype, "defaultValue", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTextarea.prototype, "hasFeedback", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsTextarea.prototype, "required", void 0);
  __decorate([
      property({ reflect: true })
  ], SgdsTextarea.prototype, "hintText", void 0);
  __decorate([
      state()
  ], SgdsTextarea.prototype, "_isTouched", void 0);
  __decorate([
      watch("rows", { waitUntilFirstUpdate: true })
  ], SgdsTextarea.prototype, "_handleRowsChange", null);
  __decorate([
      watch("_isTouched", { waitUntilFirstUpdate: true })
  ], SgdsTextarea.prototype, "_handleIsTouched", null);
  __decorate([
      watch("disabled", { waitUntilFirstUpdate: true })
  ], SgdsTextarea.prototype, "_handleDisabledChange", null);
  __decorate([
      watch("value", { waitUntilFirstUpdate: true })
  ], SgdsTextarea.prototype, "_handleValueChange", null);

  register("sgds-textarea", SgdsTextarea);

  var css_248z$3 = css`:host([variant=info]) slot[name=icon]::slotted(*){color:var(--sgds-primary-color-default)}:host([variant=success]) slot[name=icon]::slotted(*){color:var(--sgds-success-color-default)}:host([variant=danger]) slot[name=icon]::slotted(*){color:var(--sgds-danger-color-default)}:host([variant=warning]) slot[name=icon]::slotted(*){color:var(--sgds-warning-color-fixed-light)}.toast{align-items:flex-start;background-clip:padding-box;background-color:var(--sgds-surface-default);border-radius:var(--sgds-border-radius-md);box-shadow:0 0 2px 0 rgba(0,0,0,.12),0 8px 16px 0 rgba(0,0,0,.14);display:flex;flex-direction:row;gap:var(--sgds-gap-xs);max-width:var(--sgds-dimension-480);min-width:var(--sgds-dimension-320);padding:var(--sgds-padding-md);pointer-events:auto;width:320px}.toast-content{word-wrap:break-word;gap:var(--sgds-gap-sm)}.toast-body,.toast-content{display:flex;flex-direction:column}.toast-body strong{line-height:var(--sgds-line-height-min)}.toast-body span{color:var(--sgds-color-subtle)}.toast-action{word-wrap:break-word;color:var(--sgds-link-color-default)}.toast-header strong{margin-right:auto;word-break:break-all}.close-btn{margin-left:auto}.d-none{display:none}`;

  /**
   * @summary Toast allows you to convey quick messaging notifications to the user.
   *
   * @slot default - The content to pass into toast's body
   * @slot action - The content to pass into toast's action
   * @slot icon - The icon in toast
   *
   * @event sgds-show - Emitted on show.
   * @event sgds-after-show - Emitted on show after animation has completed.
   * @event sgds-hide - Emitted on hide.
   * @event sgds-after-hide - Emitted on hide after animation has completed.
   *
   */
  class SgdsToast extends SgdsElement {
      constructor() {
          super(...arguments);
          /** Controls the appearance of toast */
          this.show = false;
          /** The header title of toast. It is required to assign a title to toast */
          this.title = "Title";
          /** Controls whether the toast has fade animation during its appearance/disappearance */
          this.noAnimation = false;
          /** Controls if the toast will hide itself after the delay time. Works with delay property */
          this.autohide = false;
          /** The amount of time taken in miliseconds for toast to disappear after its first render. It takes effect only when autohide is set to true. Defaults to 5000ms */
          this.delay = 5000;
          /**The variant styles of toast */
          this.variant = "info";
          /** Controls whether or not the Toast is dismissible */
          this.dismissible = false;
      }
      /** Shows the toast */
      async showToast() {
          if (this.show) {
              return;
          }
          this.show = true;
          return waitForEvent(this, "sgds-after-show");
      }
      /** Hide the toast */
      async hideToast() {
          if (!this.show) {
              return;
          }
          this.show = false;
          return waitForEvent(this, "sgds-after-hide");
      }
      /** @internal */
      handleCloseClick() {
          this.show = false;
          this.emit("sgds-close");
      }
      /**@internal */
      async handleShowChange() {
          if (this.show) {
              this.emit("sgds-show");
              this.toast.classList.remove("d-none");
              const toastAnimation = getAnimation(this, "toast.show");
              if (!this.noAnimation) {
                  await animateTo(this.toast, toastAnimation.keyframes, toastAnimation.options);
              }
              this.emit("sgds-after-show");
          }
          else {
              this.emit("sgds-hide");
              const toastAnimation = getAnimation(this, "toast.hide");
              if (!this.noAnimation) {
                  await animateTo(this.toast, toastAnimation.keyframes, toastAnimation.options);
              }
              this.toast.classList.add("d-none");
              this.emit("sgds-after-hide");
          }
      }
      firstUpdated() {
          var _a;
          if (!this.show) {
              this.toast.classList.add("d-none");
          }
          if (this._actionNodes.length === 0) {
              return (_a = this.shadowRoot.querySelector("slot[name='action']")) === null || _a === void 0 ? void 0 : _a.classList.add("d-none");
          }
      }
      render() {
          if (this.autohide && this.show) {
              setTimeout(() => {
                  this.show = false;
              }, this.delay);
          }
          return html$1 `
      <div
        class="toast"
        role="alert"
        aria-hidden=${this.show ? "false" : "true"}
        aria-live="assertive"
        aria-atomic="true"
      >
        <slot name="icon"></slot>
        <div class="toast-content">
          <div class="toast-body">
            <strong>${this.title}</strong>
            <span><slot></slot></span>
          </div>
          <slot class="toast-action" name="action"></slot>
        </div>
        ${this.dismissible
            ? html$1 `<sgds-close-button
              class="close-btn"
              ariaLabel="close toast"
              @click=${this.handleCloseClick}
            ></sgds-close-button>`
            : nothing}
      </div>
    `;
      }
  }
  SgdsToast.styles = [...SgdsElement.styles, css_248z$3];
  /**@internal */
  SgdsToast.dependencies = {
      "sgds-close-button": SgdsCloseButton
  };
  __decorate([
      query("div.toast")
  ], SgdsToast.prototype, "toast", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsToast.prototype, "show", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsToast.prototype, "title", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsToast.prototype, "noAnimation", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsToast.prototype, "autohide", void 0);
  __decorate([
      property({ type: Number, reflect: true })
  ], SgdsToast.prototype, "delay", void 0);
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsToast.prototype, "variant", void 0);
  __decorate([
      property({ type: Boolean, reflect: true })
  ], SgdsToast.prototype, "dismissible", void 0);
  __decorate([
      watch("show", { waitUntilFirstUpdate: true })
  ], SgdsToast.prototype, "handleShowChange", null);
  __decorate([
      queryAssignedNodes({ slot: "action", flatten: true })
  ], SgdsToast.prototype, "_actionNodes", void 0);
  setDefaultAnimation("toast.show", {
      keyframes: [{ opacity: 0 }, { opacity: 1 }],
      options: { duration: 400, easing: "ease" }
  });
  setDefaultAnimation("toast.hide", {
      keyframes: [{ opacity: 1 }, { opacity: 0 }],
      options: { duration: 400, easing: "ease" }
  });

  var css_248z$2 = css`.toast-container{max-width:100%;pointer-events:none;position:fixed;width:max-content;z-index:1090}.top-start{left:0;top:0}.top-center{left:50%;top:0;transform:translateX(-50%)}.top-end{right:0;top:0}.middle-start{left:0;top:50%;transform:translateY(-50%)}.middle-center{left:50%;top:50%;transform:translate(-50%,-50%)}.middle-end{right:0;top:50%;transform:translateY(-50%)}.bottom-start{bottom:0;left:0}.bottom-center{bottom:0;left:50%;transform:translateX(-50%)}.bottom-end{bottom:0;right:0}slot{display:flex;flex-direction:column;gap:.5rem}`;

  /**
   * @summary ToastContainer is the container component to position `sgds-toast` in screen. When there is multiple toasts in the container, the toast components are stacked vertically.
   *
   * @slot default - The slot for `sgds-toast` elements
   *
   */
  class SgdsToastContainer extends SgdsElement {
      render() {
          return html `
      <div
        class=${classMap({
            "sgds toast-container": true,
            [this.position]: this.position
        })}
      >
        <slot></slot>
      </div>
    `;
      }
  }
  SgdsToastContainer.styles = [css_248z$2];
  __decorate([
      property({ type: String, reflect: true })
  ], SgdsToastContainer.prototype, "position", void 0);

  register("sgds-toast", SgdsToast);
  register("sgds-toast-container", SgdsToastContainer);

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  // js-docs-start allow-list
  const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;

  const DefaultAllowlist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    dd: [],
    div: [],
    dl: [],
    dt: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  // js-docs-end allow-list

  const uriAttributes = new Set([
    'background',
    'cite',
    'href',
    'itemtype',
    'longdesc',
    'poster',
    'src',
    'xlink:href'
  ]);

  /**
   * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation
   * contexts.
   *
   * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38
   */
  // eslint-disable-next-line unicorn/better-regex
  const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;

  const allowedAttribute = (attribute, allowedAttributeList) => {
    const attributeName = attribute.nodeName.toLowerCase();

    if (allowedAttributeList.includes(attributeName)) {
      if (uriAttributes.has(attributeName)) {
        return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue))
      }

      return true
    }

    // Check if a regular expression validates the attribute.
    return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp)
      .some(regex => regex.test(attributeName))
  };

  function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
    if (!unsafeHtml.length) {
      return unsafeHtml
    }

    if (sanitizeFunction && typeof sanitizeFunction === 'function') {
      return sanitizeFunction(unsafeHtml)
    }

    const domParser = new window.DOMParser();
    const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    const elements = [].concat(...createdDocument.body.querySelectorAll('*'));

    for (const element of elements) {
      const elementName = element.nodeName.toLowerCase();

      if (!Object.keys(allowList).includes(elementName)) {
        element.remove();
        continue
      }

      const attributeList = [].concat(...element.attributes);
      const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || []);

      for (const attribute of attributeList) {
        if (!allowedAttribute(attribute, allowedAttributes)) {
          element.removeAttribute(attribute.nodeName);
        }
      }
    }

    return createdDocument.body.innerHTML
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/template-factory.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const NAME$1 = 'TemplateFactory';

  const Default$1 = {
    allowList: DefaultAllowlist,
    content: {}, // { selector : text ,  selector2 : text2 , }
    extraClass: '',
    html: false,
    sanitize: true,
    sanitizeFn: null,
    template: '<div></div>'
  };

  const DefaultType$1 = {
    allowList: 'object',
    content: 'object',
    extraClass: '(string|function)',
    html: 'boolean',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    template: 'string'
  };

  const DefaultContentType = {
    entry: '(string|element|function|null)',
    selector: '(string|element)'
  };

  /**
   * Class definition
   */

  class TemplateFactory extends Config {
    constructor(config) {
      super();
      this._config = this._getConfig(config);
    }

    // Getters
    static get Default() {
      return Default$1
    }

    static get DefaultType() {
      return DefaultType$1
    }

    static get NAME() {
      return NAME$1
    }

    // Public
    getContent() {
      return Object.values(this._config.content)
        .map(config => this._resolvePossibleFunction(config))
        .filter(Boolean)
    }

    hasContent() {
      return this.getContent().length > 0
    }

    changeContent(content) {
      this._checkContent(content);
      this._config.content = { ...this._config.content, ...content };
      return this
    }

    toHtml() {
      const templateWrapper = document.createElement('div');
      templateWrapper.innerHTML = this._maybeSanitize(this._config.template);

      for (const [selector, text] of Object.entries(this._config.content)) {
        this._setContent(templateWrapper, text, selector);
      }

      const template = templateWrapper.children[0];
      const extraClass = this._resolvePossibleFunction(this._config.extraClass);

      if (extraClass) {
        template.classList.add(...extraClass.split(' '));
      }

      return template
    }

    // Private
    _typeCheckConfig(config) {
      super._typeCheckConfig(config);
      this._checkContent(config.content);
    }

    _checkContent(arg) {
      for (const [selector, content] of Object.entries(arg)) {
        super._typeCheckConfig({ selector, entry: content }, DefaultContentType);
      }
    }

    _setContent(template, content, selector) {
      const templateElement = SelectorEngine.findOne(selector, template);

      if (!templateElement) {
        return
      }

      content = this._resolvePossibleFunction(content);

      if (!content) {
        templateElement.remove();
        return
      }

      if (isElement(content)) {
        this._putElementInTemplate(getElement(content), templateElement);
        return
      }

      if (this._config.html) {
        templateElement.innerHTML = this._maybeSanitize(content);
        return
      }

      templateElement.textContent = content;
    }

    _maybeSanitize(arg) {
      return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg
    }

    _resolvePossibleFunction(arg) {
      return execute(arg, [this])
    }

    _putElementInTemplate(element, templateElement) {
      if (this._config.html) {
        templateElement.innerHTML = '';
        templateElement.append(element);
        return
      }

      templateElement.textContent = element.textContent;
    }
  }

  /**
   * --------------------------------------------------------------------------
   * Bootstrap tooltip.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * Constants
   */

  const NAME = 'tooltip';
  const DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn']);

  const CLASS_NAME_FADE = 'fade';
  const CLASS_NAME_MODAL = 'modal';
  const CLASS_NAME_SHOW = 'show';

  const SELECTOR_TOOLTIP_INNER = '.tooltip-inner';
  const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;

  const EVENT_MODAL_HIDE = 'hide.bs.modal';

  const TRIGGER_HOVER = 'hover';
  const TRIGGER_FOCUS = 'focus';
  const TRIGGER_CLICK = 'click';
  const TRIGGER_MANUAL = 'manual';

  const EVENT_HIDE = 'hide';
  const EVENT_HIDDEN = 'hidden';
  const EVENT_SHOW = 'show';
  const EVENT_SHOWN = 'shown';
  const EVENT_INSERTED = 'inserted';
  const EVENT_CLICK = 'click';
  const EVENT_FOCUSIN = 'focusin';
  const EVENT_FOCUSOUT = 'focusout';
  const EVENT_MOUSEENTER = 'mouseenter';
  const EVENT_MOUSELEAVE = 'mouseleave';

  const AttachmentMap = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: isRTL() ? 'left' : 'right',
    BOTTOM: 'bottom',
    LEFT: isRTL() ? 'right' : 'left'
  };

  const Default = {
    allowList: DefaultAllowlist,
    animation: true,
    boundary: 'clippingParents',
    container: false,
    customClass: '',
    delay: 0,
    fallbackPlacements: ['top', 'right', 'bottom', 'left'],
    html: false,
    offset: [0, 6],
    placement: 'top',
    popperConfig: null,
    sanitize: true,
    sanitizeFn: null,
    selector: false,
    template: '<div class="tooltip" role="tooltip">' +
              '<div class="tooltip-arrow"></div>' +
              '<div class="tooltip-inner"></div>' +
              '</div>',
    title: '',
    trigger: 'hover focus'
  };

  const DefaultType = {
    allowList: 'object',
    animation: 'boolean',
    boundary: '(string|element)',
    container: '(string|element|boolean)',
    customClass: '(string|function)',
    delay: '(number|object)',
    fallbackPlacements: 'array',
    html: 'boolean',
    offset: '(array|string|function)',
    placement: '(string|function)',
    popperConfig: '(null|object|function)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    selector: '(string|boolean)',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string'
  };

  /**
   * Class definition
   */

  class Tooltip extends BaseComponent {
    constructor(element, config) {
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper (https://popper.js.org)')
      }

      super(element, config);

      // Private
      this._isEnabled = true;
      this._timeout = 0;
      this._isHovered = null;
      this._activeTrigger = {};
      this._popper = null;
      this._templateFactory = null;
      this._newContent = null;

      // Protected
      this.tip = null;

      this._setListeners();

      if (!this._config.selector) {
        this._fixTitle();
      }
    }

    // Getters
    static get Default() {
      return Default
    }

    static get DefaultType() {
      return DefaultType
    }

    static get NAME() {
      return NAME
    }

    // Public
    enable() {
      this._isEnabled = true;
    }

    disable() {
      this._isEnabled = false;
    }

    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }

    toggle() {
      if (!this._isEnabled) {
        return
      }

      this._activeTrigger.click = !this._activeTrigger.click;
      if (this._isShown()) {
        this._leave();
        return
      }

      this._enter();
    }

    dispose() {
      clearTimeout(this._timeout);

      EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);

      if (this._element.getAttribute('data-bs-original-title')) {
        this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'));
      }

      this._disposePopper();
      super.dispose();
    }

    show() {
      if (this._element.style.display === 'none') {
        throw new Error('Please use show on visible elements')
      }

      if (!(this._isWithContent() && this._isEnabled)) {
        return
      }

      const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW));
      const shadowRoot = findShadowRoot(this._element);
      const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);

      if (showEvent.defaultPrevented || !isInTheDom) {
        return
      }

      // TODO: v6 remove this or make it optional
      this._disposePopper();

      const tip = this._getTipElement();

      this._element.setAttribute('aria-describedby', tip.getAttribute('id'));

      const { container } = this._config;

      if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
        container.append(tip);
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
      }

      this._popper = this._createPopper(tip);

      tip.classList.add(CLASS_NAME_SHOW);

      // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
      if ('ontouchstart' in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.on(element, 'mouseover', noop);
        }
      }

      const complete = () => {
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN));

        if (this._isHovered === false) {
          this._leave();
        }

        this._isHovered = false;
      };

      this._queueCallback(complete, this.tip, this._isAnimated());
    }

    hide() {
      if (!this._isShown()) {
        return
      }

      const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE));
      if (hideEvent.defaultPrevented) {
        return
      }

      const tip = this._getTipElement();
      tip.classList.remove(CLASS_NAME_SHOW);

      // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ('ontouchstart' in document.documentElement) {
        for (const element of [].concat(...document.body.children)) {
          EventHandler.off(element, 'mouseover', noop);
        }
      }

      this._activeTrigger[TRIGGER_CLICK] = false;
      this._activeTrigger[TRIGGER_FOCUS] = false;
      this._activeTrigger[TRIGGER_HOVER] = false;
      this._isHovered = null; // it is a trick to support manual triggering

      const complete = () => {
        if (this._isWithActiveTrigger()) {
          return
        }

        if (!this._isHovered) {
          this._disposePopper();
        }

        this._element.removeAttribute('aria-describedby');
        EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN));
      };

      this._queueCallback(complete, this.tip, this._isAnimated());
    }

    update() {
      if (this._popper) {
        this._popper.update();
      }
    }

    // Protected
    _isWithContent() {
      return Boolean(this._getTitle())
    }

    _getTipElement() {
      if (!this.tip) {
        this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
      }

      return this.tip
    }

    _createTipElement(content) {
      const tip = this._getTemplateFactory(content).toHtml();

      // TODO: remove this check in v6
      if (!tip) {
        return null
      }

      tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW);
      // TODO: v6 the following can be achieved with CSS only
      tip.classList.add(`bs-${this.constructor.NAME}-auto`);

      const tipId = getUID(this.constructor.NAME).toString();

      tip.setAttribute('id', tipId);

      if (this._isAnimated()) {
        tip.classList.add(CLASS_NAME_FADE);
      }

      return tip
    }

    setContent(content) {
      this._newContent = content;
      if (this._isShown()) {
        this._disposePopper();
        this.show();
      }
    }

    _getTemplateFactory(content) {
      if (this._templateFactory) {
        this._templateFactory.changeContent(content);
      } else {
        this._templateFactory = new TemplateFactory({
          ...this._config,
          // the `content` var has to be after `this._config`
          // to override config.content in case of popover
          content,
          extraClass: this._resolvePossibleFunction(this._config.customClass)
        });
      }

      return this._templateFactory
    }

    _getContentForTemplate() {
      return {
        [SELECTOR_TOOLTIP_INNER]: this._getTitle()
      }
    }

    _getTitle() {
      return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title')
    }

    // Private
    _initializeOnDelegatedTarget(event) {
      return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig())
    }

    _isAnimated() {
      return this._config.animation || (this.tip && this.tip.classList.contains(CLASS_NAME_FADE))
    }

    _isShown() {
      return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW)
    }

    _createPopper(tip) {
      const placement = execute(this._config.placement, [this, tip, this._element]);
      const attachment = AttachmentMap[placement.toUpperCase()];
      return createPopper(this._element, tip, this._getPopperConfig(attachment))
    }

    _getOffset() {
      const { offset } = this._config;

      if (typeof offset === 'string') {
        return offset.split(',').map(value => Number.parseInt(value, 10))
      }

      if (typeof offset === 'function') {
        return popperData => offset(popperData, this._element)
      }

      return offset
    }

    _resolvePossibleFunction(arg) {
      return execute(arg, [this._element])
    }

    _getPopperConfig(attachment) {
      const defaultBsPopperConfig = {
        placement: attachment,
        modifiers: [
          {
            name: 'flip',
            options: {
              fallbackPlacements: this._config.fallbackPlacements
            }
          },
          {
            name: 'offset',
            options: {
              offset: this._getOffset()
            }
          },
          {
            name: 'preventOverflow',
            options: {
              boundary: this._config.boundary
            }
          },
          {
            name: 'arrow',
            options: {
              element: `.${this.constructor.NAME}-arrow`
            }
          },
          {
            name: 'preSetPlacement',
            enabled: true,
            phase: 'beforeMain',
            fn: data => {
              // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
              // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
              this._getTipElement().setAttribute('data-popper-placement', data.state.placement);
            }
          }
        ]
      };

      return {
        ...defaultBsPopperConfig,
        ...execute(this._config.popperConfig, [defaultBsPopperConfig])
      }
    }

    _setListeners() {
      const triggers = this._config.trigger.split(' ');

      for (const trigger of triggers) {
        if (trigger === 'click') {
          EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK), this._config.selector, event => {
            const context = this._initializeOnDelegatedTarget(event);
            context.toggle();
          });
        } else if (trigger !== TRIGGER_MANUAL) {
          const eventIn = trigger === TRIGGER_HOVER ?
            this.constructor.eventName(EVENT_MOUSEENTER) :
            this.constructor.eventName(EVENT_FOCUSIN);
          const eventOut = trigger === TRIGGER_HOVER ?
            this.constructor.eventName(EVENT_MOUSELEAVE) :
            this.constructor.eventName(EVENT_FOCUSOUT);

          EventHandler.on(this._element, eventIn, this._config.selector, event => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
            context._enter();
          });
          EventHandler.on(this._element, eventOut, this._config.selector, event => {
            const context = this._initializeOnDelegatedTarget(event);
            context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] =
              context._element.contains(event.relatedTarget);

            context._leave();
          });
        }
      }

      this._hideModalHandler = () => {
        if (this._element) {
          this.hide();
        }
      };

      EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
    }

    _fixTitle() {
      const title = this._element.getAttribute('title');

      if (!title) {
        return
      }

      if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {
        this._element.setAttribute('aria-label', title);
      }

      this._element.setAttribute('data-bs-original-title', title); // DO NOT USE IT. Is only for backwards compatibility
      this._element.removeAttribute('title');
    }

    _enter() {
      if (this._isShown() || this._isHovered) {
        this._isHovered = true;
        return
      }

      this._isHovered = true;

      this._setTimeout(() => {
        if (this._isHovered) {
          this.show();
        }
      }, this._config.delay.show);
    }

    _leave() {
      if (this._isWithActiveTrigger()) {
        return
      }

      this._isHovered = false;

      this._setTimeout(() => {
        if (!this._isHovered) {
          this.hide();
        }
      }, this._config.delay.hide);
    }

    _setTimeout(handler, timeout) {
      clearTimeout(this._timeout);
      this._timeout = setTimeout(handler, timeout);
    }

    _isWithActiveTrigger() {
      return Object.values(this._activeTrigger).includes(true)
    }

    _getConfig(config) {
      const dataAttributes = Manipulator.getDataAttributes(this._element);

      for (const dataAttribute of Object.keys(dataAttributes)) {
        if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
          delete dataAttributes[dataAttribute];
        }
      }

      config = {
        ...dataAttributes,
        ...(typeof config === 'object' && config ? config : {})
      };
      config = this._mergeConfigObj(config);
      config = this._configAfterMerge(config);
      this._typeCheckConfig(config);
      return config
    }

    _configAfterMerge(config) {
      config.container = config.container === false ? document.body : getElement(config.container);

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      return config
    }

    _getDelegateConfig() {
      const config = {};

      for (const [key, value] of Object.entries(this._config)) {
        if (this.constructor.Default[key] !== value) {
          config[key] = value;
        }
      }

      config.selector = false;
      config.trigger = 'manual';

      // In the future can be replaced with:
      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
      // `Object.fromEntries(keysWithDifferentValues)`
      return config
    }

    _disposePopper() {
      if (this._popper) {
        this._popper.destroy();
        this._popper = null;
      }

      if (this.tip) {
        this.tip.remove();
        this.tip = null;
      }
    }

    // Static
    static jQueryInterface(config) {
      return this.each(function () {
        const data = Tooltip.getOrCreateInstance(this, config);

        if (typeof config !== 'string') {
          return
        }

        if (typeof data[config] === 'undefined') {
          throw new TypeError(`No method named "${config}"`)
        }

        data[config]();
      })
    }
  }

  /**
   * jQuery
   */

  defineJQueryPlugin(Tooltip);

  var css_248z$1 = css`:host{display:contents}.tooltip-placeholder{display:inline-block}.tooltip{word-wrap:break-word;display:block;line-break:auto;opacity:0;text-align:left;text-decoration:none;text-shadow:none;text-transform:none;white-space:normal;word-break:normal;word-spacing:normal;z-index:1080}.tooltip.show{opacity:1}.tooltip-inner{background-color:var(--sgds-surface-fixed-dark);border-radius:var(--sgds-border-radius-md);box-shadow:0 0 2px 0 rgba(0,0,0,.12),0 8px 16px 0 rgba(0,0,0,.14);color:var(--sgds-color-fixed-light);font-size:var(--sgds-font-size-1);max-width:var(--sgds-dimension-320);padding:var(--sgds-padding-xs) var(--sgds-padding-sm)}div{max-width:fit-content}`;

  /**
   * @summary Tooltips display more information when users hover over, focus on, or interact with an element.
   * @slot default - The element to target the tooltip to.
   *
   */
  class SgdsTooltip extends SgdsElement {
      constructor() {
          super(...arguments);
          this._myTooltip = createRef();
          this._bsTooltip = null;
          /** The tooltip's content. Content has to be textual */
          this.content = "";
          /** The placement of tooltip relative to its target */
          this.placement = "top";
          /** The method to invoke the tooltip. `hover focus` is the default value which allows tooltip to be triggered via mouse hover and keyboard focus. Add `tabindex=0 `for HTMLelements that are not tabbable. */
          this.trigger = "hover focus";
      }
      _handleSlotChange() {
          // For a11y purpose
          this._tooltipTargetElements.forEach(el => el.setAttribute("data-sgds-tooltip", this.content));
      }
      _handleClickOutOfElement(e, self) {
          if (!e.composedPath().includes(self)) {
              this.hide();
          }
      }
      connectedCallback() {
          super.connectedCallback();
          if (this.trigger === "click") {
              document.addEventListener("click", (event) => this._handleClickOutOfElement(event, this));
              document.addEventListener("touchstart", (event) => this._handleClickOutOfElement(event, this));
          }
      }
      disconnectedCallback() {
          super.disconnectedCallback();
          document.removeEventListener("click", (event) => this._handleClickOutOfElement(event, this));
          document.removeEventListener("touchstart", (event) => this._handleClickOutOfElement(event, this));
      }
      _initializeTooltip() {
          this.tooltipConfig = {
              popperConfig: (defaultConfig) => {
                  this.popperConfig = defaultConfig;
                  const defaultModifiers = defaultConfig.modifiers;
                  const newModifiers = defaultModifiers.map(mod => {
                      if (mod.name === "flip") {
                          mod.options.fallbackPlacements = [];
                      }
                      return mod;
                  });
                  this.popperConfig.modifiers = newModifiers;
                  return this.popperConfig;
              },
              placement: this.placement,
              trigger: this.trigger,
              title: this.content,
              html: true,
              container: this.shadowRoot.querySelector("div") // tooltip to appear inside the shadow root of sgds-tooltip instead of anywhere in the DOM, so that scoped styles can apply
          };
          this._bsTooltip = new Tooltip(this._myTooltip.value, this.tooltipConfig);
      }
      firstUpdated() {
          this._initializeTooltip();
          this._myTooltip.value.addEventListener("show.bs.tooltip", () => {
              this.emit("sgds-show");
          });
          this._myTooltip.value.addEventListener("shown.bs.tooltip", () => {
              this.emit("sgds-after-show");
          });
          this._myTooltip.value.addEventListener("hide.bs.tooltip", () => {
              this.emit("sgds-hide");
          });
          this._myTooltip.value.addEventListener("hidden.bs.tooltip", () => {
              this.emit("sgds-after-hide");
          });
      }
      /** Hides the Tooltip */
      hide() {
          this._bsTooltip.hide();
      }
      /** Shows the Tooltip */
      show() {
          this._bsTooltip.show();
      }
      render() {
          return html$1 `
      <div ${ref(this._myTooltip)} class="tooltip-placeholder">
        <slot @slotchange=${this._handleSlotChange}></slot>
      </div>
    `;
      }
  }
  SgdsTooltip.styles = [...SgdsElement.styles, css_248z$1];
  __decorate([
      property({ type: String })
  ], SgdsTooltip.prototype, "content", void 0);
  __decorate([
      property({ type: String })
  ], SgdsTooltip.prototype, "placement", void 0);
  __decorate([
      property({ type: String })
  ], SgdsTooltip.prototype, "trigger", void 0);
  __decorate([
      state()
  ], SgdsTooltip.prototype, "popperConfig", void 0);
  __decorate([
      queryAssignedElements()
  ], SgdsTooltip.prototype, "_tooltipTargetElements", void 0);

  register("sgds-tooltip", SgdsTooltip);

  var css_248z = css`.container{display:flex;flex-direction:column;gap:var(--sgds-gap-xl)}slot:not([name])::slotted(*){--sgds-font-size-5:var(--sgds-font-size-4);--sgds-font-size-6:var(--sgds-font-size-4);--sgds-margin-2-xs:var(--sgds-margin-none);--sgds-font-weight-bold:var(--sgds-font-weight-semibold);font-size:var(--sgds-font-size-4);font-weight:var(--sgds-font-weight-bold,var(--sgds-font-weight-semibold));margin-bottom:var(--sgds-margin-2-xs,var(--sgds-margin-none))}.contents{display:flex;flex-direction:column;gap:var(--sgds-gap-md);list-style:none;margin:var(--sgds-margin-none);padding:var(--sgds-padding-none)}slot[name=contents]::slotted(li){--sgds-margin-3-xs:var(--sgds-margin-none);margin-top:var(--sgds-margin-3-xs,var(--sgds-margin-none))}`;

  /**
   *
   * @summary Tables of contents provide a page overview and direct access to specific sections.
   *
   * @slot default - The slot for the header
   * @slot contents - The slot for the contents
   */
  class SgdsTableOfContents extends SgdsElement {
      render() {
          return html$1 `<div class="container">
      <slot></slot>
      <ul class="contents">
        <slot name="contents"></slot>
      </ul>
    </div> `;
      }
  }
  SgdsTableOfContents.styles = [...SgdsElement.styles, css_248z];

  customElements.define("sgds-table-of-contents", SgdsTableOfContents);

  const Archive = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M9.375 12.5c0-.345.28-.625.625-.625h4a.625.625 0 1 1 0 1.25h-4a.625.625 0 0 1-.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M4.934 2.875h14.132c.4 0 .691 0 .946.05a2.625 2.625 0 0 1 2.063 2.063c.05.255.05.546.05.946v.132c0 .4 0 .691-.05.946a2.625 2.625 0 0 1-1.95 2.038v6.677c0 .817 0 1.468-.043 1.994-.044.54-.136 1.001-.352 1.425a3.625 3.625 0 0 1-1.584 1.584c-.424.216-.886.308-1.425.352-.526.043-1.177.043-1.994.043H9.273c-.817 0-1.468 0-1.994-.043-.54-.044-1.001-.136-1.425-.352a3.625 3.625 0 0 1-1.584-1.584c-.216-.424-.308-.886-.352-1.425-.043-.526-.043-1.177-.043-1.994V9.05a2.625 2.625 0 0 1-1.95-2.038c-.05-.255-.05-.546-.05-.946v-.132c0-.4 0-.691.05-.946a2.625 2.625 0 0 1 2.063-2.063c.255-.05.546-.05.946-.05Zm.191 6.25V15.7c0 .85 0 1.45.039 1.92.038.461.109.74.22.958.228.447.59.81 1.038 1.038.218.111.497.183.959.22.468.039 1.069.039 1.919.039h5.4c.85 0 1.45 0 1.92-.039.461-.037.74-.109.958-.22.447-.228.81-.59 1.038-1.038.111-.218.183-.497.22-.959.039-.468.039-1.069.039-1.919V9.125H5.125Zm14.31-1.25H4.565a.636.636 0 0 0-.049-.003 1.712 1.712 0 0 1-.284-.023 1.375 1.375 0 0 1-1.08-1.08c-.024-.118-.027-.274-.027-.769s.003-.65.026-.768a1.375 1.375 0 0 1 1.08-1.08c.118-.024.274-.027.769-.027h14c.495 0 .65.003.768.026.546.109.972.535 1.08 1.08.024.118.027.274.027.769s-.003.65-.026.768a1.375 1.375 0 0 1-1.08 1.08 1.61 1.61 0 0 1-.285.024.634.634 0 0 0-.05.003Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowBarDown = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M2.5 3.9a.6.6 0 0 0 0 1.2h19a.6.6 0 1 0 0-1.2h-19Zm10.1 5.6a.6.6 0 1 0-1.2 0v8.552l-3.976-3.976a.6.6 0 1 0-.848.848l5 5a.6.6 0 0 0 .848 0l5-5a.6.6 0 1 0-.848-.848L12.6 18.052V9.5Z"/>
</svg>`;
  const ArrowBarLeft = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M20.1 2.5a.6.6 0 1 0-1.2 0v19a.6.6 0 1 0 1.2 0v-19Zm-5.6 10.1a.6.6 0 1 0 0-1.2H5.948l3.976-3.976a.6.6 0 1 0-.848-.848l-5 5a.6.6 0 0 0 0 .848l5 5a.6.6 0 0 0 .848-.848L5.948 12.6H14.5Z"/>
</svg>`;
  const ArrowBarRight = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M3.9 21.5a.6.6 0 1 0 1.2 0v-19a.6.6 0 1 0-1.2 0v19Zm5.6-10.1a.6.6 0 0 0 0 1.2h8.551l-3.975 3.976a.6.6 0 1 0 .848.848l5-5a.6.6 0 0 0 0-.848l-5-5a.6.6 0 0 0-.848.848L18.05 11.4H9.5Z"/>
</svg>`;
  const ArrowBarUp = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M21.5 20.1a.6.6 0 1 0 0-1.2h-19a.6.6 0 0 0 0 1.2h19Zm-10.1-5.6a.6.6 0 1 0 1.2 0V5.949l3.976 3.975a.6.6 0 0 0 .848-.848l-5-5a.6.6 0 0 0-.848 0l-5 5a.6.6 0 1 0 .848.848L11.4 5.95v8.55Z"/>
</svg>`;
  const ArrowCircleDown = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M11.9 7.575c.345 0 .625.28.625.625v6.091l2.733-2.733a.625.625 0 1 1 .884.884l-3.8 3.8a.625.625 0 0 1-.884 0l-3.8-3.8a.625.625 0 1 1 .884-.884l2.733 2.733V8.2c0-.345.28-.625.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M1.775 12c0-5.592 4.533-10.125 10.125-10.125S22.025 6.408 22.025 12 17.492 22.125 11.9 22.125 1.775 17.592 1.775 12ZM11.9 3.125a8.875 8.875 0 1 0 0 17.75 8.875 8.875 0 0 0 0-17.75Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowCircleLeft = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.442 7.758a.625.625 0 0 1 0 .884l-2.733 2.733H15.8a.625.625 0 1 1 0 1.25H9.709l2.733 2.733a.625.625 0 1 1-.884.884l-3.8-3.8a.625.625 0 0 1 0-.884l3.8-3.8a.625.625 0 0 1 .884 0Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M1.875 12C1.875 6.408 6.408 1.875 12 1.875S22.125 6.408 22.125 12 17.592 22.125 12 22.125 1.875 17.592 1.875 12ZM12 3.125a8.875 8.875 0 1 0 0 17.75 8.875 8.875 0 0 0 0-17.75Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowCircleRight = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M11.558 8.642a.625.625 0 1 1 .884-.884l3.8 3.8a.625.625 0 0 1 0 .884l-3.8 3.8a.625.625 0 1 1-.884-.884l2.733-2.733H8.2a.625.625 0 1 1 0-1.25h6.091l-2.733-2.733Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M1.875 12C1.875 6.408 6.408 1.875 12 1.875S22.125 6.408 22.125 12 17.592 22.125 12 22.125 1.875 17.592 1.875 12ZM12 3.125a8.875 8.875 0 1 0 0 17.75 8.875 8.875 0 0 0 0-17.75Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowCircleUp = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="m7.758 11.558 3.8-3.8a.625.625 0 0 1 .884 0l3.8 3.8a.625.625 0 1 1-.884.884l-2.733-2.733V15.8a.625.625 0 1 1-1.25 0V9.709l-2.733 2.733a.625.625 0 1 1-.884-.884Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M1.875 12C1.875 6.408 6.408 1.875 12 1.875S22.125 6.408 22.125 12 17.592 22.125 12 22.125 1.875 17.592 1.875 12ZM12 3.125a8.875 8.875 0 1 0 0 17.75 8.875 8.875 0 0 0 0-17.75Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowClockwise = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10.695 2.396a.6.6 0 0 1 .848 0l1.765 1.765a.6.6 0 0 1 0 .848l-1.765 1.765a.6.6 0 1 1-.848-.848l.811-.812a6.902 6.902 0 1 0 4.555 1.302.6.6 0 1 1 .706-.97 8.102 8.102 0 1 1-5.396-1.525l-.676-.677a.6.6 0 0 1 0-.848Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowDown = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 3.4a.6.6 0 0 1 .6.6v14.552l4.976-4.976a.6.6 0 0 1 .848.848l-6 6a.6.6 0 0 1-.848 0l-6-6a.6.6 0 0 1 .848-.848l4.976 4.976V4a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowLeft = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10.424 5.576a.6.6 0 0 1 0 .848L5.448 11.4H20a.6.6 0 1 1 0 1.2H5.448l4.976 4.976a.6.6 0 0 1-.848.848l-6-6a.6.6 0 0 1 0-.848l6-6a.6.6 0 0 1 .848 0Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowRepeat = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M17.708 8.13a6.891 6.891 0 0 0-9.155-2.106 6.89 6.89 0 0 0-3.41 5.251.6.6 0 1 1-1.193-.127 8.09 8.09 0 0 1 4.003-6.163 8.091 8.091 0 0 1 10.72 2.43l.248-.923a.6.6 0 1 1 1.159.31l-.646 2.411a.6.6 0 0 1-.735.425l-2.409-.646a.6.6 0 1 1 .311-1.16l1.107.297Zm1.808 4.061a.6.6 0 0 1 .534.66 8.09 8.09 0 0 1-4.003 6.164 8.091 8.091 0 0 1-10.72-2.43l-.247.922a.6.6 0 1 1-1.16-.31l.646-2.41a.6.6 0 0 1 .735-.425l2.409.646a.6.6 0 1 1-.311 1.159l-1.107-.297a6.891 6.891 0 0 0 9.155 2.106 6.89 6.89 0 0 0 3.41-5.252.6.6 0 0 1 .66-.533Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowRight = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M13.576 5.576a.6.6 0 0 1 .848 0l6 6a.6.6 0 0 1 0 .848l-6 6a.6.6 0 0 1-.848-.848L18.55 12.6H4a.6.6 0 1 1 0-1.2h14.55l-4.975-4.976a.6.6 0 0 1 0-.848Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowSquareDown = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12 7.597c.345 0 .625.28.625.625v6.047l2.71-2.71a.625.625 0 0 1 .885.883l-3.778 3.778a.625.625 0 0 1-.884 0L7.78 12.442a.625.625 0 1 1 .884-.884l2.711 2.71V8.223c0-.345.28-.625.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.006 2.875h7.988c.77 0 1.387 0 1.884.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v7.988c0 .77 0 1.387-.04 1.884-.042.512-.13.953-.337 1.359a3.46 3.46 0 0 1-1.511 1.511c-.406.207-.847.295-1.358.336-.498.041-1.115.041-1.885.041H8.006c-.77 0-1.386 0-1.884-.04-.512-.042-.953-.13-1.359-.337a3.459 3.459 0 0 1-1.511-1.511c-.207-.406-.295-.847-.336-1.358-.041-.498-.041-1.115-.041-1.885V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041ZM6.223 4.162c-.434.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.037.441-.037 1.007-.037 1.81v7.934c0 .803 0 1.369.037 1.81.035.433.102.692.204.892a2.2 2.2 0 0 0 .965.965c.2.102.458.169.892.204.441.037 1.007.037 1.81.037h7.934c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204a2.2 2.2 0 0 0 .965-.965c.102-.2.169-.459.204-.892.037-.441.037-1.007.037-1.81V8.033c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204-.441-.037-1.007-.037-1.81-.037H8.033c-.803 0-1.369 0-1.81.037Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowSquareLeft = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.442 7.78a.625.625 0 0 1 0 .884l-2.71 2.711h6.046a.625.625 0 1 1 0 1.25H9.73l2.71 2.71a.625.625 0 0 1-.883.885L7.78 12.442a.625.625 0 0 1 0-.884l3.778-3.778a.625.625 0 0 1 .884 0Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.006 2.875h7.988c.77 0 1.387 0 1.884.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v7.988c0 .77 0 1.387-.04 1.884-.042.512-.13.953-.337 1.359a3.46 3.46 0 0 1-1.511 1.511c-.406.207-.847.295-1.358.336-.498.041-1.115.041-1.885.041H8.006c-.77 0-1.386 0-1.884-.04-.512-.042-.953-.13-1.359-.337a3.459 3.459 0 0 1-1.511-1.511c-.207-.406-.295-.847-.336-1.358-.041-.498-.041-1.115-.041-1.885V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041ZM6.223 4.162c-.434.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.037.441-.037 1.007-.037 1.81v7.934c0 .803 0 1.369.037 1.81.035.433.102.692.204.892a2.2 2.2 0 0 0 .965.965c.2.102.458.169.892.204.441.037 1.007.037 1.81.037h7.934c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204a2.2 2.2 0 0 0 .965-.965c.102-.2.169-.459.204-.892.037-.441.037-1.007.037-1.81V8.033c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204-.441-.037-1.007-.037-1.81-.037H8.033c-.803 0-1.369 0-1.81.037Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowSquareRight = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M11.558 7.78a.625.625 0 0 1 .884 0l3.778 3.778a.625.625 0 0 1 0 .884l-3.778 3.778a.625.625 0 1 1-.884-.884l2.71-2.711H8.223a.625.625 0 1 1 0-1.25h6.047l-2.71-2.71a.625.625 0 0 1 0-.885Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.006 2.875h7.988c.77 0 1.387 0 1.884.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v7.988c0 .77 0 1.387-.04 1.884-.042.512-.13.953-.337 1.359a3.46 3.46 0 0 1-1.511 1.511c-.406.207-.847.295-1.358.336-.498.041-1.115.041-1.885.041H8.006c-.77 0-1.386 0-1.884-.04-.512-.042-.953-.13-1.359-.337a3.459 3.459 0 0 1-1.511-1.511c-.207-.406-.295-.847-.336-1.358-.041-.498-.041-1.115-.041-1.885V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041ZM6.223 4.162c-.434.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.037.441-.037 1.007-.037 1.81v7.934c0 .803 0 1.369.037 1.81.035.433.102.692.204.892a2.2 2.2 0 0 0 .965.965c.2.102.458.169.892.204.441.037 1.007.037 1.81.037h7.934c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204a2.2 2.2 0 0 0 .965-.965c.102-.2.169-.459.204-.892.037-.441.037-1.007.037-1.81V8.033c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204-.441-.037-1.007-.037-1.81-.037H8.033c-.803 0-1.369 0-1.81.037Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowSquareUp = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M11.558 7.78a.625.625 0 0 1 .884 0l3.778 3.778a.625.625 0 1 1-.884.884l-2.711-2.71v6.046a.625.625 0 1 1-1.25 0V9.73l-2.71 2.71a.625.625 0 1 1-.885-.883l3.778-3.778Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.006 2.875h7.988c.77 0 1.387 0 1.884.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v7.988c0 .77 0 1.387-.04 1.884-.042.512-.13.953-.337 1.359a3.46 3.46 0 0 1-1.511 1.511c-.406.207-.847.295-1.358.336-.498.041-1.115.041-1.885.041H8.006c-.77 0-1.386 0-1.884-.04-.512-.042-.953-.13-1.359-.337a3.459 3.459 0 0 1-1.511-1.511c-.207-.406-.295-.847-.336-1.358-.041-.498-.041-1.115-.041-1.885V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041ZM6.223 4.162c-.434.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.037.441-.037 1.007-.037 1.81v7.934c0 .803 0 1.369.037 1.81.035.433.102.692.204.892a2.2 2.2 0 0 0 .965.965c.2.102.458.169.892.204.441.037 1.007.037 1.81.037h7.934c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204a2.2 2.2 0 0 0 .965-.965c.102-.2.169-.459.204-.892.037-.441.037-1.007.037-1.81V8.033c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204-.441-.037-1.007-.037-1.81-.037H8.033c-.803 0-1.369 0-1.81.037Z" clip-rule="evenodd"/>
</svg>`;
  const ArrowUp = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.576 3.576a.6.6 0 0 1 .848 0l6 6a.6.6 0 0 1-.848.848L12.6 5.45V20a.6.6 0 1 1-1.2 0V5.449l-4.976 4.975a.6.6 0 0 1-.848-.848l6-6Z" clip-rule="evenodd"/>
</svg>`;
  const BankFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M3 8.777a1 1 0 0 1 .5-.866l8-4.622a1 1 0 0 1 1 0l8 4.622a1 1 0 0 1 .5.866V10a1 1 0 0 1-1 1h-1v7h1a1 1 0 0 1 1 1v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-1a1 1 0 0 1 1-1h1v-7H4a1 1 0 0 1-1-1V8.777ZM8 11v7h2.5v-7H8Zm5.5 0v7H16v-7h-2.5Zm0-3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" clip-rule="evenodd"/>
</svg>`;
  const BellSlash = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.465 2.985A6.3 6.3 0 0 1 18.3 8.2c0 1.944.25 3.454.591 4.61a.6.6 0 1 1-1.15.34c-.378-1.277-.64-2.902-.64-4.95a5.1 5.1 0 0 0-7.963-4.221.6.6 0 0 1-.673-.994Zm-5.44.04a.6.6 0 0 1 .85 0l3.069 3.07a.598.598 0 0 1 .05.05l13.98 13.98a.6.6 0 0 1-.848.85l-3.624-3.625H5.704c-.555 0-.99 0-1.302-.012a4.076 4.076 0 0 1-.422-.034.996.996 0 0 1-.758-.501 1.06 1.06 0 0 1-.122-.44.815.815 0 0 1 .035-.299c.02-.068.048-.134.075-.194.054-.119.13-.259.219-.413.178-.309.444-.736.787-1.287l.007-.012C4.988 12.928 5.7 11.03 5.7 8.2c0-.501.06-.997.175-1.476l-2.85-2.85a.6.6 0 0 1 0-.848Zm3.893 4.742A5.103 5.103 0 0 0 6.9 8.2c0 3.042-.769 5.163-1.658 6.592a51.676 51.676 0 0 0-.82 1.346h.027c.285.012.697.012 1.27.012h9.583L6.919 7.767Zm-2.801 8.342.01.003-.01-.003Zm4.92 4.044a.6.6 0 0 1 .847-.053c.564.498 1.304.8 2.116.8s1.552-.302 2.117-.8a.6.6 0 1 1 .794.9A4.386 4.386 0 0 1 12 22.1 4.386 4.386 0 0 1 9.09 21a.6.6 0 0 1-.053-.847Z" clip-rule="evenodd"/>
</svg>`;
  const Bell = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.547 3.745A6.3 6.3 0 0 1 18.302 8.2c0 2.83.712 4.728 1.477 5.958l.008.012c.342.55.608.978.786 1.287.09.154.165.294.22.413.026.06.053.126.074.194a.815.815 0 0 1 .035.299 1.06 1.06 0 0 1-.122.44.996.996 0 0 1-.758.501 4.077 4.077 0 0 1-.422.034c-.311.012-.747.012-1.302.012H5.706c-.555 0-.99 0-1.302-.012a4.076 4.076 0 0 1-.422-.034.996.996 0 0 1-.758-.501 1.06 1.06 0 0 1-.122-.44.814.814 0 0 1 .036-.299c.02-.068.047-.134.074-.194a4.74 4.74 0 0 1 .22-.413c.177-.309.443-.736.786-1.287l.007-.012c.765-1.23 1.477-3.129 1.477-5.958a6.3 6.3 0 0 1 1.845-4.455Zm4.455-.645a5.1 5.1 0 0 0-5.1 5.1c0 3.042-.769 5.163-1.658 6.592a51.644 51.644 0 0 0-.82 1.346h.027c.285.012.697.012 1.27.012h12.562c.574 0 .985 0 1.27-.011l.027-.001a51.44 51.44 0 0 0-.82-1.346c-.889-1.43-1.658-3.55-1.658-6.592a5.1 5.1 0 0 0-5.1-5.1Zm7.873 13.012a.074.074 0 0 1 .01-.003l-.01.003ZM4.119 16.11Zm4.92 4.044a.6.6 0 0 1 .847-.053c.564.498 1.304.8 2.116.8s1.552-.302 2.117-.8a.6.6 0 1 1 .794.9 4.386 4.386 0 0 1-2.91 1.1A4.386 4.386 0 0 1 9.091 21a.6.6 0 0 1-.053-.847Z" clip-rule="evenodd"/>
</svg>`;
  const BiFunnel = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.076 2.835h13.848c.26 0 .493 0 .687.016.208.017.429.055.645.165.313.16.568.415.728.728.11.216.148.437.165.645a9 9 0 0 1 .016.687v.808c0 .197 0 .396-.046.59a1.63 1.63 0 0 1-.2.482c-.104.17-.245.31-.384.45l-.033.033-5.063 5.063c-.195.195-.213.219-.225.237a.334.334 0 0 0-.04.097c-.005.02-.009.05-.009.327v4.994c0 .266.001.533-.079.783-.07.219-.184.42-.336.593-.173.198-.402.335-.63.47a.616.616 0 0 1-.055.033l-1.826 1.096c-.374.225-.693.416-.96.545-.27.13-.586.247-.934.215a1.665 1.665 0 0 1-1.187-.673c-.207-.281-.269-.613-.296-.91-.027-.295-.027-.668-.027-1.104v-6.042c0-.277-.004-.306-.01-.327a.335.335 0 0 0-.04-.097c-.01-.018-.028-.042-.224-.237L3.498 7.439l-.032-.033c-.14-.14-.281-.28-.386-.45a1.665 1.665 0 0 1-.199-.482 2.497 2.497 0 0 1-.046-.637v-.761c0-.26 0-.493.016-.687a1.69 1.69 0 0 1 .166-.645c.16-.313.414-.568.727-.728a1.69 1.69 0 0 1 .645-.165c.194-.016.428-.016.687-.016Zm-.723 1.364-.005.003a.335.335 0 0 0-.146.146l-.003.005a.856.856 0 0 0-.023.144 8.39 8.39 0 0 0-.01.603v.737c-.001.277.003.306.008.327a.335.335 0 0 0 .04.097c.012.018.03.042.225.237l5.063 5.063.032.033c.14.14.281.28.386.45a1.7 1.7 0 0 1 .199.481c.047.195.046.394.046.591v6.058c0 .476 0 .786.022 1.013.016.182.042.24.045.248.056.075.14.122.233.132a.835.835 0 0 0 .237-.088c.205-.1.471-.258.88-.503l1.8-1.08c.32-.193.351-.22.37-.241a.336.336 0 0 0 .067-.12c.009-.026.016-.067.016-.44v-4.979c0-.197 0-.396.046-.59.04-.17.108-.333.2-.482a2.5 2.5 0 0 1 .418-.483l5.062-5.063c.195-.195.213-.219.225-.237a.334.334 0 0 0 .04-.097c.005-.02.01-.05.01-.327V5.1c0-.291-.002-.47-.012-.603a.847.847 0 0 0-.026-.15.335.335 0 0 0-.146-.145l-.005-.003a.852.852 0 0 0-.144-.023 8.39 8.39 0 0 0-.603-.011H5.1c-.29 0-.47 0-.603.011a.854.854 0 0 0-.144.023Z" clip-rule="evenodd"/>
</svg>`;
  const BookmarkFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M6.078 2.1h11.844c.261 0 .492 0 .684.016.203.016.415.054.62.158a1.6 1.6 0 0 1 .7.7c.104.205.142.417.158.62.016.192.016.423.016.684v16.06c0 .206 0 .4-.014.559-.015.16-.051.384-.196.583a1.1 1.1 0 0 1-.775.448 1.146 1.146 0 0 1-.603-.123c-.145-.067-.313-.164-.492-.267l-5.52-3.19c-.326-.19-.377-.21-.417-.22a.4.4 0 0 0-.166 0c-.04.01-.09.03-.417.22l-5.52 3.19c-.18.103-.347.2-.491.267a1.146 1.146 0 0 1-.604.123 1.1 1.1 0 0 1-.775-.448 1.147 1.147 0 0 1-.196-.583 6.579 6.579 0 0 1-.014-.56V4.279c0-.261 0-.492.016-.684.016-.203.054-.415.158-.62a1.6 1.6 0 0 1 .7-.7c.205-.104.417-.142.62-.158.192-.016.423-.016.684-.016Z" clip-rule="evenodd"/>
</svg>`;
  const Bookmark = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M6.078 2.1h11.844c.261 0 .492 0 .684.016.203.016.415.054.62.158a1.6 1.6 0 0 1 .7.7c.104.205.142.416.158.62.016.192.016.423.016.684v16.06c0 .206 0 .4-.014.559-.015.16-.051.384-.196.583a1.1 1.1 0 0 1-.775.447 1.146 1.146 0 0 1-.603-.122 6.562 6.562 0 0 1-.492-.267l-5.52-3.19c-.326-.19-.377-.21-.417-.22a.4.4 0 0 0-.166 0c-.04.01-.09.03-.417.22l-5.52 3.19c-.18.103-.347.2-.491.267a1.146 1.146 0 0 1-.604.122 1.1 1.1 0 0 1-.775-.447 1.147 1.147 0 0 1-.196-.583 6.578 6.578 0 0 1-.014-.56V4.279c0-.261 0-.492.016-.684a1.62 1.62 0 0 1 .158-.62 1.6 1.6 0 0 1 .7-.7c.205-.104.417-.142.62-.158.192-.016.423-.016.684-.016Zm-.586 1.212a.494.494 0 0 0-.174.032.4.4 0 0 0-.174.174.493.493 0 0 0-.032.174A8.432 8.432 0 0 0 5.1 4.3v16.014c0 .148 0 .257.003.342.074-.04.169-.095.297-.17l5.5-3.178.053-.031c.237-.137.463-.268.714-.322a1.6 1.6 0 0 1 .666 0c.251.054.477.185.714.322l.054.031 5.499 3.179c.128.074.223.129.297.169.003-.085.003-.194.003-.342V4.3c0-.29 0-.471-.012-.608a.493.493 0 0 0-.032-.174.4.4 0 0 0-.174-.174.493.493 0 0 0-.174-.032A8.44 8.44 0 0 0 17.9 3.3H6.1c-.29 0-.471 0-.608.012Z" clip-rule="evenodd"/>
</svg>`;
  const BoxArrowUpRight = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M9.274 3.9H9.3a.6.6 0 0 1 0 1.2c-.85 0-1.451 0-1.922.039-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 5.361 6.41c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v5.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h5.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922a.6.6 0 1 1 1.2 0v.026c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.274c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V9.274c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C7.805 3.9 8.456 3.9 9.274 3.9Zm3.626.6a.6.6 0 0 1 .6-.6h6a.6.6 0 0 1 .6.6v6a.6.6 0 1 1-1.2 0V5.949l-5.976 5.975a.6.6 0 0 1-.848-.848L18.05 5.1H13.5a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const BoxSeam = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12.314 1.933a1.526 1.526 0 0 0-.627 0c-.237.05-.45.17-.666.293l-.05.03-3.506 1.987a.597.597 0 0 0-.023.013l-3.46 1.962-.054.03c-.229.13-.453.256-.623.444-.149.165-.26.358-.328.569-.078.24-.077.498-.077.765v7.948c0 .267 0 .525.077.765.068.21.18.404.328.569.17.188.394.315.623.444l.053.03 6.99 3.963.05.029c.216.122.43.244.665.293.207.044.42.044.628 0 .236-.05.45-.17.665-.293l.05-.03 6.99-3.962.053-.03c.229-.13.453-.256.623-.444.149-.165.26-.358.328-.569.078-.24.078-.498.077-.765V8.026c0-.267.001-.525-.077-.765a1.567 1.567 0 0 0-.328-.569c-.17-.188-.394-.315-.623-.444l-.053-.03-6.99-3.963-.05-.029c-.216-.122-.43-.244-.665-.293ZM7.75 5.46 4.717 7.18 12 11.31l3.034-1.72L7.75 5.46Zm8.788 4.656a.559.559 0 0 0 .017-.01L19.9 8.211v7.701c0 .37-.007.422-.018.458a.367.367 0 0 1-.077.133c-.023.025-.06.055-.378.235l-6.827 3.87V12.35l3.938-2.233ZM16.25 8.9 8.967 4.77l2.595-1.472c.303-.171.342-.186.371-.192.044-.01.09-.01.134 0 .029.006.069.02.371.192l6.845 3.882L16.25 8.9Zm-4.85 3.45v8.259l-6.827-3.87c-.318-.181-.355-.21-.378-.236a.367.367 0 0 1-.076-.133c-.012-.036-.019-.087-.019-.458V8.211l7.3 4.139Z" clip-rule="evenodd"/>
</svg>`;
  const Building = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M14.175 2.4h3.65c.539 0 .98 0 1.337.03.371.03.706.094 1.018.253a2.6 2.6 0 0 1 1.137 1.137c.159.312.223.647.254 1.018.029.358.029.798.029 1.337V20.4h.4a.6.6 0 1 1 0 1.2H2a.6.6 0 1 1 0-1.2h.4v-6.225c0-.539 0-.98.03-1.338.03-.37.094-.705.253-1.017a2.6 2.6 0 0 1 1.137-1.137c.312-.159.647-.223 1.017-.254.359-.029.8-.029 1.338-.029H10.4V6.175c0-.539 0-.98.03-1.337.03-.371.094-.706.253-1.018a2.6 2.6 0 0 1 1.136-1.137c.313-.159.648-.223 1.018-.254.358-.029.8-.029 1.338-.029ZM10.4 11.6H6.2c-.57 0-.961 0-1.265.025-.296.024-.455.069-.57.128a1.4 1.4 0 0 0-.613.611c-.058.116-.103.275-.127.571-.025.304-.025.695-.025 1.265v6.2h6.8v-8.8Zm1.2 8.8V6.2c0-.57 0-.961.025-1.265.024-.296.069-.455.127-.57a1.4 1.4 0 0 1 .612-.612c.115-.06.275-.104.571-.128.304-.025.695-.025 1.265-.025h3.6c.57 0 .961 0 1.265.025.296.024.455.069.57.128a1.4 1.4 0 0 1 .612.611c.059.116.103.275.128.571.024.304.025.695.025 1.265v14.2h-8.8ZM13.9 7a.6.6 0 0 1 .6-.6h3a.6.6 0 1 1 0 1.2h-3a.6.6 0 0 1-.6-.6Zm0 4a.6.6 0 0 1 .6-.6h3a.6.6 0 1 1 0 1.2h-3a.6.6 0 0 1-.6-.6Zm0 4a.6.6 0 0 1 .6-.6h3a.6.6 0 1 1 0 1.2h-3a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Bus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M6.2 15.325c0-.345.28-.625.625-.625H8.25a.625.625 0 1 1 0 1.25H6.825a.625.625 0 0 1-.625-.625Zm8.925 0c0-.345.28-.625.625-.625h1.425a.625.625 0 1 1 0 1.25H15.75a.625.625 0 0 1-.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.033 1.875h7.934c.775 0 1.395 0 1.896.04.514.043.957.131 1.365.339a3.474 3.474 0 0 1 1.518 1.518c.208.408.296.851.338 1.365.014.175.024.364.03.57a.63.63 0 0 1 .005.207c.006.332.006.703.006 1.119v7.084c0 .775 0 1.395-.04 1.896-.043.514-.131.957-.339 1.365a3.474 3.474 0 0 1-1.518 1.518l-.003.002v1.86c0 .117 0 .24-.009.345a1.11 1.11 0 0 1-.11.421 1.1 1.1 0 0 1-.482.481 1.11 1.11 0 0 1-.421.111 4.263 4.263 0 0 1-.345.009h-1.84c-.118 0-.24 0-.346-.009a1.11 1.11 0 0 1-.421-.11 1.1 1.1 0 0 1-.481-.482 1.11 1.11 0 0 1-.111-.421c-.009-.105-.009-.228-.009-.345v-1.483h-5.3v1.483c0 .117 0 .24-.009.345a1.11 1.11 0 0 1-.11.421 1.1 1.1 0 0 1-.482.481 1.11 1.11 0 0 1-.421.111 4.263 4.263 0 0 1-.345.009h-1.84c-.118 0-.24 0-.346-.009a1.11 1.11 0 0 1-.421-.11 1.1 1.1 0 0 1-.481-.482 1.11 1.11 0 0 1-.111-.421c-.01-.105-.009-.228-.009-.345v-1.86l-.003-.002a3.474 3.474 0 0 1-1.518-1.518c-.208-.408-.296-.851-.338-1.365-.041-.501-.041-1.12-.041-1.896V7.033c0-.416 0-.787.006-1.119a.63.63 0 0 1 .005-.208c.006-.205.016-.394.03-.569.042-.514.13-.957.338-1.365a3.475 3.475 0 0 1 1.518-1.518c.408-.208.851-.296 1.365-.338.501-.041 1.12-.041 1.896-.041ZM4.126 6.45l-.001.61v4.315h15.75V6.45H4.124ZM19.835 5.2H4.165c.037-.413.103-.664.203-.86.213-.419.553-.76.972-.972.202-.103.462-.17.899-.206.444-.037 1.013-.037 1.821-.037h7.88c.808 0 1.377 0 1.821.037.437.035.697.103.9.206.418.213.758.553.971.972.1.196.166.447.203.86Zm.04 7.425H4.125v1.465c0 .808 0 1.377.037 1.821.035.437.103.697.206.9.213.418.553.758.972.971.202.103.462.17.899.206.444.037 1.013.037 1.821.037h7.88c.808 0 1.377 0 1.821-.037.437-.035.697-.103.9-.206a2.22 2.22 0 0 0 .971-.972c.103-.202.17-.462.206-.899.037-.444.037-1.013.037-1.821v-1.465Zm-3.975 6.65v1.6h2.075v-1.651a7.433 7.433 0 0 1-.112.01c-.501.041-1.12.041-1.896.041H15.9Zm-7.8 0h-.067c-.775 0-1.395 0-1.896-.04a7.495 7.495 0 0 1-.112-.01v1.65H8.1v-1.6Z" clip-rule="evenodd"/>
</svg>`;
  const Calculator = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.774 2.4h8.452c.818 0 1.468 0 1.993.043.537.044.996.136 1.415.35a3.6 3.6 0 0 1 1.573 1.573c.214.42.306.877.35 1.415.043.525.043 1.175.043 1.993v8.452c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H7.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V7.774c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C6.305 2.4 6.956 2.4 7.774 2.4ZM5.878 3.639c-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 3.861 4.91c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v8.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h8.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V7.8c0-.85 0-1.451-.039-1.922-.038-.463-.11-.745-.223-.968a2.4 2.4 0 0 0-1.049-1.048c-.222-.114-.504-.185-.968-.223C17.651 3.6 17.05 3.6 16.2 3.6H7.8c-.85 0-1.451 0-1.922.039ZM8.5 5.9a.6.6 0 0 1 .6.6v1.4h1.4a.6.6 0 1 1 0 1.2H9.1v1.4a.6.6 0 1 1-1.2 0V9.1H6.5a.6.6 0 0 1 0-1.2h1.4V6.5a.6.6 0 0 1 .6-.6Zm8.576.176a.6.6 0 0 1 .848.848l-11 11a.6.6 0 0 1-.848-.848l11-11ZM12.9 15.5a.6.6 0 0 1 .6-.6h4a.6.6 0 1 1 0 1.2h-4a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const CalendarCheck = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M9.424 15.576a.6.6 0 1 0-.848.848l2 2a.6.6 0 0 0 .848 0l4.5-4.5a.6.6 0 0 0-.848-.848L11 17.15l-1.576-1.575Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8 2c.332 0 .6.32.6.714V4h6.8V2.714c0-.394.269-.714.6-.714.332 0 .6.32.6.714V4c1.418.002 2.173.027 2.762.327a3 3 0 0 1 1.311 1.311C21 6.28 21 7.12 21 8.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 22 17.88 22 16.2 22H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 19.72 3 18.88 3 17.2V8.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311c.589-.3 1.344-.325 2.762-.327V2.714C7.4 2.32 7.67 2 8 2Zm-.6 3.2a19.76 19.76 0 0 0-1.473.037c-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 7.367 4.2 7.94 4.2 8.8v.6h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16A19.86 19.86 0 0 0 16.6 5.2v1.086c0 .394-.268.714-.6.714-.331 0-.6-.32-.6-.714V5.2H8.6v1.086C8.6 6.68 8.332 7 8 7c-.331 0-.6-.32-.6-.714V5.2Zm12.4 5.4H4.2v6.6c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h8.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873v-6.6Z" clip-rule="evenodd"/>
</svg>`;
  const CalendarX = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M10.304 13.176a.6.6 0 0 0-.849.848l1.697 1.697-1.697 1.697a.6.6 0 1 0 .849.849L12 16.57l1.697 1.697a.6.6 0 0 0 .848-.849l-1.697-1.697 1.697-1.697a.6.6 0 0 0-.848-.848L12 14.873l-1.697-1.697Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.6 2.714C8.6 2.32 8.332 2 8 2c-.331 0-.6.32-.6.714V4c-1.418.002-2.173.027-2.762.327a3 3 0 0 0-1.311 1.311C3 6.28 3 7.12 3 8.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 22 6.12 22 7.8 22h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 19.72 21 18.88 21 17.2V8.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311c-.589-.3-1.344-.325-2.762-.327V2.714C16.6 2.32 16.332 2 16 2c-.331 0-.6.32-.6.714V4H8.6V2.714ZM5.927 5.237c.368-.03.83-.036 1.473-.037v1.086c0 .394.27.714.6.714.332 0 .6-.32.6-.714V5.2h6.8v1.086c0 .394.269.714.6.714.332 0 .6-.32.6-.714V5.2c.644.001 1.105.007 1.473.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v.6H4.2v-.6c0-.86 0-1.433.037-1.873.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16ZM4.2 10.6h15.6v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873v-6.6Z" clip-rule="evenodd"/>
</svg>`;
  const Calendar = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8 2c.332 0 .6.32.6.714V4h6.8V2.714c0-.394.269-.714.6-.714.332 0 .6.32.6.714V4c1.418.002 2.173.027 2.762.327a3 3 0 0 1 1.311 1.311C21 6.28 21 7.12 21 8.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 22 17.88 22 16.2 22H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 19.72 3 18.88 3 17.2V8.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311c.589-.3 1.344-.325 2.762-.327V2.714C7.4 2.32 7.67 2 8 2Zm-.6 3.2a19.76 19.76 0 0 0-1.473.037c-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 7.367 4.2 7.94 4.2 8.8v.6h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16A19.86 19.86 0 0 0 16.6 5.2v1.086c0 .394-.268.714-.6.714-.331 0-.6-.32-.6-.714V5.2H8.6v1.086C8.6 6.68 8.332 7 8 7c-.331 0-.6-.32-.6-.714V5.2Zm12.4 5.4H4.2v6.6c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h8.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873v-6.6Z" clip-rule="evenodd"/>
</svg>`;
  const Camera = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M9.563 1.4h4.874c.116 0 .2 0 .279.005A2.6 2.6 0 0 1 16.97 3.03c.03.074.056.153.092.263l.006.017c.045.134.06.177.073.212a1.4 1.4 0 0 0 1.215.875c.038.003.086.003.237.003h.04c.331 0 .543 0 .72.018a3.6 3.6 0 0 1 3.228 3.227c.018.178.018.38.018.695v7.886c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H6.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V8.34c0-.315 0-.517.017-.695a3.6 3.6 0 0 1 3.228-3.227c.177-.018.39-.018.72-.018h.04c.151 0 .2 0 .238-.003a1.4 1.4 0 0 0 1.214-.875c.015-.035.029-.078.074-.212l.005-.017c.037-.11.064-.19.093-.263a2.6 2.6 0 0 1 2.255-1.625c.08-.005.163-.005.279-.005Zm.018 1.2c-.141 0-.186 0-.224.003a1.4 1.4 0 0 0-1.215.875 4.244 4.244 0 0 0-.073.212l-.006.017a2.6 2.6 0 0 1-2.348 1.888c-.078.005-.167.005-.29.005h-.02c-.384 0-.531 0-.642.012a2.4 2.4 0 0 0-2.151 2.151c-.011.111-.012.25-.012.614V16.2c0 .85 0 1.451.039 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h10.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V8.377c0-.364 0-.503-.012-.614a2.4 2.4 0 0 0-2.152-2.151 7.757 7.757 0 0 0-.642-.012h-.02c-.123 0-.21 0-.29-.005A2.6 2.6 0 0 1 16.03 3.97c-.03-.074-.056-.153-.093-.263l-.005-.017a4.328 4.328 0 0 0-.074-.212 1.4 1.4 0 0 0-1.214-.875 4.25 4.25 0 0 0-.224-.003H9.58ZM12 9.1a3.4 3.4 0 1 0 0 6.8 3.4 3.4 0 0 0 0-6.8Zm-4.6 3.4a4.6 4.6 0 1 1 9.2 0 4.6 4.6 0 0 1-9.2 0Z" clip-rule="evenodd"/>
</svg>`;
  const Car = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M4.725 13.05c0-.345.28-.625.625-.625H8.2a.625.625 0 1 1 0 1.25H5.35a.625.625 0 0 1-.625-.625Zm10.45 0c0-.345.28-.625.625-.625h2.85a.625.625 0 1 1 0 1.25H15.8a.625.625 0 0 1-.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.38 3.875h7.241c.678 0 1.186-.001 1.634.175a2.54 2.54 0 0 1 1.013.73c.308.37.469.851.683 1.495l.035.106 1.064 3.194h1.45a.625.625 0 1 1 0 1.25h-.18c.164.198.308.415.426.647.208.408.296.851.338 1.365.041.501.041 1.12.041 1.896v2.457c0 .378 0 .657-.049.903a2.525 2.525 0 0 1-1.983 1.983c-.246.05-.525.05-.903.049h-.54a2.525 2.525 0 0 1-2.52-2.375H7.87a2.525 2.525 0 0 1-2.52 2.375h-.54c-.378 0-.657 0-.903-.049a2.525 2.525 0 0 1-1.983-1.983c-.05-.246-.05-.525-.049-.903v-2.457c0-.775 0-1.395.04-1.896.043-.514.131-.957.339-1.365.118-.232.262-.449.427-.647H2.5a.625.625 0 1 1 0-1.25h1.45l1.064-3.194.036-.106c.213-.644.374-1.126.683-1.495.27-.324.619-.575 1.012-.73.448-.176.956-.176 1.634-.175ZM5.255 9.607c.48-.032 1.062-.032 1.777-.032h9.934c.715 0 1.298 0 1.777.032l-.944-2.83c-.266-.799-.355-1.032-.491-1.195a1.275 1.275 0 0 0-.512-.369c-.198-.078-.447-.088-1.288-.088H8.49c-.841 0-1.09.01-1.288.088a1.275 1.275 0 0 0-.512.37c-.136.162-.225.395-.49 1.193l-.945 2.831Zm-.017 1.255c-.437.035-.697.103-.9.206a2.225 2.225 0 0 0-.971.972c-.103.202-.17.462-.206.899-.036.444-.037 1.013-.037 1.821v2.365c0 .471.003.616.025.724.1.506.496.9 1.001 1.002.108.021.253.024.724.024h.475c.704 0 1.275-.57 1.275-1.275a1.1 1.1 0 0 1 1.1-1.1h8.55a1.1 1.1 0 0 1 1.1 1.1c0 .704.57 1.275 1.275 1.275h.475c.471 0 .616-.003.724-.024.506-.101.9-.496 1.002-1.002.021-.108.024-.253.024-.724V14.76c0-.808 0-1.377-.037-1.821-.035-.437-.103-.697-.206-.9a2.225 2.225 0 0 0-.972-.971c-.202-.103-.462-.17-.899-.206-.444-.037-1.013-.037-1.821-.037H7.06c-.808 0-1.377 0-1.82.037Z" clip-rule="evenodd"/>
</svg>`;
  const ChatDots = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M6.653 10.583a1.097 1.097 0 1 1 2.194 0 1.097 1.097 0 0 1-2.194 0Zm4.25 0a1.097 1.097 0 1 1 2.194 0 1.097 1.097 0 0 1-2.194 0Zm4.25 0a1.097 1.097 0 1 1 2.194 0 1.097 1.097 0 0 1-2.194 0Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.006 2.875h7.988c.77 0 1.387 0 1.884.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v5.154c0 .77 0 1.387-.04 1.885-.042.511-.13.953-.337 1.358a3.46 3.46 0 0 1-1.511 1.512c-.406.207-.847.294-1.358.336-.498.04-1.115.04-1.885.04H13.59c-.614 0-.835.004-1.04.046a2.21 2.21 0 0 0-.56.196c-.187.096-.361.231-.841.615l-2.273 1.819a7.34 7.34 0 0 1-.489.37c-.138.092-.36.222-.636.222-.334 0-.65-.151-.858-.413-.173-.215-.21-.47-.225-.635-.015-.17-.015-.383-.015-.613V18.29c-.503-.005-.88-.027-1.215-.116a3.458 3.458 0 0 1-2.445-2.446c-.118-.44-.118-.957-.118-1.738V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041ZM6.223 4.162c-.433.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.036.441-.037 1.007-.037 1.81v5.856c0 .918.005 1.255.075 1.516.204.762.8 1.357 1.562 1.561.26.07.597.076 1.516.076.345 0 .625.28.625.625v2.475c.06-.046.129-.101.212-.168l2.253-1.802.049-.04c.413-.33.69-.552 1.004-.712.277-.142.572-.245.878-.308.345-.07.7-.07 1.228-.07h2.44c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204.416-.212.754-.55.965-.965.102-.2.17-.459.204-.893.037-.44.037-1.006.037-1.81v-5.1c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204-.441-.037-1.007-.037-1.81-.037H8.033c-.803 0-1.369 0-1.81.037ZM7.922 20.46v.002-.002Z" clip-rule="evenodd"/>
</svg>`;
  const ChatLeftText = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.007 2.9h7.986c.771 0 1.386 0 1.883.04.51.042.948.13 1.35.334a3.45 3.45 0 0 1 1.5 1.5c.204.402.292.84.333 1.35.041.497.041 1.112.041 1.883v5.152c0 .772 0 1.387-.04 1.884-.042.51-.13.947-.334 1.35a3.433 3.433 0 0 1-1.5 1.5c-.402.204-.84.291-1.35.333-.497.04-1.112.04-1.883.04h-6.18c-.614 0-.837.004-1.046.046a2.2 2.2 0 0 0-.567.2c-.19.096-.366.233-.845.617l-2.272 1.818c-.18.143-.345.276-.487.37-.138.09-.354.217-.623.217-.326 0-.635-.148-.839-.403-.167-.21-.204-.457-.219-.622-.015-.17-.015-.381-.015-.612V8.007c0-.771 0-1.386.04-1.883.042-.51.13-.948.334-1.35a3.433 3.433 0 0 1 1.5-1.5c.402-.204.84-.292 1.35-.333C6.62 2.9 7.236 2.9 8.007 2.9ZM6.221 4.137c-.435.035-.697.102-.902.206-.42.215-.761.556-.976.976-.104.205-.17.467-.206.902-.037.443-.037 1.01-.037 1.812v11.84c0 .13 0 .235.002.32.067-.052.149-.117.25-.2l2.254-1.801.047-.039c.415-.331.69-.551 1.001-.71.276-.141.569-.244.872-.306.342-.07.694-.07 1.225-.07h6.216c.803 0 1.37 0 1.812-.037.435-.036.697-.103.902-.207a2.24 2.24 0 0 0 .976-.976c.104-.204.17-.466.206-.902.037-.442.037-1.008.037-1.812v-5.1c0-.803 0-1.37-.037-1.812-.035-.435-.102-.697-.206-.902a2.233 2.233 0 0 0-.976-.976c-.205-.104-.467-.17-.902-.206-.443-.037-1.009-.037-1.812-.037H8.033c-.803 0-1.37 0-1.812.037Zm.457 4.557a.6.6 0 0 1 .6-.6H12a.6.6 0 1 1 0 1.2H7.278a.6.6 0 0 1-.6-.6Zm0 3.306a.6.6 0 0 1 .6-.6h7.555a.6.6 0 0 1 0 1.2H7.278a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Chat = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.006 2.875h7.988c.77 0 1.387 0 1.884.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v5.154c0 .77 0 1.387-.04 1.885-.042.511-.13.953-.337 1.358a3.46 3.46 0 0 1-1.511 1.512c-.406.207-.847.294-1.358.336-.498.04-1.115.04-1.885.04H13.59c-.614 0-.835.004-1.04.046a2.21 2.21 0 0 0-.56.196c-.187.096-.361.231-.841.615l-2.273 1.819a7.34 7.34 0 0 1-.489.37c-.138.092-.36.222-.636.222-.334 0-.65-.151-.858-.413-.173-.215-.21-.47-.225-.635-.015-.17-.015-.383-.015-.613V18.29c-.503-.005-.88-.027-1.215-.116a3.458 3.458 0 0 1-2.445-2.446c-.118-.44-.118-.957-.118-1.738V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041ZM6.223 4.162c-.433.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.036.441-.037 1.007-.037 1.81v5.856c0 .918.005 1.255.075 1.516.204.762.8 1.357 1.562 1.561.26.07.597.076 1.516.076.345 0 .625.28.625.625v2.475c.06-.046.129-.101.212-.168l2.253-1.802.049-.04c.413-.33.69-.552 1.004-.712.277-.142.572-.245.878-.308.345-.07.7-.07 1.228-.07h2.44c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204.416-.212.754-.55.965-.965.102-.2.17-.459.204-.893.037-.44.037-1.006.037-1.81v-5.1c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204-.441-.037-1.007-.037-1.81-.037H8.033c-.803 0-1.369 0-1.81.037ZM7.922 20.46v.002-.002Z" clip-rule="evenodd"/>
</svg>`;
  const CheckCircleFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.076 11.576a.6.6 0 0 1 .848 0L10.5 14.15l5.576-5.575a.6.6 0 0 1 .848.848l-6 6a.6.6 0 0 1-.848 0l-3-3a.6.6 0 0 1 0-.848ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const CheckCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.076 11.576a.6.6 0 0 1 .848 0L10.5 14.15l5.576-5.575a.6.6 0 0 1 .848.848l-6 6a.6.6 0 0 1-.848 0l-3-3a.6.6 0 0 1 0-.848ZM12 20.8a8.8 8.8 0 1 0 0-17.6 8.8 8.8 0 0 0 0 17.6ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const Check = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M20.424 5.576a.6.6 0 0 1 0 .848l-11 11a.6.6 0 0 1-.848 0l-5-5a.6.6 0 0 1 .848-.848L9 16.15 19.576 5.576a.6.6 0 0 1 .848 0Z" clip-rule="evenodd"/>
</svg>`;
  const ChevronDown = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.576 8.576a.6.6 0 0 1 .848 0L12 14.15l5.576-5.575a.6.6 0 0 1 .848.848l-6 6a.6.6 0 0 1-.848 0l-6-6a.6.6 0 0 1 0-.848Z" clip-rule="evenodd"/>
</svg>`;
  const ChevronLeft = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M15.424 5.576a.6.6 0 0 1 0 .848L9.848 12l5.576 5.576a.6.6 0 0 1-.848.848l-6-6a.6.6 0 0 1 0-.848l6-6a.6.6 0 0 1 .848 0Z" clip-rule="evenodd"/>
</svg>`;
  const ChevronRight = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.576 5.576a.6.6 0 0 1 .848 0l6 6a.6.6 0 0 1 0 .848l-6 6a.6.6 0 0 1-.848-.848L14.15 12 8.576 6.424a.6.6 0 0 1 0-.848Z" clip-rule="evenodd"/>
</svg>`;
  const ChevronSelectorVertical = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M11.558 3.558a.625.625 0 0 1 .884 0l5 5a.625.625 0 1 1-.884.884L12 4.884 7.442 9.442a.625.625 0 1 1-.884-.884l5-5Zm-5 11a.625.625 0 0 1 .884 0L12 19.116l4.558-4.558a.625.625 0 1 1 .884.884l-5 5a.625.625 0 0 1-.884 0l-5-5a.625.625 0 0 1 0-.884Z"/>
</svg>`;
  const ChevronUp = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.576 8.576a.6.6 0 0 1 .848 0l6 6a.6.6 0 0 1-.848.848L12 9.85l-5.576 5.575a.6.6 0 0 1-.848-.848l6-6Z" clip-rule="evenodd"/>
</svg>`;
  const Clock = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.6 6a.6.6 0 1 0-1.2 0v6a.6.6 0 0 0 .332.537l4 2a.6.6 0 1 0 .537-1.074L12.6 11.63V6Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Zm8.8-10a8.8 8.8 0 1 1-17.6 0 8.8 8.8 0 0 1 17.6 0Z" clip-rule="evenodd"/>
</svg>`;
  const CloudCheck = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M15.925 11.076a.6.6 0 0 1 0 .848l-4.5 4.5a.6.6 0 0 1-.849 0l-2-2a.6.6 0 1 1 .849-.848L11 15.15l4.076-4.075a.6.6 0 0 1 .849 0Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12 4.4a6.602 6.602 0 0 0-6.425 5.084A5.101 5.101 0 0 0 6.5 19.6h11a5.1 5.1 0 0 0 .925-10.116A6.602 6.602 0 0 0 12 4.4Zm-5.328 5.717a5.402 5.402 0 0 1 10.656 0 .6.6 0 0 0 .537.5A3.9 3.9 0 0 1 17.5 18.4h-11a3.9 3.9 0 0 1-.365-7.783.6.6 0 0 0 .537-.5Z" clip-rule="evenodd"/>
</svg>`;
  const CloudDownload = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.575 7.484a6.602 6.602 0 0 1 12.85 0 5.101 5.101 0 0 1 1.909 9.257.6.6 0 1 1-.668-.997 3.9 3.9 0 0 0-1.801-7.127.6.6 0 0 1-.537-.5 5.402 5.402 0 0 0-10.656 0 .6.6 0 0 1-.537.5 3.9 3.9 0 0 0-1.801 7.127.6.6 0 0 1-.668.997 5.101 5.101 0 0 1 1.909-9.257ZM12 11.4a.6.6 0 0 1 .6.6v7.552l2.976-2.976a.6.6 0 0 1 .848.848l-4 4a.6.6 0 0 1-.848 0l-4-4a.6.6 0 0 1 .848-.848l2.976 2.976V12a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const CloudUpload = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.575 7.484a6.602 6.602 0 0 1 12.85 0 5.101 5.101 0 0 1 1.909 9.257.6.6 0 1 1-.668-.997 3.9 3.9 0 0 0-1.801-7.127.6.6 0 0 1-.537-.5 5.402 5.402 0 0 0-10.656 0 .6.6 0 0 1-.537.5 3.9 3.9 0 0 0-1.801 7.127.6.6 0 0 1-.668.997 5.101 5.101 0 0 1 1.909-9.257Zm5.825 5.964-2.976 2.976a.6.6 0 0 1-.848-.848l4-4a.6.6 0 0 1 .848 0l4 4a.6.6 0 0 1-.848.848L12.6 13.448V21a.6.6 0 1 1-1.2 0v-7.552Z" clip-rule="evenodd"/>
</svg>`;
  const Cloud = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.575 9.484a6.602 6.602 0 0 1 12.85 0A5.101 5.101 0 0 1 17.5 19.6h-11a5.1 5.1 0 0 1-.925-10.116ZM12 5.6a5.402 5.402 0 0 0-5.328 4.517.6.6 0 0 1-.537.5A3.9 3.9 0 0 0 6.5 18.4h11a3.9 3.9 0 0 0 .365-7.783.6.6 0 0 1-.537-.5A5.402 5.402 0 0 0 12 5.6Z" clip-rule="evenodd"/>
</svg>`;
  const Compass = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M15.819 7.514c-.252-.09-.498-.047-.664-.008-.17.04-.375.108-.599.183L10.07 9.184l-.03.01c-.106.035-.255.084-.386.173a1.1 1.1 0 0 0-.287.287c-.09.13-.138.28-.173.386l-.01.03-1.495 4.486c-.075.224-.143.43-.183.599-.04.166-.081.412.008.664a1.1 1.1 0 0 0 .667.666c.252.09.498.048.664.01.17-.04.375-.11.599-.184l4.486-1.495.03-.01a1.5 1.5 0 0 0 .386-.173 1.1 1.1 0 0 0 .287-.287c.089-.13.138-.28.173-.386l.01-.03 1.495-4.486c.075-.224.143-.43.183-.599.04-.166.081-.412-.009-.664a1.1 1.1 0 0 0-.666-.667Zm-.907 1.321c.16-.053.28-.093.374-.122-.028.094-.068.214-.121.375l-1.488 4.463a9.04 9.04 0 0 1-.029.086l-.003.008-.008.003-.086.03-4.463 1.487c-.16.053-.28.093-.375.122.029-.094.068-.214.122-.375l1.488-4.463c.011-.035.02-.063.029-.086l.002-.008.009-.003a9.04 9.04 0 0 1 .086-.03l4.463-1.487Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Zm8.8-10a8.8 8.8 0 1 1-17.6 0 8.8 8.8 0 0 1 17.6 0Z" clip-rule="evenodd"/>
</svg>`;
  const Cross = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M6.576 6.576a.6.6 0 0 1 .848 0L12 11.152l4.576-4.576a.6.6 0 0 1 .848.848L12.848 12l4.576 4.576a.6.6 0 0 1-.848.848L12 12.85l-4.576 4.575a.6.6 0 0 1-.848-.848L11.15 12 6.576 7.424a.6.6 0 0 1 0-.848Z" clip-rule="evenodd"/>
</svg>`;
  const CursorFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="m5.207 3.488.024.009 15.04 5.399c.273.098.514.184.696.268.163.074.427.208.573.476.169.31.174.685.013 1-.139.271-.4.412-.56.49-.18.09-.419.182-.69.287l-6.334 2.464-.064.025-.025.063-2.463 6.335c-.105.27-.198.51-.287.69-.079.16-.22.42-.49.559-.316.16-.69.156-1-.013-.268-.146-.402-.41-.477-.573a9.65 9.65 0 0 1-.268-.696L3.496 5.231l-.008-.024a7.47 7.47 0 0 1-.195-.59c-.042-.16-.093-.409-.004-.665.108-.31.352-.555.663-.663.256-.088.504-.038.665.004.167.043.37.116.59.195Z" clip-rule="evenodd"/>
</svg>`;
  const Cursor = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="m5.207 3.488.024.008 15.04 5.4c.273.097.514.184.696.268.163.074.427.208.573.476.169.31.174.685.013 1-.139.271-.4.412-.56.49-.18.089-.418.182-.689.287l-6.335 2.463-.063.025a7.215 7.215 0 0 0-.026.064l-2.463 6.335c-.105.27-.198.51-.286.689-.08.16-.22.421-.491.56-.315.16-.69.156-1-.013-.268-.146-.402-.41-.476-.573-.084-.182-.17-.423-.269-.696L3.496 5.23l-.008-.024a7.47 7.47 0 0 1-.195-.59c-.042-.16-.092-.41-.004-.665.108-.311.352-.555.663-.663.256-.088.504-.038.665.004.167.043.37.116.59.195Zm-.69 1.029.109.308 5.39 15.016c.056.157.102.283.141.387.042-.103.09-.228.151-.383l2.454-6.31.01-.025c.033-.086.082-.214.162-.326a1.07 1.07 0 0 1 .25-.25 1.446 1.446 0 0 1 .35-.172l6.31-2.454c.156-.06.281-.11.384-.151a18 18 0 0 0-.387-.141L4.825 4.626a21.865 21.865 0 0 0-.308-.11Z" clip-rule="evenodd"/>
</svg>`;
  const DashCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.4 12a.6.6 0 0 1 .6-.6h8a.6.6 0 1 1 0 1.2H8a.6.6 0 0 1-.6-.6Zm4.6 8.8a8.8 8.8 0 1 0 0-17.6 8.8 8.8 0 0 0 0 17.6ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const DashSquare = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.4 12a.6.6 0 0 1 .6-.6h8a.6.6 0 1 1 0 1.2H8a.6.6 0 0 1-.6-.6Zm8.8-7.8H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v8.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h8.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V7.8c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036Zm-12.873.438C3 5.28 3 6.12 3 7.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 21 6.12 21 7.8 21h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 18.72 21 17.88 21 16.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C18.72 3 17.88 3 16.2 3H7.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311Z" clip-rule="evenodd"/>
</svg>`;
  const Dash = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M4.4 12a.6.6 0 0 1 .6-.6h14a.6.6 0 1 1 0 1.2H5a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Download = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 2.4a.6.6 0 0 1 .6.6v10.552l3.976-3.976a.6.6 0 0 1 .848.848l-5 5a.6.6 0 0 1-.848 0l-5-5a.6.6 0 0 1 .848-.848l3.976 3.976V3a.6.6 0 0 1 .6-.6Zm-9 12a.6.6 0 0 1 .6.6v1.2c0 .85 0 1.451.039 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h8.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V15a.6.6 0 1 1 1.2 0v1.226c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H7.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V15a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Edit = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M17.458 2.658a2.746 2.746 0 1 1 3.884 3.884l-8.963 8.963-.046.046c-.301.301-.524.524-.79.687-.235.144-.49.25-.759.314-.303.073-.618.073-1.044.073H8A.625.625 0 0 1 7.375 16v-1.74c0-.426 0-.74.072-1.044.065-.268.17-.524.315-.76.163-.265.386-.488.687-.789l.046-.046 8.963-8.963Zm3 .884a1.496 1.496 0 0 0-2.116 0l-8.963 8.963c-.367.367-.475.48-.551.605a1.368 1.368 0 0 0-.165.397c-.034.142-.038.3-.038.819v1.049h1.05c.518 0 .676-.004.818-.038.14-.034.274-.09.397-.165.124-.076.238-.184.605-.551l8.963-8.963a1.496 1.496 0 0 0 0-2.116Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M7.273 3.875H10.5a.625.625 0 1 1 0 1.25H7.3c-.85 0-1.45 0-1.92.039-.461.038-.74.109-.958.22-.447.228-.81.59-1.038 1.038-.111.218-.182.497-.22.958-.039.47-.039 1.07-.039 1.92v7.4c0 .85 0 1.45.039 1.92.038.461.109.74.22.958.228.447.59.81 1.038 1.038.218.111.497.183.958.22.47.039 1.07.039 1.92.039h7.4c.85 0 1.45 0 1.92-.039.461-.037.74-.109.958-.22.447-.228.81-.59 1.038-1.038.111-.218.183-.497.22-.959.039-.468.039-1.069.039-1.919v-3.2a.625.625 0 1 1 1.25 0v3.227c0 .817 0 1.468-.043 1.994-.044.54-.136 1.001-.352 1.425a3.625 3.625 0 0 1-1.584 1.584c-.424.216-.886.308-1.425.352-.526.043-1.177.043-1.994.043H7.273c-.817 0-1.469 0-1.994-.043-.54-.044-1.001-.136-1.425-.352a3.625 3.625 0 0 1-1.584-1.584c-.216-.424-.308-.886-.352-1.425-.043-.526-.043-1.177-.043-1.994V9.273c0-.817 0-1.469.043-1.994.044-.54.136-1.001.352-1.425A3.625 3.625 0 0 1 3.854 4.27c.424-.216.886-.308 1.425-.352.525-.043 1.177-.043 1.994-.043Z"/>
</svg>`;
  const ExclamationCircleFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10ZM12 7.4a.6.6 0 0 1 .6.6v5a.6.6 0 1 1-1.2 0V8a.6.6 0 0 1 .6-.6Zm0 7.75a.85.85 0 0 0 0 1.7h.01a.85.85 0 1 0 0-1.7H12Z" clip-rule="evenodd"/>
</svg>`;
  const ExclamationCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.6 8a.6.6 0 1 0-1.2 0v5a.6.6 0 1 0 1.2 0V8Zm-1.45 8c0-.47.38-.85.85-.85h.01a.85.85 0 0 1 0 1.7H12a.85.85 0 0 1-.85-.85Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10Zm8.8-10a8.8 8.8 0 1 1-17.6 0 8.8 8.8 0 0 1 17.6 0Z" clip-rule="evenodd"/>
</svg>`;
  const ExclamationTriangleFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.36 2.286a1.574 1.574 0 0 1 1.28 0c.295.13.5.368.664.6.163.23.34.537.55.898l8.043 13.892c.21.363.388.67.506.927.12.26.224.556.19.878a1.574 1.574 0 0 1-.64 1.11c-.261.19-.57.249-.854.275-.282.026-.637.026-1.056.026H3.957c-.419 0-.774 0-1.056-.026-.284-.026-.593-.085-.855-.275a1.574 1.574 0 0 1-.64-1.11c-.033-.322.07-.618.19-.878.12-.256.297-.564.507-.927l8.043-13.892c.21-.361.387-.668.55-.898.164-.232.37-.47.664-.6Zm1.24 6.801a.6.6 0 1 0-1.2 0v4.872a.6.6 0 1 0 1.2 0V9.087Zm-.6 6.945a.85.85 0 0 0 0 1.7h.01a.85.85 0 1 0 0-1.7H12Z" clip-rule="evenodd"/>
</svg>`;
  const ExclamationTriangle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12 8.487a.6.6 0 0 1 .6.6v4.872a.6.6 0 0 1-1.2 0V9.087a.6.6 0 0 1 .6-.6Zm-.85 8.395c0-.47.38-.85.85-.85h.01a.85.85 0 1 1 0 1.7H12a.85.85 0 0 1-.85-.85Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12.64 2.286a1.574 1.574 0 0 0-1.28 0c-.295.131-.5.368-.665.6-.162.23-.34.537-.549.898L2.103 17.677c-.21.362-.388.67-.507.926-.12.26-.223.556-.19.878.047.444.28.847.64 1.11.262.19.57.25.855.275.282.026.637.026 1.056.026h16.086c.419 0 .774 0 1.056-.026.284-.026.593-.084.854-.275.361-.263.594-.666.64-1.11.034-.322-.07-.618-.19-.878a12.493 12.493 0 0 0-.506-.927L13.854 3.784c-.21-.361-.387-.668-.55-.897-.165-.233-.37-.47-.665-.601Zm-.792 1.096a.374.374 0 0 1 .304 0c.003.002.055.032.173.198.127.18.277.438.505.83l8.014 13.843c.228.394.377.654.47.854.086.186.086.246.086.25a.374.374 0 0 1-.152.263c-.003.002-.056.033-.26.051-.219.02-.519.021-.974.021H3.986c-.455 0-.755 0-.975-.02-.21-.02-.259-.052-.259-.052a.374.374 0 0 1-.152-.263c0-.004 0-.065.086-.25.092-.2.242-.46.47-.854L11.17 4.41c.227-.393.378-.651.505-.83.122-.173.173-.199.173-.199Z" clip-rule="evenodd"/>
</svg>`;
  const Exclamation = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.6 8a.6.6 0 1 0-1.2 0v5a.6.6 0 1 0 1.2 0V8Zm-1.45 8c0-.47.38-.85.85-.85h.01a.85.85 0 0 1 0 1.7H12a.85.85 0 0 1-.85-.85Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M3 7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8Zm4.8-3.6h8.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v8.4c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V7.8c0-.86 0-1.433.037-1.873.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16C6.367 4.202 6.94 4.2 7.8 4.2Z" clip-rule="evenodd"/>
</svg>`;
  const EyeFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.333 7.014C7.017 5.61 9.263 4.4 12 4.4c2.738 0 4.984 1.21 6.667 2.614 1.682 1.404 2.84 3.033 3.42 3.952.008.01.014.021.02.032.12.19.24.377.3.644a1.76 1.76 0 0 1 0 .715c-.06.268-.18.456-.3.645l-.02.031c-.58.92-1.738 2.548-3.42 3.952C16.984 18.391 14.738 19.6 12 19.6s-4.983-1.21-6.667-2.615c-1.682-1.404-2.84-3.032-3.42-3.951l-.02-.032c-.12-.19-.239-.377-.3-.645a1.763 1.763 0 0 1 0-.715c.061-.267.18-.455.3-.644l.02-.032c.58-.92 1.738-2.548 3.42-3.952ZM12 9.6a2.4 2.4 0 1 0 0 4.8 2.4 2.4 0 0 0 0-4.8ZM8.4 12a3.6 3.6 0 1 1 7.2 0 3.6 3.6 0 0 1-7.2 0Z" clip-rule="evenodd"/>
</svg>`;
  const EyeSlashFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M3.425 2.576a.6.6 0 1 0-.849.848l3.22 3.22c-.158.122-.313.245-.463.37-1.682 1.404-2.84 3.033-3.42 3.952l-.02.032c-.12.19-.239.377-.3.645a1.762 1.762 0 0 0 0 .714c.061.268.18.456.3.645l.02.031c.58.92 1.738 2.548 3.42 3.952C7.017 18.391 9.263 19.6 12 19.6c2.008 0 3.75-.65 5.201-1.55l3.375 3.374a.6.6 0 0 0 .849-.848l-3.22-3.22v-.002l-3.27-3.27v.002l-.867-.867.001-.002-3.286-3.286-.002.001-.867-.867h.002L6.8 5.95 3.425 2.577Zm5.64 7.338a3.6 3.6 0 0 0 5.02 5.02l-.866-.866a2.4 2.4 0 0 1-3.287-3.287l-.866-.867Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M12.08 8.4a3.6 3.6 0 0 1 3.52 3.52l4.108 4.108a17.903 17.903 0 0 0 2.38-2.994l.02-.032c.12-.19.238-.377.3-.645a1.76 1.76 0 0 0 0-.714c-.062-.268-.18-.456-.3-.645l-.02-.032c-.58-.92-1.739-2.548-3.42-3.952C16.983 5.61 14.737 4.4 12 4.4c-1.2 0-2.304.232-3.309.611l3.39 3.39Z"/>
</svg>`;
  const EyeSlash = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M2.576 2.576a.6.6 0 0 1 .849 0l3.657 3.657a.598.598 0 0 1 .123.123l10.43 10.431a.6.6 0 0 1 .143.142l3.647 3.647a.6.6 0 0 1-.849.848l-3.375-3.375c-1.45.9-3.194 1.551-5.2 1.551-2.739 0-4.984-1.21-6.668-2.615-1.682-1.404-2.84-3.032-3.42-3.951a8.717 8.717 0 0 0-.02-.032c-.12-.19-.239-.377-.3-.645a1.762 1.762 0 0 1 0-.715c.061-.268.18-.455.3-.645l.02-.032c.63-.998 1.947-2.841 3.883-4.32l-3.22-3.22a.6.6 0 0 1 0-.85ZM6.653 7.5c-1.842 1.37-3.114 3.139-3.725 4.105-.146.232-.154.255-.166.305l-.003.027a.674.674 0 0 0 0 .124l.003.027c.012.05.02.073.165.304.545.862 1.625 2.377 3.175 3.671C7.652 17.357 9.633 18.4 12 18.4c1.63 0 3.078-.494 4.327-1.225l-2.24-2.24a3.6 3.6 0 0 1-5.02-5.02L6.652 7.5Zm3.28 3.28a2.4 2.4 0 0 0 3.287 3.287L9.933 10.78ZM12 5.6c-.402 0-.791.03-1.17.086a.6.6 0 0 1-.175-1.187A9.187 9.187 0 0 1 12 4.4c2.738 0 4.984 1.21 6.667 2.615 1.682 1.404 2.84 3.032 3.42 3.951l.02.032c.12.19.24.377.3.645.05.213.05.502 0 .715-.06.268-.18.456-.3.646l-.02.032a18.08 18.08 0 0 1-1.41 1.93.6.6 0 1 1-.92-.77 16.91 16.91 0 0 0 1.315-1.8c.147-.234.155-.257.166-.307l.004-.027a.706.706 0 0 0 0-.124l-.004-.027c-.011-.05-.019-.073-.165-.304-.544-.862-1.624-2.377-3.175-3.671C16.35 6.643 14.368 5.6 12 5.6Z" clip-rule="evenodd"/>
</svg>`;
  const Eye = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M6.102 7.936c-1.55 1.294-2.63 2.809-3.175 3.671-.146.231-.153.254-.165.304l-.003.027a.676.676 0 0 0 0 .124l.003.027c.012.05.02.073.165.304.545.862 1.625 2.377 3.175 3.671C7.652 17.357 9.633 18.4 12 18.4c2.367 0 4.35-1.043 5.898-2.336 1.55-1.294 2.63-2.809 3.175-3.671.146-.231.154-.254.165-.304l.004-.027a.667.667 0 0 0 0-.124l-.004-.027c-.011-.05-.019-.073-.165-.304-.544-.862-1.624-2.377-3.175-3.671C16.35 6.643 14.368 5.6 12 5.6c-2.367 0-4.349 1.043-5.898 2.336Zm-.769-.921C7.017 5.609 9.263 4.4 12 4.4c2.738 0 4.984 1.21 6.667 2.615 1.682 1.404 2.84 3.032 3.42 3.951l.02.032c.12.19.24.377.3.645a1.76 1.76 0 0 1 0 .714c-.06.268-.18.456-.3.645l-.02.032c-.58.92-1.738 2.547-3.42 3.951C16.984 18.391 14.738 19.6 12 19.6s-4.983-1.21-6.667-2.615c-1.682-1.404-2.84-3.032-3.42-3.951l-.02-.032c-.12-.19-.239-.377-.3-.645a1.763 1.763 0 0 1 0-.714c.061-.268.18-.456.3-.645l.02-.032c.58-.92 1.738-2.547 3.42-3.951ZM12 9.6a2.4 2.4 0 1 0 0 4.8 2.4 2.4 0 0 0 0-4.8ZM8.4 12a3.6 3.6 0 1 1 7.2 0 3.6 3.6 0 0 1-7.2 0Z" clip-rule="evenodd"/>
</svg>`;
  const Facebook = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M21 12.055C21 7.054 16.97 3 12.001 3 7.03 3.001 3 7.054 3 12.056c0 4.519 3.291 8.265 7.593 8.944v-6.327H8.309v-2.617h2.286V10.06c0-2.27 1.344-3.522 3.4-3.522.985 0 2.014.176 2.014.176v2.228h-1.135c-1.117 0-1.466.698-1.466 1.415v1.698h2.495l-.398 2.617h-2.098v6.327C17.71 20.319 21 16.574 21 12.055Z"/>
</svg>`;
  const FileEarmarkText = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M14.6 2.639a2.503 2.503 0 0 0-.275-.197 3.003 3.003 0 0 0-.893-.365C13.094 2 12.727 2 12.012 2H8.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C4 4.28 4 5.12 4 6.8v10.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C6.28 22 7.12 22 8.8 22h6.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C20 19.72 20 18.88 20 17.2V9.988c0-.715 0-1.082-.077-1.42a2.997 2.997 0 0 0-.365-.893 2.485 2.485 0 0 0-.197-.275c-.172-.211-.407-.446-.767-.806l-3.188-3.188c-.36-.36-.595-.595-.806-.767Zm-1.2.68a1.805 1.805 0 0 0-.222-.07c-.176-.041-.375-.049-1.166-.049H8.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C5.202 5.367 5.2 5.94 5.2 6.8v10.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h6.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V9.988c0-.79-.008-.99-.05-1.166a1.805 1.805 0 0 0-.069-.222h-3.103c-.261 0-.492 0-.684-.016a1.626 1.626 0 0 1-.62-.158 1.6 1.6 0 0 1-.7-.7 1.626 1.626 0 0 1-.158-.62c-.016-.192-.016-.423-.016-.684V3.32ZM17.703 7.4H15.6c-.29 0-.471 0-.608-.012a.493.493 0 0 1-.174-.032.4.4 0 0 1-.174-.174.494.494 0 0 1-.032-.174A8.479 8.479 0 0 1 14.6 6.4V4.297L17.703 7.4ZM14.6 17a.6.6 0 0 1-.6.6H8a.6.6 0 1 1 0-1.2h6a.6.6 0 0 1 .6.6Zm2-4a.6.6 0 0 1-.6.6H8a.6.6 0 1 1 0-1.2h8a.6.6 0 0 1 .6.6Z" clip-rule="evenodd"/>
</svg>`;
  const FilePdf = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.686 16.125a.911.911 0 0 0 .493.473c.213.072.447.06.652-.033.358-.148.716-.491 1.042-.885a12.82 12.82 0 0 0 1.149-1.699c.734-.217 1.485-.37 2.246-.457.3.395.643.754 1.025 1.07.314.248.677.453 1.05.468a.963.963 0 0 0 .573-.155c.172-.118.31-.28.399-.468a1.31 1.31 0 0 0 .155-.633.952.952 0 0 0-.225-.583c-.254-.304-.67-.45-1.08-.523a6.47 6.47 0 0 0-1.5-.056 12.32 12.32 0 0 1-1.103-1.897c.28-.743.49-1.445.585-2.019.04-.246.06-.48.053-.69a1.399 1.399 0 0 0-.143-.606.787.787 0 0 0-.537-.41c-.227-.049-.461 0-.677.086-.423.17-.647.528-.731.926-.083.383-.045.828.051 1.278.115.5.277.988.484 1.457-.345.86-.745 1.696-1.195 2.506A8.645 8.645 0 0 0 8.785 14c-.417.247-.786.54-1.01.886-.235.366-.308.803-.09 1.24Zm1.528-1.398c.156-.092.33-.182.516-.268a9.2 9.2 0 0 1-.506.682c-.315.38-.56.58-.715.643a.304.304 0 0 1-.039.014.257.257 0 0 1-.03-.05c-.062-.124-.06-.242.046-.406.12-.184.359-.397.728-.615Zm3.497-1.981c-.381.057-.76.13-1.136.217v-.001c.199-.389.386-.782.563-1.181.177.33.368.651.573.965Zm1.617.724c.168.182.332.337.488.46.27.214.458.285.56.289a.12.12 0 0 0 .08-.017.345.345 0 0 0 .105-.141.49.49 0 0 0 .066-.225.107.107 0 0 0-.029-.07c-.058-.07-.225-.172-.583-.236a4.363 4.363 0 0 0-.687-.06Zm-2.24-3.947a7.41 7.41 0 0 0 .225-.93c.035-.211.048-.385.043-.523a.689.689 0 0 0-.036-.222.581.581 0 0 0-.163.045c-.098.039-.178.119-.22.318-.046.216-.035.528.05.925.028.124.061.254.102.387Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M4 6.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C6.28 2 7.12 2 8.8 2h6.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C20 4.28 20 5.12 20 6.8v10.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C17.72 22 16.88 22 15.2 22H8.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C4 19.72 4 18.88 4 17.2V6.8Zm11.2 14H8.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V6.8c0-.86 0-1.433.037-1.873.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16C7.367 3.202 7.94 3.2 8.8 3.2h6.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v10.4c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036Z" clip-rule="evenodd"/>
</svg>`;
  const FilePlus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M14.727 1.9H9.274c-.818 0-1.468 0-1.993.043-.537.044-.995.136-1.415.35a3.6 3.6 0 0 0-1.573 1.573c-.214.42-.306.877-.35 1.415C3.9 5.806 3.9 6.456 3.9 7.274v9.452c0 .818 0 1.469.043 1.993.044.538.136.996.35 1.415a3.6 3.6 0 0 0 1.573 1.574c.42.213.878.305 1.415.35.525.042 1.175.042 1.993.042H12.5a.6.6 0 1 0 0-1.2H9.3c-.85 0-1.451 0-1.921-.039-.463-.038-.746-.11-.968-.223a2.4 2.4 0 0 1-1.049-1.048c-.113-.223-.185-.505-.223-.968-.038-.47-.039-1.072-.039-1.922V7.3c0-.85 0-1.451.04-1.922.037-.463.109-.745.222-.968a2.4 2.4 0 0 1 1.049-1.048c.222-.114.505-.185.968-.223C7.849 3.1 8.45 3.1 9.3 3.1h5.4c.85 0 1.452 0 1.922.039.463.038.746.11.968.223a2.4 2.4 0 0 1 1.049 1.048c.113.223.185.505.223.968.038.47.038 1.072.038 1.922V11a.6.6 0 1 0 1.2 0V7.274c0-.818 0-1.468-.043-1.993-.043-.538-.135-.996-.349-1.415a3.6 3.6 0 0 0-1.573-1.574c-.42-.213-.878-.305-1.415-.35-.525-.042-1.175-.042-1.993-.042Z"/>
  <path fill="currentColor" d="M18.6 15a.6.6 0 0 0-1.2 0v2.4H15a.6.6 0 0 0 0 1.2h2.4V21a.6.6 0 1 0 1.2 0v-2.4H21a.6.6 0 1 0 0-1.2h-2.4V15Z"/>
</svg>`;
  const FileText = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M14.6 11a.6.6 0 0 1-.6.6H8a.6.6 0 1 1 0-1.2h6a.6.6 0 0 1 .6.6Zm-4 4a.6.6 0 0 1-.6.6H8a.6.6 0 1 1 0-1.2h2a.6.6 0 0 1 .6.6Zm6-8a.6.6 0 0 1-.6.6H8a.6.6 0 0 1 0-1.2h8a.6.6 0 0 1 .6.6ZM8.8 20.8h6.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V6.8c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H8.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C5.202 5.367 5.2 5.94 5.2 6.8v10.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036ZM4.327 3.638C4 4.28 4 5.12 4 6.8v10.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C6.28 22 7.12 22 8.8 22h6.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C20 19.72 20 18.88 20 17.2V6.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C17.72 2 16.88 2 15.2 2H8.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311Z" clip-rule="evenodd"/>
</svg>`;
  const File = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.8 20.8h6.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V6.8c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H8.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C5.202 5.367 5.2 5.94 5.2 6.8v10.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036ZM4.327 3.638C4 4.28 4 5.12 4 6.8v10.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C6.28 22 7.12 22 8.8 22h6.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C20 19.72 20 18.88 20 17.2V6.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C17.72 2 16.88 2 15.2 2H8.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311Z" clip-rule="evenodd"/>
</svg>`;
  const Files = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M18.8 6.8v9.8a.6.6 0 1 0 1.2 0V6.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C17.72 2 16.88 2 15.2 2H9.4a.6.6 0 1 0 0 1.2h5.8c.86 0 1.432 0 1.873.037.425.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.159.744.036.44.037 1.013.037 1.873Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M4 9.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C6.28 5 7.12 5 8.8 5h3.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C17 7.28 17 8.12 17 9.8v7.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C14.72 22 13.88 22 12.2 22H8.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C4 19.72 4 18.88 4 17.2V9.8Zm8.2 11H8.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.8c0-.86 0-1.433.037-1.873.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16C7.367 6.202 7.94 6.2 8.8 6.2h3.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v7.4c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036Z" clip-rule="evenodd"/>
</svg>`;
  const FolderCheck = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M15.925 11.924a.6.6 0 1 0-.849-.848L11 15.15l-1.575-1.575a.6.6 0 1 0-.849.848l2 2a.6.6 0 0 0 .849 0l4.5-4.5Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12.871 6.9h3.856c.817 0 1.468 0 1.993.043.537.044.995.136 1.415.35a3.6 3.6 0 0 1 1.573 1.573c.214.42.306.877.35 1.415.042.524.042 1.175.042 1.993v3.452c0 .818 0 1.469-.043 1.993-.043.538-.135.996-.349 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.176.042-1.993.042H7.274c-.818 0-1.468 0-1.993-.043-.537-.044-.995-.136-1.415-.35a3.6 3.6 0 0 1-1.573-1.573c-.214-.42-.306-.877-.35-1.415-.043-.524-.043-1.175-.043-1.993V6.675c0-.539 0-.98.03-1.337.03-.371.095-.706.254-1.018A2.6 2.6 0 0 1 3.32 3.183c.313-.159.647-.224 1.018-.254.358-.029.799-.029 1.337-.029h2.943c.625 0 1.08 0 1.494.142a2.6 2.6 0 0 1 .972.6c.312.307.516.714.795 1.273L12.87 6.9ZM8.523 4.1c.761 0 .999.008 1.198.076a1.4 1.4 0 0 1 .523.324c.15.147.264.356.604 1.037L11.53 6.9H3.1v-.2c0-.57 0-.961.026-1.265.024-.296.068-.455.127-.57a1.4 1.4 0 0 1 .612-.612c.115-.06.274-.104.57-.128C4.74 4.1 5.13 4.1 5.7 4.1h2.823Zm3.99 4H3.1v7.6c0 .85 0 1.451.04 1.922.037.463.109.745.222.968a2.4 2.4 0 0 0 1.049 1.048c.222.114.505.185.968.223.47.038 1.071.039 1.921.039h9.4c.85 0 1.452 0 1.922-.039.463-.038.746-.11.968-.223a2.4 2.4 0 0 0 1.049-1.049c.113-.222.185-.504.223-.967.038-.47.038-1.072.038-1.922v-3.4c0-.85 0-1.451-.038-1.922-.038-.463-.11-.745-.223-.968a2.4 2.4 0 0 0-1.049-1.048c-.222-.114-.505-.185-.968-.223C18.152 8.1 17.55 8.1 16.7 8.1h-4.187Z" clip-rule="evenodd"/>
</svg>`;
  const FolderMinus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M9 13.4h6a.6.6 0 0 1 0 1.2H9a.6.6 0 1 1 0-1.2Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M16.727 6.9H12.87l-.992-1.985c-.28-.559-.483-.966-.795-1.273a2.6 2.6 0 0 0-.972-.6C9.698 2.9 9.243 2.9 8.618 2.9H5.675c-.538 0-.979 0-1.337.03-.37.03-.705.094-1.018.253A2.6 2.6 0 0 0 2.184 4.32c-.16.312-.224.647-.254 1.018-.03.358-.03.798-.03 1.337v9.051c0 .818 0 1.469.043 1.993.044.538.136.996.35 1.415a3.6 3.6 0 0 0 1.573 1.574c.42.213.878.305 1.415.35.525.042 1.175.042 1.993.042h9.453c.817 0 1.468 0 1.993-.043.537-.044.995-.136 1.415-.35a3.6 3.6 0 0 0 1.573-1.573c.214-.42.306-.877.35-1.415.042-.524.042-1.175.042-1.993v-3.452c0-.818 0-1.468-.043-1.993-.043-.538-.135-.996-.349-1.415a3.6 3.6 0 0 0-1.573-1.574c-.42-.213-.878-.305-1.415-.35-.525-.042-1.175-.042-1.993-.042ZM9.72 4.176c-.2-.068-.437-.076-1.198-.076H5.7c-.57 0-.96 0-1.264.025-.297.024-.456.069-.571.128a1.4 1.4 0 0 0-.612.611c-.059.116-.103.275-.127.571C3.1 5.74 3.1 6.13 3.1 6.7v.2h8.43l-.682-1.363c-.34-.68-.454-.89-.604-1.037a1.4 1.4 0 0 0-.523-.324ZM12.488 8.1H16.7c.85 0 1.452 0 1.922.039.463.038.746.11.968.223a2.4 2.4 0 0 1 1.049 1.048c.113.223.185.505.223.968.038.47.038 1.072.038 1.922v3.4c0 .85 0 1.451-.038 1.922-.038.463-.11.745-.223.968a2.4 2.4 0 0 1-1.049 1.048c-.222.114-.505.185-.968.223-.47.038-1.072.039-1.922.039H7.3c-.85 0-1.451 0-1.921-.039-.463-.038-.746-.11-.968-.223a2.4 2.4 0 0 1-1.049-1.049c-.113-.222-.185-.504-.223-.967-.038-.47-.039-1.072-.039-1.922V8.1h9.388Z" clip-rule="evenodd"/>
</svg>`;
  const FolderPlus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.6 11a.6.6 0 0 0-1.2 0v2.4H9a.6.6 0 0 0 0 1.2h2.4V17a.6.6 0 1 0 1.2 0v-2.4H15a.6.6 0 1 0 0-1.2h-2.4V11Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12.871 6.9h3.856c.817 0 1.468 0 1.993.043.537.044.995.136 1.415.35a3.6 3.6 0 0 1 1.573 1.573c.214.42.306.877.35 1.415.042.524.042 1.175.042 1.993v3.452c0 .818 0 1.469-.043 1.993-.043.538-.135.996-.349 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.176.042-1.993.042H7.274c-.818 0-1.468 0-1.993-.043-.537-.044-.995-.136-1.415-.35a3.6 3.6 0 0 1-1.573-1.573c-.214-.42-.306-.877-.35-1.415-.043-.524-.043-1.175-.043-1.993V6.675c0-.539 0-.98.03-1.337.03-.371.095-.706.254-1.018A2.6 2.6 0 0 1 3.32 3.183c.313-.159.647-.224 1.018-.254.358-.029.799-.029 1.337-.029h2.943c.625 0 1.08 0 1.494.142a2.6 2.6 0 0 1 .972.6c.312.307.516.714.795 1.273L12.87 6.9ZM8.523 4.1c.761 0 .999.008 1.198.076a1.4 1.4 0 0 1 .523.324c.15.147.264.356.604 1.037L11.53 6.9H3.1v-.2c0-.57 0-.961.026-1.265.024-.296.068-.455.127-.57a1.4 1.4 0 0 1 .612-.612c.115-.06.274-.104.57-.128C4.74 4.1 5.13 4.1 5.7 4.1h2.823Zm3.99 4H3.1v7.6c0 .85 0 1.451.04 1.922.037.463.109.745.222.968a2.4 2.4 0 0 0 1.049 1.048c.222.114.505.185.968.223.47.038 1.071.039 1.921.039h9.4c.85 0 1.452 0 1.922-.039.463-.038.746-.11.968-.223a2.4 2.4 0 0 0 1.049-1.049c.113-.222.185-.504.223-.967.038-.47.038-1.072.038-1.922v-3.4c0-.85 0-1.451-.038-1.922-.038-.463-.11-.745-.223-.968a2.4 2.4 0 0 0-1.049-1.048c-.222-.114-.505-.185-.968-.223C18.152 8.1 17.55 8.1 16.7 8.1h-4.187Z" clip-rule="evenodd"/>
</svg>`;
  const Folder = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M9.72 4.176c-.199-.068-.436-.076-1.198-.076H5.7c-.57 0-.961 0-1.265.025-.296.024-.455.069-.57.128a1.4 1.4 0 0 0-.613.611c-.058.116-.103.275-.127.571C3.1 5.74 3.1 6.13 3.1 6.7v.2h8.43l-.682-1.363c-.34-.68-.454-.89-.605-1.037a1.4 1.4 0 0 0-.523-.324ZM12.87 6.9 11.922 5l-.043-.085c-.279-.559-.482-.966-.795-1.273a2.6 2.6 0 0 0-.971-.6C9.698 2.9 9.242 2.9 8.618 2.9H5.675c-.539 0-.98 0-1.338.03-.37.03-.705.094-1.017.253A2.6 2.6 0 0 0 2.183 4.32c-.159.312-.224.647-.254 1.018-.03.358-.03.798-.03 1.337v9.051c0 .818 0 1.469.044 1.993.044.538.136.996.35 1.415a3.6 3.6 0 0 0 1.573 1.574c.42.213.877.305 1.415.35.524.042 1.175.042 1.993.042h9.452c.818 0 1.468 0 1.993-.043.537-.044.996-.136 1.415-.35a3.6 3.6 0 0 0 1.573-1.573c.214-.42.306-.877.35-1.415.043-.524.043-1.175.043-1.993v-3.452c0-.818 0-1.468-.043-1.993-.044-.538-.136-.996-.35-1.415a3.6 3.6 0 0 0-1.573-1.574c-.42-.213-.878-.305-1.415-.35-.525-.042-1.175-.042-1.993-.042h-3.855Zm-.382 1.2H16.7c.85 0 1.451 0 1.921.039.464.038.746.11.969.223a2.4 2.4 0 0 1 1.048 1.048c.113.223.185.505.223.968.038.47.039 1.072.039 1.922v3.4c0 .85 0 1.451-.039 1.922-.038.463-.11.745-.223.968a2.4 2.4 0 0 1-1.049 1.048c-.222.114-.504.185-.968.223-.47.038-1.071.039-1.921.039H7.3c-.85 0-1.451 0-1.922-.039-.463-.038-.745-.11-.968-.223a2.4 2.4 0 0 1-1.049-1.049c-.113-.222-.184-.504-.222-.967-.039-.47-.04-1.072-.04-1.922V8.1h9.389Z" clip-rule="evenodd"/>
</svg>`;
  const Gear = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 2.6a1.218 1.218 0 0 0-1.218 1.218v.157a2.1 2.1 0 0 1-1.273 1.922.6.6 0 0 1-.188.047 2.1 2.1 0 0 1-2.2-.474l-.055-.055a1.218 1.218 0 1 0-1.724 1.724l.055.055a2.1 2.1 0 0 1 .432 2.304 2.1 2.1 0 0 1-1.93 1.357h-.08a1.218 1.218 0 1 0 0 2.436h.156a2.1 2.1 0 0 1 1.92 1.27 2.1 2.1 0 0 1-.425 2.318l-.055.055a1.219 1.219 0 1 0 1.724 1.724l.055-.055.003-.003.002-.002a2.1 2.1 0 0 1 2.299-.427 2.1 2.1 0 0 1 1.356 1.915v.096a1.218 1.218 0 0 0 2.437 0v-.157a2.1 2.1 0 0 1 1.27-1.92 2.1 2.1 0 0 1 2.313.42l.005.005.054.055a1.22 1.22 0 1 0 1.725-1.724l-.055-.055-.005-.005a2.099 2.099 0 0 1-.421-2.313 2.1 2.1 0 0 1 1.92-1.27h.085a1.218 1.218 0 1 0 0-2.436h-.157a2.1 2.1 0 0 1-1.922-1.273.6.6 0 0 1-.047-.188 2.1 2.1 0 0 1 .47-2.195l.002-.003.002-.002.055-.055a1.219 1.219 0 1 0-1.724-1.724l-.055.055-.005.005a2.1 2.1 0 0 1-2.313.421 2.1 2.1 0 0 1-1.27-1.92v-.085A1.218 1.218 0 0 0 12 2.6Zm-1.71-.492a2.418 2.418 0 0 1 4.128 1.71v.08a.9.9 0 0 0 .551.826.9.9 0 0 0 .991-.178l.052-.052a2.417 2.417 0 0 1 3.421 0 2.418 2.418 0 0 1 0 3.421l-.052.052a.9.9 0 0 0-.178.99c.024.054.04.11.047.168a.9.9 0 0 0 .779.457h.153a2.418 2.418 0 1 1 0 4.836h-.08a.9.9 0 0 0-.823.546l-.003.006a.9.9 0 0 0 .178.99l.052.052a2.42 2.42 0 1 1-3.421 3.421l-.052-.052a.9.9 0 0 0-.99-.178l-.007.003a.9.9 0 0 0-.545.823v.153a2.418 2.418 0 1 1-4.837 0v-.074a.9.9 0 0 0-.624-.832.9.9 0 0 0-.99.178l-.052.052a2.419 2.419 0 1 1-3.421-3.421l.051-.052a.9.9 0 0 0 .178-.99v-.004l-.002-.003a.9.9 0 0 0-.823-.545h-.153a2.418 2.418 0 1 1 0-4.836h.074a.9.9 0 0 0 .832-.625.9.9 0 0 0-.178-.99l-.052-.052a2.42 2.42 0 1 1 3.421-3.421l.052.052a.9.9 0 0 0 .99.178.6.6 0 0 1 .168-.047.9.9 0 0 0 .457-.779v-.153c0-.641.254-1.256.708-1.71ZM8.4 12a3.6 3.6 0 1 1 7.2 0 3.6 3.6 0 0 1-7.2 0ZM12 9.6a2.4 2.4 0 1 0 0 4.8 2.4 2.4 0 0 0 0-4.8Z" clip-rule="evenodd"/>
</svg>`;
  const GeoAlt = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm1.8-3a1.8 1.8 0 1 1-3.6 0 1.8 1.8 0 0 1 3.6 0Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12.959 21.046c-.318.316-.639.634-.959.954l-.005-.005c-.319-.319-.637-.635-.954-.948C7.385 17.42 4 14.064 4 10a8 8 0 1 1 16 0c0 4.064-3.385 7.421-7.041 11.046ZM18.8 10c0 1.829-.824 3.572-2.25 5.425-1.207 1.566-2.75 3.098-4.42 4.754l-.13.128-.13-.128c-1.67-1.656-3.213-3.188-4.42-4.754C6.025 13.572 5.2 11.829 5.2 10a6.8 6.8 0 1 1 13.6 0Z" clip-rule="evenodd"/>
</svg>`;
  const GeoFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 2.4a3.6 3.6 0 0 0-.6 7.15V17a.6.6 0 1 0 1.2 0V9.55A3.601 3.601 0 0 0 12 2.4Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M8.316 13.963a.6.6 0 1 0-.231-1.177c-1.729.34-3.236.904-4.328 1.64-1.08.728-1.857 1.702-1.857 2.868 0 1.563 1.38 2.78 3.137 3.57 1.813.816 4.275 1.305 6.963 1.305 2.688 0 5.151-.49 6.964-1.305 1.757-.79 3.136-2.007 3.136-3.57 0-1.166-.777-2.14-1.856-2.867-1.092-.737-2.6-1.302-4.328-1.641a.6.6 0 1 0-.231 1.177c1.627.32 2.97.839 3.888 1.458.932.63 1.327 1.285 1.327 1.873 0 .797-.747 1.719-2.428 2.475-1.626.732-3.913 1.2-6.472 1.2-2.558 0-4.846-.468-6.47-1.2-1.683-.756-2.43-1.678-2.43-2.475 0-.588.395-1.244 1.328-1.873.919-.62 2.261-1.138 3.888-1.458Z"/>
</svg>`;
  const Geo = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 2.4a3.6 3.6 0 0 0-.6 7.15V17a.6.6 0 1 0 1.2 0V9.55A3.601 3.601 0 0 0 12 2.4ZM9.6 6a2.4 2.4 0 1 1 4.8 0 2.4 2.4 0 0 1-4.8 0Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M8.316 13.963a.6.6 0 1 0-.231-1.177c-1.729.34-3.236.904-4.328 1.64-1.08.728-1.857 1.702-1.857 2.868 0 1.563 1.38 2.78 3.137 3.57 1.813.816 4.275 1.305 6.963 1.305 2.688 0 5.151-.49 6.964-1.305 1.757-.79 3.136-2.007 3.136-3.57 0-1.166-.777-2.14-1.856-2.867-1.092-.737-2.6-1.301-4.328-1.641a.6.6 0 1 0-.231 1.177c1.627.32 2.97.839 3.888 1.459.932.628 1.327 1.285 1.327 1.872 0 .797-.747 1.719-2.428 2.475-1.626.732-3.913 1.2-6.472 1.2-2.558 0-4.846-.468-6.47-1.2-1.683-.756-2.43-1.678-2.43-2.475 0-.587.395-1.244 1.328-1.873.919-.62 2.261-1.138 3.888-1.458Z"/>
</svg>`;
  const GlobeAlt = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M16.75 5.2a.863.863 0 1 0 0 1.725.863.863 0 0 0 0-1.725Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M1.875 12c0-.387.022-.768.064-1.144l.002-.019C2.518 5.793 6.801 1.875 12 1.875c.999 0 1.964.145 2.877.415a4.425 4.425 0 0 1 6.298 4.01c0 .384-.054.752-.15 1.106a10.08 10.08 0 0 1 1.1 4.594c0 5.592-4.533 10.125-10.125 10.125S1.875 17.592 1.875 12ZM12 3.125a8.878 8.878 0 0 0-8.697 7.1l4.454-.398a1.1 1.1 0 0 1 1.053.55l1.748 3.065 2.678 1.53a1.1 1.1 0 0 1 .29 1.671L11.2 19.356v1.483A8.875 8.875 0 0 0 20.875 12a8.854 8.854 0 0 0-.544-3.066c-.146.23-.305.454-.473.673-.627.813-1.428 1.608-2.22 2.393-.15.148-.299.295-.446.443a.625.625 0 0 1-.884 0c-.147-.148-.296-.295-.446-.443-.792-.785-1.593-1.58-2.22-2.393-.75-.975-1.317-2.059-1.317-3.306 0-1.179.46-2.25 1.212-3.043A8.935 8.935 0 0 0 12 3.125ZM13.575 6.3a3.175 3.175 0 0 1 6.35 0c0 .851-.383 1.667-1.058 2.543-.57.741-1.3 1.465-2.094 2.252l-.023.023-.023-.023c-.794-.787-1.524-1.511-2.094-2.252-.675-.876-1.058-1.692-1.058-2.543ZM3.125 12c0-.17.005-.339.014-.506l4.633-.413 1.72 3.016a1.1 1.1 0 0 0 .41.41l2.556 1.46-2.243 2.618a1.1 1.1 0 0 0-.265.716v1.336A8.879 8.879 0 0 1 3.125 12Z" clip-rule="evenodd"/>
</svg>`;
  const Globe = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M1.875 12C1.875 6.408 6.408 1.875 12 1.875S22.125 6.408 22.125 12 17.592 22.125 12 22.125 1.875 17.592 1.875 12Zm1.531-2.225A8.89 8.89 0 0 0 3.125 12c0 .768.098 1.514.281 2.225h4.378a15.16 15.16 0 0 1-.209-2.238 15.16 15.16 0 0 1 .209-2.212H3.406Zm.425-1.25h4.22a15.16 15.16 0 0 1 2.53-5.287 8.887 8.887 0 0 0-6.75 5.287ZM12 3.453a13.91 13.91 0 0 0-2.655 5.072h5.31A13.911 13.911 0 0 0 12 3.453Zm2.947 6.322H9.053c-.135.73-.212 1.474-.228 2.225.016.75.093 1.495.228 2.225h5.894c.135-.73.212-1.474.228-2.225a13.92 13.92 0 0 0-.228-2.225Zm1.269 4.45c.123-.727.193-1.466.209-2.212v-.026a15.169 15.169 0 0 0-.209-2.212h4.378a8.919 8.919 0 0 1 0 4.45h-4.378Zm-1.56 1.25H9.344A13.911 13.911 0 0 0 12 20.547a13.912 13.912 0 0 0 2.655-5.072Zm-4.075 5.287a15.161 15.161 0 0 1-2.53-5.287H3.83a8.887 8.887 0 0 0 6.75 5.287Zm2.838 0a15.16 15.16 0 0 0 2.53-5.287h4.22a8.887 8.887 0 0 1-6.75 5.287Zm6.75-12.237h-4.22a15.16 15.16 0 0 0-2.53-5.287 8.887 8.887 0 0 1 6.75 5.287Z" clip-rule="evenodd"/>
</svg>`;
  const Google = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M20.666 10.378a10.6 10.6 0 0 1 .156 1.83c0 2.737-.979 5.053-2.682 6.62h.002C16.653 20.203 14.606 21 12.178 21a9 9 0 0 1 0-18 8.65 8.65 0 0 1 6.02 2.343l-2.569 2.57a4.89 4.89 0 0 0-3.451-1.35c-2.348 0-4.342 1.583-5.053 3.716a5.39 5.39 0 0 0 0 3.446h.003c.714 2.13 2.706 3.713 5.053 3.713 1.213 0 2.255-.31 3.063-.86h-.004a4.163 4.163 0 0 0 1.799-2.734h-4.861V10.38h8.488Z"/>
</svg>`;
  const GridFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M4.568 2c-.252 0-.498 0-.706.017a2.022 2.022 0 0 0-.77.201 2 2 0 0 0-.874.874 2.022 2.022 0 0 0-.201.77C2 4.07 2 4.316 2 4.568v3.864c0 .252 0 .498.017.706.019.229.063.499.201.77a2 2 0 0 0 .874.874c.271.138.541.182.77.201.208.017.454.017.706.017h3.864c.252 0 .498 0 .706-.017a2.03 2.03 0 0 0 .77-.201 2 2 0 0 0 .874-.874 2.03 2.03 0 0 0 .201-.77C11 8.93 11 8.684 11 8.432V4.568c0-.252 0-.498-.017-.706a2.022 2.022 0 0 0-.201-.77 2 2 0 0 0-.874-.874 2.022 2.022 0 0 0-.77-.201C8.93 2 8.684 2 8.432 2H4.568Zm14.864 0h-3.864c-.252 0-.498 0-.706.017a2.022 2.022 0 0 0-.77.201 2 2 0 0 0-.874.874 2.022 2.022 0 0 0-.201.77C13 4.07 13 4.316 13 4.568v3.864c0 .252 0 .498.017.706.019.229.063.499.201.77a2 2 0 0 0 .874.874c.271.138.541.182.77.201.208.017.454.017.706.017h3.864c.252 0 .498 0 .706-.017a2.03 2.03 0 0 0 .77-.201 2 2 0 0 0 .874-.874 2.03 2.03 0 0 0 .201-.77C22 8.93 22 8.684 22 8.432V4.568c0-.252 0-.498-.017-.706a2.022 2.022 0 0 0-.201-.77 2 2 0 0 0-.874-.874 2.022 2.022 0 0 0-.77-.201C19.93 2 19.684 2 19.432 2Zm-11 11H4.568c-.252 0-.498 0-.706.017a2.022 2.022 0 0 0-.77.201 2 2 0 0 0-.874.874 2.022 2.022 0 0 0-.201.77C2 15.07 2 15.316 2 15.568v3.864c0 .252 0 .498.017.706.019.229.063.499.201.77a2 2 0 0 0 .874.874c.271.138.541.182.77.201.208.017.454.017.706.017h3.864c.252 0 .498 0 .706-.017a2.03 2.03 0 0 0 .77-.201 2 2 0 0 0 .874-.874 2.03 2.03 0 0 0 .201-.77c.017-.208.017-.454.017-.706v-3.864c0-.252 0-.498-.017-.706a2.022 2.022 0 0 0-.201-.77 2 2 0 0 0-.874-.874 2.022 2.022 0 0 0-.77-.201C8.93 13 8.684 13 8.432 13Zm11 0h-3.864c-.252 0-.498 0-.706.017a2.022 2.022 0 0 0-.77.201 2 2 0 0 0-.874.874 2.022 2.022 0 0 0-.201.77c-.017.208-.017.454-.017.706v3.864c0 .252 0 .498.017.706.019.229.063.499.201.77a2 2 0 0 0 .874.874c.271.138.541.182.77.201.208.017.454.017.706.017h3.864c.252 0 .498 0 .706-.017a2.03 2.03 0 0 0 .77-.201 2 2 0 0 0 .874-.874 2.03 2.03 0 0 0 .201-.77c.017-.208.017-.454.017-.706v-3.864c0-.252 0-.498-.017-.706a2.022 2.022 0 0 0-.201-.77 2 2 0 0 0-.874-.874 2.022 2.022 0 0 0-.77-.201C19.93 13 19.684 13 19.432 13Z"/>
</svg>`;
  const HandThumbsDown = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M19.404 3.124a16.396 16.396 0 0 0-1.199-.024h-1.11v9.254c.106-.004.212-.004.32-.004h.79c.542 0 .913 0 1.2-.024.28-.023.426-.064.53-.118a1.3 1.3 0 0 0 .569-.568c.053-.104.095-.251.117-.53.024-.288.024-.658.024-1.2V5.54c0-.542 0-.912-.023-1.2-.023-.279-.065-.426-.118-.53a1.3 1.3 0 0 0-.569-.568c-.104-.054-.25-.095-.53-.118Zm-3.509 9.82V3.1H8.057c-.703 0-1.197 0-1.586.03-.382.03-.618.084-.81.17a2.25 2.25 0 0 0-.955.82c-.115.176-.205.402-.292.774-.088.38-.164.869-.27 1.564l-.497 3.23c-.141.915-.24 1.564-.274 2.073-.034.503.002.805.092 1.04.186.489.536.897.99 1.155.22.125.513.206 1.015.25.508.043 1.164.044 2.09.044h.787c.248 0 .468 0 .651.015.196.016.4.052.601.154.292.149.529.386.677.677.103.2.138.406.154.601.015.183.015.404.015.651v2.81c0 .962.78 1.742 1.743 1.742a.181.181 0 0 0 .165-.107l3.193-7.184c.01-.02.018-.041.027-.062.095-.215.188-.426.322-.603ZM8.034 1.9c-.674 0-1.214 0-1.654.033-.453.035-.844.107-1.213.275A3.45 3.45 0 0 0 3.7 3.465c-.222.34-.352.715-.455 1.157-.1.43-.182.964-.285 1.63l-.505 3.281c-.135.882-.243 1.582-.28 2.148-.04.578-.01 1.08.168 1.549a3.45 3.45 0 0 0 1.518 1.769c.436.248.928.352 1.505.402.565.049 1.274.049 2.165.049h.793c.276 0 .447 0 .575.01.12.01.15.026.154.028a.35.35 0 0 1 .153.153c.002.004.018.034.027.154.01.128.011.3.011.575v2.787a2.943 2.943 0 0 0 2.943 2.943 1.38 1.38 0 0 0 1.262-.82l3.192-7.184c.164-.368.193-.412.218-.438a.35.35 0 0 1 .134-.087c.034-.012.086-.021.49-.021h.746c.511 0 .93 0 1.272-.028.354-.029.676-.09.978-.245a2.5 2.5 0 0 0 1.093-1.092c.154-.302.216-.624.244-.978.028-.342.028-.761.028-1.272v-4.42c0-.51 0-.93-.027-1.272-.03-.354-.091-.676-.245-.978a2.5 2.5 0 0 0-1.093-1.093c-.302-.153-.624-.215-.978-.244-.341-.028-.76-.028-1.272-.028H8.034Z" clip-rule="evenodd"/>
</svg>`;
  const HandThumbsUp = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10.525 2.72a1.38 1.38 0 0 1 1.262-.82 2.943 2.943 0 0 1 2.943 2.943V8.2c0 .193.157.35.35.35h3.328a3.45 3.45 0 0 1 3.41 3.975l-1.023 6.65a3.45 3.45 0 0 1-3.41 2.925H4.63a2.5 2.5 0 0 1-2.5-2.5v-6.65a2.5 2.5 0 0 1 2.5-2.5h2.232a.35.35 0 0 0 .32-.208l3.343-7.522ZM8.08 20.9h9.305a2.25 2.25 0 0 0 2.224-1.908l1.023-6.65a2.25 2.25 0 0 0-2.224-2.592H15.08a1.55 1.55 0 0 1-1.55-1.55V4.843c0-.963-.78-1.743-1.743-1.743a.18.18 0 0 0-.165.107L8.28 10.73c-.053.12-.12.23-.2.33v9.84Zm-1.2-9.25v9.25H4.63a1.3 1.3 0 0 1-1.3-1.3v-6.65a1.3 1.3 0 0 1 1.3-1.3h2.25Z" clip-rule="evenodd"/>
</svg>`;
  const HardDrive = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.856 3.4h6.287c.971 0 1.605 0 2.177.197a3.6 3.6 0 0 1 1.345.831c.432.423.715.99 1.149 1.858l.05.099 2.184 4.37c.172.343.284.567.364.805.071.211.122.428.153.649.035.249.035.5.035.882v2.135c0 .818 0 1.468-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H6.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.525-.042-1.175-.042-1.993v-2.135c0-.382 0-.633.035-.882.03-.22.082-.438.153-.649.08-.238.192-.462.363-.805l.019-.037 2.167-4.333.049-.099c.434-.868.717-1.435 1.149-1.858a3.6 3.6 0 0 1 1.345-.831c.572-.198 1.206-.197 2.176-.197Zm.11 1.2c-1.12 0-1.537.008-1.895.131a2.4 2.4 0 0 0-.896.554c-.27.265-.464.635-.965 1.637l-2.167 4.333-.072.145h18.058l-.073-.145-2.166-4.333c-.501-1.002-.695-1.372-.965-1.637a2.4 2.4 0 0 0-.897-.554c-.357-.123-.774-.131-1.895-.131H8.966Zm12.429 8H2.605c-.005.12-.005.282-.005.533V15.2c0 .85 0 1.451.039 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h10.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.049c.113-.222.185-.504.223-.967.038-.47.039-1.072.039-1.922v-2.067c0-.251 0-.412-.005-.533ZM5.4 16a.6.6 0 0 1 .6-.6h4a.6.6 0 0 1 0 1.2H6a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Heart = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.993 4.621C9.874 2.6 6.633 2.14 4.141 4.269c-2.63 2.248-3.01 6.025-.933 8.697.81 1.044 2.41 2.63 3.968 4.1a175.563 175.563 0 0 0 3.908 3.566l.012.01c.076.067.157.14.233.197.088.066.202.139.35.183.204.06.425.06.629 0a1.1 1.1 0 0 0 .35-.183c.076-.058.157-.13.233-.197l.012-.01a176.27 176.27 0 0 0 3.909-3.566c1.557-1.47 3.156-3.056 3.968-4.1 2.07-2.664 1.746-6.47-.94-8.702-2.525-2.098-5.73-1.665-7.847.357Zm-.474 1.314C9.803 3.93 7.026 3.45 4.953 5.22c-2.129 1.819-2.42 4.84-.758 6.979.742.956 2.271 2.478 3.839 3.958a174.322 174.322 0 0 0 3.96 3.61l.08-.071a174.3 174.3 0 0 0 3.88-3.54c1.567-1.48 3.096-3.001 3.839-3.957 1.667-2.146 1.402-5.183-.752-6.974-2.12-1.762-4.862-1.29-6.572.71a.625.625 0 0 1-.95 0Z" clip-rule="evenodd"/>
</svg>`;
  const HouseDoor = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12.104 2.88a.4.4 0 0 0-.209 0c-.049.014-.114.05-.509.358L4.604 8.513c-.48.373-.627.494-.73.633a1.4 1.4 0 0 0-.222.455c-.047.166-.052.356-.052.964V17.8c0 .57 0 .961.025 1.265.024.296.069.455.128.57a1.4 1.4 0 0 0 .611.612c.116.06.275.104.571.128.304.024.695.025 1.265.025h2.2v-6.822c0-.261 0-.492.016-.684a1.62 1.62 0 0 1 .158-.62 1.6 1.6 0 0 1 .7-.7 1.62 1.62 0 0 1 .62-.158c.192-.016.423-.016.684-.016h2.844c.261 0 .492 0 .684.016.204.016.415.054.62.158a1.6 1.6 0 0 1 .7.7c.104.205.142.417.158.62.016.192.016.423.016.684V20.4h2.2c.57 0 .961 0 1.265-.025.296-.024.455-.069.57-.128a1.4 1.4 0 0 0 .612-.611c.06-.116.104-.275.128-.571.024-.304.025-.695.025-1.265v-7.235c0-.608-.005-.798-.052-.964a1.4 1.4 0 0 0-.223-.455c-.102-.14-.249-.26-.729-.633l-6.782-5.275c-.395-.308-.46-.344-.51-.357Zm5.721 18.72c.539 0 .98 0 1.337-.03.371-.03.706-.094 1.018-.253a2.6 2.6 0 0 0 1.137-1.137c.159-.312.223-.647.254-1.018.029-.358.029-.798.029-1.337V10.49c0-.502 0-.867-.096-1.213a2.598 2.598 0 0 0-.414-.845c-.213-.288-.502-.513-.898-.82l-.06-.046-6.781-5.276-.067-.051c-.283-.221-.552-.431-.866-.517a1.6 1.6 0 0 0-.836 0c-.315.086-.584.296-.867.517l-.066.051-6.782 5.276-.06.046c-.395.307-.684.532-.897.82a2.6 2.6 0 0 0-.414.845c-.096.346-.096.711-.096 1.213v7.335c0 .539 0 .98.03 1.337.03.371.094.706.253 1.018a2.6 2.6 0 0 0 1.137 1.137c.312.159.647.224 1.017.254.359.029.8.029 1.338.029h11.65ZM14.4 20.4v-6.8c0-.29 0-.471-.012-.608a.49.49 0 0 0-.032-.174.4.4 0 0 0-.175-.174.493.493 0 0 0-.173-.032 8.48 8.48 0 0 0-.608-.012h-2.8c-.29 0-.471 0-.608.012a.494.494 0 0 0-.174.032.4.4 0 0 0-.174.174.493.493 0 0 0-.032.174 8.435 8.435 0 0 0-.012.608v6.8h4.8Z" clip-rule="evenodd"/>
</svg>`;
  const House = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12.104 2.88a.4.4 0 0 0-.209 0c-.049.014-.114.05-.509.358L4.604 8.513c-.48.373-.627.494-.73.633a1.4 1.4 0 0 0-.222.455c-.047.166-.052.356-.052.964V17.8c0 .57 0 .961.025 1.265.024.296.069.455.128.57a1.4 1.4 0 0 0 .611.612c.116.06.275.104.571.128.304.024.695.025 1.265.025h11.6c.57 0 .961 0 1.265-.025.296-.024.455-.069.57-.128a1.4 1.4 0 0 0 .612-.611c.06-.116.104-.275.128-.571.024-.304.025-.695.025-1.265v-7.235c0-.608-.005-.798-.052-.964a1.4 1.4 0 0 0-.223-.455c-.102-.14-.249-.26-.729-.633l-6.782-5.275c-.395-.308-.46-.344-.51-.357Zm-.522-1.158a1.6 1.6 0 0 1 .836 0c.314.086.584.296.866.517l.067.051 6.782 5.276.06.046c.395.307.684.532.897.82.188.254.329.54.414.845.096.346.096.711.096 1.213v7.335c0 .539 0 .98-.03 1.337-.03.371-.094.706-.253 1.018a2.6 2.6 0 0 1-1.137 1.137c-.312.159-.647.224-1.018.254-.358.029-.798.029-1.337.029H6.175c-.539 0-.98 0-1.338-.03-.37-.03-.705-.094-1.017-.253a2.6 2.6 0 0 1-1.137-1.137c-.159-.312-.224-.647-.254-1.018-.03-.358-.03-.798-.029-1.337V10.49c0-.502 0-.867.096-1.213a2.6 2.6 0 0 1 .414-.845c.213-.288.502-.513.897-.82l.06-.046 6.782-5.276.067-.051c.282-.221.551-.431.866-.517Z" clip-rule="evenodd"/>
</svg>`;
  const Image = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.774 2.4h8.452c.818 0 1.468 0 1.993.043.537.044.996.136 1.415.35a3.6 3.6 0 0 1 1.573 1.573c.214.42.306.877.35 1.415.043.525.043 1.175.043 1.993v8.452c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H6.905c-.28 0-.53 0-.726-.017l-.031-.003a10.076 10.076 0 0 1-.367-.023c-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V7.774c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C6.305 2.4 6.956 2.4 7.774 2.4Zm.026 18h8.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922v-.951l-3.693-3.693a8.424 8.424 0 0 0-.438-.422.495.495 0 0 0-.145-.1.4.4 0 0 0-.248 0 .495.495 0 0 0-.145.1 8.424 8.424 0 0 0-.438.422L6.79 20.059c-.14.139-.246.245-.327.331.367.01.803.01 1.337.01Zm12.6-6.848-2.86-2.86a8.963 8.963 0 0 0-.494-.473 1.625 1.625 0 0 0-.552-.326 1.6 1.6 0 0 0-.989 0 1.6 1.6 0 0 0-.55.326c-.147.125-.31.288-.495.472L5.923 19.23a8.558 8.558 0 0 0-.501.525c-.092.11-.217.273-.278.48a1.565 1.565 0 0 1-.234-.096 2.4 2.4 0 0 1-1.049-1.048c-.113-.223-.184-.505-.222-.968-.039-.47-.04-1.072-.04-1.922V7.8c0-.85.001-1.451.04-1.922.038-.463.11-.745.222-.968a2.4 2.4 0 0 1 1.05-1.048c.222-.114.504-.185.967-.223C6.348 3.6 6.95 3.6 7.8 3.6h8.4c.85 0 1.451 0 1.921.039.464.038.746.11.969.223a2.4 2.4 0 0 1 1.048 1.048c.113.223.185.505.223.968.038.47.039 1.072.039 1.922v5.752ZM8.5 7.1a1.4 1.4 0 1 0 0 2.8 1.4 1.4 0 0 0 0-2.8ZM5.9 8.5a2.6 2.6 0 1 1 5.2 0 2.6 2.6 0 0 1-5.2 0Z" clip-rule="evenodd"/>
</svg>`;
  const InBox = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.882 12.6H3.2v2.6c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h10.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873v-2.6h-2.682c-.458 0-.877.259-1.081.668a2.41 2.41 0 0 1-2.155 1.332H9.118a2.409 2.409 0 0 1-2.155-1.332 1.209 1.209 0 0 0-1.081-.668ZM20.8 11.4h-2.682a2.41 2.41 0 0 0-2.155 1.332c-.204.41-.623.668-1.081.668H9.118c-.458 0-.877-.259-1.081-.668A2.409 2.409 0 0 0 5.882 11.4H3.2V8.8c0-.86 0-1.433.037-1.873.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16C5.367 5.202 5.94 5.2 6.8 5.2h10.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v2.6ZM22 8.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C19.72 4 18.88 4 17.2 4H6.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C2 6.28 2 7.12 2 8.8v6.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C4.28 20 5.12 20 6.8 20h10.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C22 17.72 22 16.88 22 15.2V8.8Z" clip-rule="evenodd"/>
</svg>`;
  const InfoCircleFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 1.4C6.146 1.4 1.4 6.146 1.4 12c0 5.854 4.746 10.6 10.6 10.6 5.854 0 10.6-4.746 10.6-10.6 0-5.854-4.746-10.6-10.6-10.6Zm.6 9.6a.6.6 0 1 0-1.2 0v5a.6.6 0 1 0 1.2 0v-5Zm-1.45-3c0-.47.38-.85.85-.85h.01a.85.85 0 1 1 0 1.7H12a.85.85 0 0 1-.85-.85Z" clip-rule="evenodd"/>
</svg>`;
  const InfoCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 2.6a9.4 9.4 0 1 0 0 18.8 9.4 9.4 0 0 0 0-18.8ZM1.4 12C1.4 6.146 6.146 1.4 12 1.4c5.854 0 10.6 4.746 10.6 10.6 0 5.854-4.746 10.6-10.6 10.6-5.854 0-10.6-4.746-10.6-10.6ZM12 10.4a.6.6 0 0 1 .6.6v5a.6.6 0 1 1-1.2 0v-5a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M12 7.15a.85.85 0 0 0 0 1.7h.01a.85.85 0 1 0 0-1.7H12Z"/>
</svg>`;
  const Instagram = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12 3c-2.442 0-2.75.011-3.71.054-.959.045-1.612.196-2.185.419-.6.225-1.145.58-1.594 1.038-.458.45-.812.994-1.038 1.594-.223.571-.375 1.226-.419 2.182C3.011 9.25 3 9.556 3 12.002c0 2.444.011 2.75.054 3.71.045.958.196 1.611.419 2.184a4.42 4.42 0 0 0 1.038 1.594c.5.5 1.001.809 1.593 1.038.574.223 1.226.375 2.185.419.96.043 1.266.054 3.711.054s2.75-.011 3.71-.054c.958-.045 1.613-.196 2.186-.419.6-.226 1.144-.58 1.593-1.038.5-.5.808-1.002 1.038-1.594.222-.573.374-1.226.419-2.185.043-.96.054-1.265.054-3.71 0-2.445-.011-2.75-.054-3.711-.045-.958-.197-1.612-.419-2.184a4.417 4.417 0 0 0-1.038-1.594 4.4 4.4 0 0 0-1.594-1.038c-.574-.223-1.229-.375-2.186-.419C14.75 3.011 14.444 3 11.998 3H12Zm-.807 1.622h.808c2.403 0 2.688.008 3.636.052.878.04 1.355.187 1.672.31.42.162.72.358 1.035.673.315.315.51.614.673 1.035.123.316.27.793.309 1.67.044.95.053 1.234.053 3.636s-.01 2.687-.053 3.636c-.04.877-.187 1.353-.31 1.67a2.77 2.77 0 0 1-.673 1.034 2.78 2.78 0 0 1-1.035.673c-.315.124-.792.27-1.67.31-.95.043-1.234.053-3.637.053s-2.689-.01-3.637-.052c-.878-.041-1.353-.187-1.67-.311a2.788 2.788 0 0 1-1.036-.673 2.79 2.79 0 0 1-.675-1.035c-.122-.316-.27-.793-.309-1.67-.043-.949-.052-1.233-.052-3.637s.01-2.687.052-3.635c.04-.878.187-1.355.31-1.672.164-.42.36-.72.674-1.035a2.78 2.78 0 0 1 1.035-.673c.318-.124.794-.27 1.671-.31.83-.039 1.152-.05 2.83-.051v.002Zm5.612 1.494a1.08 1.08 0 1 0 0 2.16 1.08 1.08 0 0 0 0-2.16ZM12 7.38a4.623 4.623 0 1 0-.144 9.244A4.623 4.623 0 0 0 12 7.379ZM12 9a3 3 0 1 1 0 6.001 3 3 0 0 1 0-6Z"/>
</svg>`;
  const Laptop = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M6.564 3.875h10.872c.51 0 .93 0 1.273.028.355.029.681.091.987.247.476.242.862.629 1.104 1.104.156.306.218.632.247.987.028.343.028.763.028 1.273v7.651c.487.172.861.574.996 1.077.055.204.054.432.054.666v.145c0 .505 0 .878-.086 1.2a2.525 2.525 0 0 1-1.785 1.786c-.323.086-.696.086-1.2.086H4.946c-.505 0-.878 0-1.2-.086a2.525 2.525 0 0 1-1.786-1.786c-.086-.322-.086-.695-.086-1.2v-.403c0-.686.438-1.27 1.05-1.485v-7.65c0-.51 0-.931.028-1.274.03-.355.091-.681.247-.987A2.525 2.525 0 0 1 4.304 4.15c.306-.156.632-.218.987-.247.343-.028.763-.028 1.273-.028Zm-2.389 11.2h4.389c.188 0 .377 0 .56.043.16.04.315.103.455.19.162.098.294.231.427.364l.031.031.06.06c.185.185.209.203.227.214.029.018.06.031.094.039.02.005.05.009.312.009h2.54c.263 0 .292-.004.312-.009a.324.324 0 0 0 .094-.039c.018-.011.042-.029.227-.214l.06-.06.031-.03c.133-.134.266-.267.427-.366.14-.086.294-.15.455-.189.184-.044.372-.043.56-.043h4.389V7.54c0-.542 0-.912-.024-1.197-.022-.278-.064-.421-.115-.522a1.275 1.275 0 0 0-.557-.557c-.1-.051-.244-.092-.522-.115a16.383 16.383 0 0 0-1.197-.024H6.59c-.542 0-.911 0-1.197.024-.278.023-.421.064-.522.115a1.27 1.27 0 0 0-.557.557c-.051.1-.092.244-.115.522-.023.285-.024.655-.024 1.197v7.535Zm11.305 1.25c-.262 0-.292.004-.312.009a.324.324 0 0 0-.094.039c-.018.011-.042.029-.227.214l-.06.06-.03.03c-.134.134-.266.267-.428.366-.14.086-.294.15-.455.189a2.364 2.364 0 0 1-.56.043h-2.628c-.188 0-.376 0-.56-.043a1.574 1.574 0 0 1-.455-.19 2.364 2.364 0 0 1-.427-.364l-.031-.031-.06-.06c-.185-.185-.209-.203-.227-.214a.324.324 0 0 0-.094-.039c-.02-.005-.05-.009-.312-.009H3.44a.325.325 0 0 0-.314.325v.317c0 .629.005.82.043.963.118.44.462.784.902.902.142.038.334.043.963.043h13.934c.629 0 .821-.005.963-.043.44-.118.784-.462.902-.902.038-.142.043-.334.043-.963 0-.153 0-.247-.003-.318-.003-.068-.008-.083-.008-.083a.325.325 0 0 0-.23-.23s-.015-.005-.083-.008a7.964 7.964 0 0 0-.318-.003H15.48Z" clip-rule="evenodd"/>
</svg>`;
  const Layers = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.802 4.348c.13-.024.265-.024.396 0 .152.029.29.098.384.146l.026.013 9.16 4.58a.6.6 0 0 1 0 1.074l-3.677 1.838 3.677 1.838a.6.6 0 0 1 0 1.074l-9.16 4.58-.026.013a1.454 1.454 0 0 1-.384.145 1.074 1.074 0 0 1-.396 0 1.454 1.454 0 0 1-.384-.145l-.026-.013-9.16-4.58a.6.6 0 0 1 0-1.074L5.908 12l-3.676-1.84a.6.6 0 0 1 0-1.074l9.16-4.58.026-.013c.094-.048.231-.117.384-.146Zm-4.278 7.117a.527.527 0 0 0-.011-.005L3.842 9.624l8.086-4.043.072-.036.072.036 8.086 4.043-3.671 1.836a.634.634 0 0 0-.012.005l-4.404 2.202-.071.036-.072-.036-4.404-2.202ZM7.25 12.67l-3.408 1.704 8.086 4.043.072.036.072-.036 8.086-4.043-3.408-1.704-4.142 2.07-.026.014a1.454 1.454 0 0 1-.384.145 1.074 1.074 0 0 1-.396 0 1.454 1.454 0 0 1-.384-.145l-.026-.013L7.25 12.67Z" clip-rule="evenodd"/>
</svg>`;
  const LayoutTextWindowReverse = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M17.1 12a.6.6 0 0 1-.6.6h-4a.6.6 0 1 1 0-1.2h4a.6.6 0 0 1 .6.6Zm0 4a.6.6 0 0 1-.6.6h-4a.6.6 0 1 1 0-1.2h4a.6.6 0 0 1 .6.6Zm0-8a.6.6 0 0 1-.6.6h-4a.6.6 0 1 1 0-1.2h4a.6.6 0 0 1 .6.6ZM8.4 19.8V4.2h-.6c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v8.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h.6Zm1.2 0h6.6c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V7.8c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H9.6v15.6Zm6.6 1.2c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 18.72 21 17.88 21 16.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C18.72 3 17.88 3 16.2 3H7.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C3 5.28 3 6.12 3 7.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 21 6.12 21 7.8 21h8.4Z" clip-rule="evenodd"/>
</svg>`;
  const LayoutTextWindow = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M6.9 12a.6.6 0 0 1 .6-.6h4a.6.6 0 1 1 0 1.2h-4a.6.6 0 0 1-.6-.6Zm0-4a.6.6 0 0 1 .6-.6h4a.6.6 0 1 1 0 1.2h-4a.6.6 0 0 1-.6-.6Zm0 8a.6.6 0 0 1 .6-.6h4a.6.6 0 1 1 0 1.2h-4a.6.6 0 0 1-.6-.6Zm8.7-11.8v15.6h.6c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V7.8c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036h-.6Zm-1.2 0H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v8.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h6.6V4.2ZM7.8 3c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C3 5.28 3 6.12 3 7.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 21 6.12 21 7.8 21h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 18.72 21 17.88 21 16.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C18.72 3 17.88 3 16.2 3H7.8Z" clip-rule="evenodd"/>
</svg>`;
  const Layout = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.4 12V4.2H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v8.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h3.6V12Zm1.2 7.8v-7.2h7.2v3.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036h-3.6ZM7.8 21c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8Zm12-9.6h-7.2V4.2h3.6c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v3.6Z" clip-rule="evenodd"/>
</svg>`;
  const Lightbulb = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12 1.875c.345 0 .625.28.625.625v.95a.625.625 0 1 1-1.25 0V2.5c0-.345.28-.625.625-.625ZM4.813 4.813a.625.625 0 0 1 .884 0l.57.57a.625.625 0 1 1-.884.884l-.57-.57a.625.625 0 0 1 0-.884Zm14.374 0a.625.625 0 0 1 0 .884l-.57.57a.625.625 0 0 1-.884-.884l.57-.57a.625.625 0 0 1 .884 0Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M5.675 12a6.325 6.325 0 1 1 8.85 5.8v1.8a2.525 2.525 0 0 1-5.05 0v-1.8a6.327 6.327 0 0 1-3.8-5.8ZM12 6.925a5.075 5.075 0 1 0 0 10.15 5.075 5.075 0 0 0 0-10.15Zm-1.275 11.271V19.6a1.275 1.275 0 1 0 2.55 0v-1.404a6.352 6.352 0 0 1-2.55 0Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M1.875 12c0-.345.28-.625.625-.625h.95a.625.625 0 1 1 0 1.25H2.5A.625.625 0 0 1 1.875 12Zm18.05 0c0-.345.28-.625.625-.625h.95a.625.625 0 1 1 0 1.25h-.95a.625.625 0 0 1-.625-.625Z"/>
</svg>`;
  const Link = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M9.4 12A5.6 5.6 0 0 1 15 6.4h2a5.6 5.6 0 1 1 0 11.2h-.5a.6.6 0 1 1 0-1.2h.5a4.4 4.4 0 1 0 0-8.8h-2a4.4 4.4 0 0 0-4.4 4.4.6.6 0 1 1-1.2 0ZM7 7.6a4.4 4.4 0 0 0 0 8.8h2a4.4 4.4 0 0 0 4.4-4.4.6.6 0 1 1 1.2 0A5.6 5.6 0 0 1 9 17.6H7A5.6 5.6 0 1 1 7 6.4h.5a.6.6 0 0 1 0 1.2H7Z" clip-rule="evenodd"/>
</svg>`;
  const Linkedin = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M3 4.29C3 3.576 3.592 3 4.322 3h15.356C20.408 3 21 3.577 21 4.29v15.42c0 .713-.592 1.29-1.322 1.29H4.322C3.592 21 3 20.423 3 19.71V4.29Zm5.56 13.778V9.94h-2.7v8.128h2.7ZM7.21 8.83c.942 0 1.529-.623 1.529-1.404-.017-.798-.585-1.404-1.51-1.404S5.7 6.629 5.7 7.426c0 .78.586 1.404 1.493 1.404h.018Zm5.522 9.238v-4.54c0-.242.018-.485.09-.658.195-.485.64-.988 1.386-.988.978 0 1.368.745 1.368 1.838v4.348h2.701v-4.662c0-2.497-1.332-3.658-3.109-3.658-1.433 0-2.076.787-2.436 1.342v.028h-.018l.018-.028V9.94h-2.7c.034.763 0 8.128 0 8.128h2.7Z"/>
</svg>`;
  const List = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M2.4 6a.6.6 0 0 1 .6-.6h18a.6.6 0 1 1 0 1.2H3a.6.6 0 0 1-.6-.6Zm0 6a.6.6 0 0 1 .6-.6h18a.6.6 0 1 1 0 1.2H3a.6.6 0 0 1-.6-.6Zm0 6a.6.6 0 0 1 .6-.6h18a.6.6 0 1 1 0 1.2H3a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const LockFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7 10h-.5A2.5 2.5 0 0 0 4 12.5v7A2.5 2.5 0 0 0 6.5 22h11a2.5 2.5 0 0 0 2.5-2.5v-7a2.5 2.5 0 0 0-2.5-2.5H17V7A5 5 0 0 0 7 7v3Zm2 0h6V7a3 3 0 1 0-6 0v3Z" clip-rule="evenodd"/>
</svg>`;
  const Lock = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7 10V7a5 5 0 0 1 10 0v3h.5a2.5 2.5 0 0 1 2.5 2.5v7a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 4 19.5v-7A2.5 2.5 0 0 1 6.5 10H7Zm8.8-3v3H8.2V7a3.8 3.8 0 0 1 7.6 0Zm-9.3 4.2a1.3 1.3 0 0 0-1.3 1.3v7a1.3 1.3 0 0 0 1.3 1.3h11a1.3 1.3 0 0 0 1.3-1.3v-7a1.3 1.3 0 0 0-1.3-1.3h-11Z" clip-rule="evenodd"/>
</svg>`;
  const Login = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M17.777 4.162c-.441-.037-1.007-.037-1.81-.037h-1.134a.625.625 0 0 1 0-1.25h1.16c.771 0 1.388 0 1.885.04.512.042.953.13 1.359.337.65.332 1.18.86 1.511 1.511.207.406.295.847.336 1.359.041.498.041 1.114.041 1.884v7.988c0 .77 0 1.387-.04 1.884-.042.512-.13.953-.337 1.359a3.46 3.46 0 0 1-1.511 1.511c-.406.207-.847.295-1.358.336-.498.041-1.115.041-1.885.041h-1.16a.625.625 0 0 1 0-1.25h1.133c.803 0 1.369 0 1.81-.037.433-.035.692-.102.892-.204a2.2 2.2 0 0 0 .965-.965c.102-.2.169-.459.204-.892.037-.441.037-1.007.037-1.81V8.033c0-.803 0-1.369-.037-1.81-.035-.434-.102-.692-.204-.892a2.208 2.208 0 0 0-.965-.965c-.2-.102-.459-.169-.892-.204Z"/>
  <path fill="currentColor" d="M9.67 6.836a.625.625 0 0 1 .883 0l4.722 4.722a.625.625 0 0 1 0 .884l-4.722 4.722a.625.625 0 0 1-.884-.884l3.655-3.655H3.5a.625.625 0 1 1 0-1.25h9.824L9.67 7.72a.625.625 0 0 1 0-.884Z"/>
</svg>`;
  const Logout = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M8.006 2.875h1.16a.625.625 0 1 1 0 1.25H8.034c-.803 0-1.369 0-1.81.037-.434.035-.692.102-.892.204a2.2 2.2 0 0 0-.965.965c-.102.2-.169.458-.204.892-.037.441-.037 1.007-.037 1.81v7.934c0 .803 0 1.369.037 1.81.035.433.102.692.204.892a2.2 2.2 0 0 0 .965.965c.2.102.458.169.892.204.441.037 1.007.037 1.81.037h1.134a.625.625 0 1 1 0 1.25h-1.16c-.771 0-1.387 0-1.885-.04-.512-.042-.953-.13-1.359-.337a3.459 3.459 0 0 1-1.511-1.511c-.207-.406-.295-.847-.336-1.358-.041-.498-.041-1.115-.041-1.885V8.006c0-.77 0-1.386.04-1.884.042-.512.13-.953.337-1.359.332-.65.86-1.18 1.511-1.511.406-.207.847-.295 1.359-.336.498-.041 1.114-.041 1.884-.041Z"/>
  <path fill="currentColor" d="M15.336 6.836a.625.625 0 0 1 .884 0l4.722 4.722a.625.625 0 0 1 0 .884l-4.722 4.722a.625.625 0 0 1-.884-.884l3.655-3.655H9.167a.625.625 0 1 1 0-1.25h9.824L15.336 7.72a.625.625 0 0 1 0-.884Z"/>
</svg>`;
  const Luggage = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12.742 12.75h4.69c.118 0 .24 0 .346.009.118.01.268.033.421.11a1.1 1.1 0 0 1 .481.482c.078.153.102.303.111.421.009.105.009.228.009.345v2.316c0 .117 0 .24-.009.345a1.11 1.11 0 0 1-.11.421 1.1 1.1 0 0 1-.482.481 1.108 1.108 0 0 1-.421.111 4.412 4.412 0 0 1-.345.009h-4.69c-.118 0-.24 0-.346-.009a1.108 1.108 0 0 1-.421-.11 1.1 1.1 0 0 1-.481-.482 1.11 1.11 0 0 1-.111-.421c-.009-.105-.009-.228-.009-.345v-2.316c0-.117 0-.24.008-.345a1.11 1.11 0 0 1 .112-.421 1.1 1.1 0 0 1 .48-.481 1.11 1.11 0 0 1 .422-.111c.105-.009.228-.009.345-.009ZM12.625 14v2.55h4.925V14h-4.925Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M11.9 2.875h.2c.787 0 1.306 0 1.75.118a3.475 3.475 0 0 1 2.457 2.458c.088.332.11.652.116 1.124h.544c.775 0 1.395 0 1.896.04.514.043.957.131 1.365.339a3.474 3.474 0 0 1 1.518 1.518c.208.408.296.851.338 1.365.041.501.041 1.12.041 1.896v4.234c0 .775 0 1.395-.04 1.896-.043.514-.131.957-.339 1.365a3.475 3.475 0 0 1-1.518 1.518c-.408.208-.851.296-1.365.338-.501.041-1.12.041-1.896.041H7.033c-.775 0-1.395 0-1.896-.04-.514-.043-.957-.131-1.365-.339a3.475 3.475 0 0 1-1.518-1.518c-.208-.408-.296-.851-.338-1.365-.041-.501-.041-1.12-.041-1.896v-4.234c0-.775 0-1.395.04-1.896.043-.514.131-.957.339-1.365a3.475 3.475 0 0 1 1.518-1.518c.408-.208.851-.296 1.365-.338.501-.041 1.12-.041 1.896-.041h.544c.005-.472.027-.792.116-1.124a3.475 3.475 0 0 1 2.458-2.458c.443-.118.962-.118 1.748-.118Zm-4.84 4.95c-.808 0-1.377 0-1.821.037-.437.035-.697.103-.9.206a2.225 2.225 0 0 0-.971.972c-.103.202-.17.462-.206.9-.037.443-.037 1.012-.037 1.82v4.18c0 .808 0 1.377.037 1.821.035.437.103.697.206.9.213.418.553.758.972.971.202.103.462.17.899.206.444.037 1.013.037 1.821.037h9.88c.808 0 1.377 0 1.821-.037.437-.035.697-.103.9-.206a2.22 2.22 0 0 0 .971-.972c.103-.202.17-.462.206-.899.037-.444.037-1.013.037-1.821v-4.18c0-.808 0-1.377-.037-1.82-.035-.438-.103-.698-.206-.9a2.225 2.225 0 0 0-.972-.972c-.202-.103-.462-.17-.899-.206-.444-.036-1.013-.037-1.821-.037H7.06Zm8.113-1.25H8.826c.006-.43.023-.61.074-.8A2.225 2.225 0 0 1 10.474 4.2c.263-.07.602-.076 1.526-.076s1.263.005 1.526.076a2.225 2.225 0 0 1 1.573 1.573c.051.19.068.371.073.801Z" clip-rule="evenodd"/>
</svg>`;
  const Mail = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M2.004 7.735c.004-.291.012-.55.028-.78.013-.202.032-.383.059-.548a2.56 2.56 0 0 1 .236-.769 3 3 0 0 1 1.311-1.311C4.28 4 5.12 4 6.8 4h10.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311c.114.223.188.47.236.769.027.165.046.346.06.548.015.23.022.489.027.78C22 8.05 22 8.401 22 8.8v6.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C19.72 20 18.88 20 17.2 20H6.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C2 17.72 2 16.88 2 15.2V8.8c0-.4 0-.751.004-1.065Zm18.796.837V15.2c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H6.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V8.572l6.62 4.635.09.062c.574.403.992.695 1.461.813.413.102.845.102 1.258 0 .47-.118.887-.41 1.461-.813l.09-.062 6.62-4.635Zm-.024-1.448-7.285 5.1c-.702.491-.927.637-1.152.693a1.4 1.4 0 0 1-.678 0c-.225-.056-.45-.202-1.152-.693l-7.285-5.1c.003-.068.008-.134.013-.197.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16C5.367 5.202 5.94 5.2 6.8 5.2h10.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.004.063.009.129.012.197Z" clip-rule="evenodd"/>
</svg>`;
  const Map$1 = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M21.283 2.471A.6.6 0 0 1 21.6 3v14.4a.6.6 0 0 1-.267.5l-5.4 3.6a.6.6 0 0 1-.63.021L9.3 18.091l-6.002 3.43A.6.6 0 0 1 2.4 21V6.6a.6.6 0 0 1 .302-.52l6.3-3.6a.6.6 0 0 1 .596 0l5.978 3.415 5.091-3.394a.6.6 0 0 1 .616-.03ZM15 6.948 9.9 4.034v13.018l5.1 2.914V6.948Zm1.2 12.93 4.2-2.8V4.122l-4.2 2.8V19.88Zm-7.5-2.826V4.034L3.6 6.948v13.018l5.1-2.914Z" clip-rule="evenodd"/>
</svg>`;
  const Menu = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
  <path d="M2.375 6C2.375 5.65482 2.65482 5.375 3 5.375H21C21.3452 5.375 21.625 5.65482 21.625 6C21.625 6.34518 21.3452 6.625 21 6.625H3C2.65482 6.625 2.375 6.34518 2.375 6Z" fill="currentColor"/>
  <path d="M2.375 12C2.375 11.6548 2.65482 11.375 3 11.375H21C21.3452 11.375 21.625 11.6548 21.625 12C21.625 12.3452 21.3452 12.625 21 12.625H3C2.65482 12.625 2.375 12.3452 2.375 12Z" fill="currentColor"/>
  <path d="M2.375 18C2.375 17.6548 2.65482 17.375 3 17.375H15C15.3452 17.375 15.625 17.6548 15.625 18C15.625 18.3452 15.3452 18.625 15 18.625H3C2.65482 18.625 2.375 18.3452 2.375 18Z" fill="currentColor"/>
</svg>`;
  const Microphone = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.525 5.35a3.475 3.475 0 1 1 6.95 0V12a3.475 3.475 0 1 1-6.95 0V5.35ZM12 3.125A2.225 2.225 0 0 0 9.775 5.35V12a2.225 2.225 0 0 0 4.45 0V5.35A2.225 2.225 0 0 0 12 3.125Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M5.35 9.475c.345 0 .625.28.625.625V12a6.025 6.025 0 0 0 12.05 0v-1.9a.625.625 0 1 1 1.25 0V12a7.276 7.276 0 0 1-6.65 7.248v1.627H15.8a.625.625 0 1 1 0 1.25H8.2a.625.625 0 1 1 0-1.25h3.175v-1.627A7.276 7.276 0 0 1 4.725 12v-1.9c0-.345.28-.625.625-.625Z"/>
</svg>`;
  const Monitor = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.033 3.975h9.934c.775 0 1.395 0 1.896.041.514.042.957.13 1.365.338a3.474 3.474 0 0 1 1.518 1.518c.208.408.296.851.338 1.365.041.501.041 1.12.041 1.896v2.034c0 .775 0 1.395-.04 1.896-.043.514-.131.957-.339 1.365a3.474 3.474 0 0 1-1.518 1.518c-.408.208-.851.296-1.365.338-.501.041-1.12.041-1.896.041h-4.342v2.55H15.8a.625.625 0 1 1 0 1.25H8.2a.625.625 0 1 1 0-1.25h3.175v-2.55H7.033c-.775 0-1.395 0-1.896-.04-.514-.043-.957-.131-1.365-.339a3.474 3.474 0 0 1-1.518-1.518c-.208-.408-.296-.851-.338-1.365-.041-.5-.041-1.12-.041-1.896V9.133c0-.775 0-1.395.04-1.896.043-.514.131-.957.339-1.365a3.475 3.475 0 0 1 1.518-1.518c.408-.208.851-.296 1.365-.338.501-.04 1.12-.04 1.896-.04Zm9.907 11.1c.808 0 1.377 0 1.821-.037.437-.035.697-.103.9-.205.418-.214.758-.554.971-.973.103-.202.17-.462.206-.899.037-.444.037-1.013.037-1.82V9.16c0-.81 0-1.378-.037-1.822-.035-.436-.103-.697-.206-.899a2.225 2.225 0 0 0-.972-.972c-.202-.103-.462-.17-.899-.206-.444-.036-1.013-.037-1.821-.037H7.06c-.808 0-1.377 0-1.821.037-.437.036-.697.103-.9.206a2.225 2.225 0 0 0-.971.972c-.103.202-.17.463-.206.9-.037.443-.037 1.012-.037 1.82v1.98c0 .808 0 1.377.037 1.821.035.437.103.697.206.9.213.418.553.758.972.972.202.102.462.17.899.205.444.037 1.013.037 1.821.037h9.88Z" clip-rule="evenodd"/>
</svg>`;
  const Paperclip = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10.4 3.6a2.7 2.7 0 0 0-2.7 2.7v9.75a4.35 4.35 0 1 0 8.7 0V5.93a.6.6 0 1 1 1.2 0v10.12a5.55 5.55 0 1 1-11.1 0V6.3a3.9 3.9 0 0 1 7.8 0v9.701a2.25 2.25 0 0 1-4.5 0V7.186a.6.6 0 1 1 1.2 0v8.815a1.05 1.05 0 1 0 2.1 0V6.3a2.7 2.7 0 0 0-2.7-2.7Z" clip-rule="evenodd"/>
</svg>`;
  const Passport = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.525 9.15a3.475 3.475 0 1 1 6.95 0 3.475 3.475 0 0 1-6.95 0ZM12 6.925a2.225 2.225 0 1 0 0 4.45 2.225 2.225 0 0 0 0-4.45Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M9.475 15.8c0-.345.28-.625.625-.625h3.8a.625.625 0 1 1 0 1.25h-3.8a.625.625 0 0 1-.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M9.033 1.875h5.934c.775 0 1.395 0 1.896.04.514.043.957.131 1.365.339a3.474 3.474 0 0 1 1.518 1.518c.208.408.296.851.338 1.365.041.501.041 1.12.041 1.896v9.934c0 .775 0 1.395-.04 1.896-.043.514-.131.957-.339 1.365a3.474 3.474 0 0 1-1.518 1.518c-.408.208-.851.296-1.365.338-.501.041-1.12.041-1.896.041H9.033c-.775 0-1.395 0-1.896-.04-.514-.043-.957-.131-1.365-.339a3.474 3.474 0 0 1-1.518-1.518c-.208-.408-.296-.851-.338-1.365-.041-.501-.041-1.12-.041-1.896V7.033c0-.775 0-1.395.04-1.896.043-.514.131-.957.339-1.365a3.475 3.475 0 0 1 1.518-1.518c.408-.208.851-.296 1.365-.338.501-.041 1.12-.041 1.896-.041ZM7.239 3.162c-.437.035-.697.103-.9.206a2.225 2.225 0 0 0-.971.972c-.103.202-.17.462-.206.899-.037.444-.037 1.013-.037 1.821v9.88c0 .808 0 1.377.037 1.821.035.437.103.697.206.9.213.418.553.758.972.971.202.103.462.17.899.206.444.037 1.013.037 1.821.037h5.88c.808 0 1.377 0 1.821-.037.437-.035.697-.103.9-.206a2.22 2.22 0 0 0 .971-.972c.103-.202.17-.462.206-.899.037-.444.037-1.013.037-1.821V7.06c0-.808 0-1.377-.037-1.821-.035-.437-.103-.697-.206-.9a2.225 2.225 0 0 0-.972-.971c-.202-.103-.462-.17-.899-.206-.444-.037-1.013-.037-1.821-.037H9.06c-.808 0-1.377 0-1.821.037Z" clip-rule="evenodd"/>
</svg>`;
  const Pencil = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M16.576 2.576a3.428 3.428 0 1 1 4.848 4.848L10.118 18.73a6.38 6.38 0 0 1-.582.542 3.595 3.595 0 0 1-.504.328c-.2.107-.41.188-.732.312l-.155.06-.057.021-5.373 2.067a.6.6 0 0 1-.775-.776L4.088 15.7c.123-.321.204-.532.312-.732a3.6 3.6 0 0 1 .327-.504 6.39 6.39 0 0 1 .543-.582L16.576 2.576ZM5.229 16.08c-.028.069-.063.16-.11.283l-1.574 4.091 4.09-1.573.04-.015c.104-.04.182-.071.244-.097a13.1 13.1 0 0 0-.214-.216l-2.259-2.26a13.142 13.142 0 0 0-.217-.213Zm3.752 2.085a1.846 1.846 0 0 0-.06-.075c-.094-.113-.22-.239-.351-.37l-2.291-2.29a5.982 5.982 0 0 0-.37-.35 1.805 1.805 0 0 0-.076-.06c.072-.077.169-.174.312-.316l11.28-11.28a2.228 2.228 0 0 1 3.15 3.152L9.297 17.856c-.143.142-.24.238-.315.31Z" clip-rule="evenodd"/>
</svg>`;
  const PendingCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M18.209 4.942a9.364 9.364 0 0 0-6.21-2.342A9.4 9.4 0 0 0 2.6 12c0 2.38.885 4.553 2.343 6.21L18.21 4.941Zm.849.849L5.79 19.058A9.364 9.364 0 0 0 12 21.4a9.4 9.4 0 0 0 9.4-9.4c0-2.38-.884-4.553-2.342-6.21ZM12 1.4c5.854 0 10.6 4.746 10.6 10.6 0 5.854-4.746 10.6-10.6 10.6-5.854 0-10.6-4.746-10.6-10.6C1.4 6.146 6.146 1.4 12 1.4Z" clip-rule="evenodd"/>
</svg>`;
  const PersonDash = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10 3.6a3.9 3.9 0 1 0 0 7.8 3.9 3.9 0 0 0 0-7.8ZM4.9 7.5a5.1 5.1 0 1 1 10.2 0 5.1 5.1 0 0 1-10.2 0Zm2.479 7.4h4.62a.6.6 0 1 1 0 1.2H7.5c-1.438 0-2.025.006-2.486.146a3.4 3.4 0 0 0-2.267 2.267c-.14.461-.146 1.048-.146 2.487a.6.6 0 1 1-1.2 0v-.121c0-1.28 0-2.06.198-2.714a4.6 4.6 0 0 1 3.067-3.067C5.32 14.9 6.1 14.9 7.38 14.9Zm8.02 3.1a.6.6 0 0 1 .6-.6h6a.6.6 0 1 1 0 1.2h-6a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const PersonPlus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10 3.6a3.9 3.9 0 1 0 0 7.8 3.9 3.9 0 0 0 0-7.8ZM4.9 7.5a5.1 5.1 0 1 1 10.2 0 5.1 5.1 0 0 1-10.2 0ZM19 14.4a.6.6 0 0 1 .6.6v2.4H22a.6.6 0 1 1 0 1.2h-2.4V21a.6.6 0 1 1-1.2 0v-2.4H16a.6.6 0 0 1 0-1.2h2.4V15a.6.6 0 0 1 .6-.6Zm-11.621.5h4.62a.6.6 0 1 1 0 1.2H7.5c-1.438 0-2.025.006-2.486.146a3.4 3.4 0 0 0-2.267 2.267c-.14.461-.146 1.048-.146 2.487a.6.6 0 1 1-1.2 0v-.121c0-1.28 0-2.06.198-2.714a4.6 4.6 0 0 1 3.067-3.067C5.32 14.9 6.1 14.9 7.38 14.9Z" clip-rule="evenodd"/>
</svg>`;
  const PersonX = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10 3.6a3.9 3.9 0 1 0 0 7.8 3.9 3.9 0 0 0 0-7.8ZM4.9 7.5a5.1 5.1 0 1 1 10.2 0 5.1 5.1 0 0 1-10.2 0Zm2.479 7.4h4.62a.6.6 0 1 1 0 1.2H7.5c-1.438 0-2.025.006-2.486.146a3.4 3.4 0 0 0-2.267 2.267c-.14.461-.146 1.048-.146 2.487a.6.6 0 1 1-1.2 0v-.121c0-1.28 0-2.06.198-2.714a4.6 4.6 0 0 1 3.067-3.067C5.32 14.9 6.1 14.9 7.38 14.9Zm8.697.676a.6.6 0 0 1 .848 0L19 17.65l2.076-2.075a.6.6 0 1 1 .848.848L19.85 18.5l2.075 2.076a.6.6 0 0 1-.848.848L19 19.35l-2.076 2.075a.6.6 0 1 1-.848-.848L18.15 18.5l-2.075-2.076a.6.6 0 0 1 0-.848Z" clip-rule="evenodd"/>
</svg>`;
  const Person = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 3.6a3.9 3.9 0 1 0 0 7.8 3.9 3.9 0 0 0 0-7.8ZM6.9 7.5a5.1 5.1 0 1 1 10.2 0 5.1 5.1 0 0 1-10.2 0Zm2.479 7.4h5.242c1.28 0 2.06 0 2.714.198a4.6 4.6 0 0 1 3.067 3.067c.198.654.198 1.434.198 2.714V21a.6.6 0 1 1-1.2 0c0-1.44-.007-2.026-.146-2.487a3.4 3.4 0 0 0-2.267-2.267c-.461-.14-1.048-.146-2.487-.146h-5c-1.44 0-2.026.006-2.487.146a3.4 3.4 0 0 0-2.267 2.267c-.14.461-.146 1.048-.146 2.487a.6.6 0 1 1-1.2 0v-.121c0-1.28 0-2.06.198-2.714a4.6 4.6 0 0 1 3.067-3.067c.654-.198 1.434-.198 2.714-.198Z" clip-rule="evenodd"/>
</svg>`;
  const Phone = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M9.875 17.5c0-.345.28-.625.625-.625h3a.625.625 0 1 1 0 1.25h-3a.625.625 0 0 1-.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.674 1.875h6.652c.538 0 .98 0 1.338.03.373.03.711.095 1.028.256.494.252.895.653 1.147 1.147.161.317.226.655.257 1.028.029.359.029.8.029 1.338v12.652c0 .538 0 .98-.03 1.338-.03.373-.095.711-.256 1.028a2.625 2.625 0 0 1-1.147 1.147c-.317.161-.655.226-1.027.257-.36.029-.801.029-1.339.029H8.674c-.538 0-.98 0-1.338-.03-.373-.03-.711-.095-1.028-.256a2.625 2.625 0 0 1-1.147-1.147c-.161-.317-.226-.655-.257-1.027-.029-.36-.029-.801-.029-1.339V5.674c0-.538 0-.98.03-1.338.03-.373.095-.711.256-1.028a2.625 2.625 0 0 1 1.147-1.147c.317-.161.655-.226 1.028-.257.359-.029.8-.029 1.338-.029ZM7.437 3.15c-.295.024-.45.068-.561.125-.259.132-.47.342-.601.6-.057.112-.1.267-.125.562-.025.302-.025.693-.025 1.263v12.6c0 .57 0 .96.025 1.263.024.295.068.45.125.561.132.259.342.47.6.601.112.057.267.1.562.125.302.024.693.025 1.263.025h6.6c.57 0 .96 0 1.263-.025.295-.024.45-.068.561-.125.259-.132.47-.342.601-.6.057-.112.1-.267.125-.562.024-.302.025-.693.025-1.263V5.7c0-.57 0-.96-.025-1.263-.024-.295-.068-.45-.125-.561a1.374 1.374 0 0 0-.6-.601c-.112-.057-.267-.1-.562-.125-.302-.025-.693-.025-1.263-.025H8.7c-.57 0-.96 0-1.263.025Z" clip-rule="evenodd"/>
</svg>`;
  const PinMapFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.4 8a6.6 6.6 0 1 1 13.2 0c0 2.278-1.271 3.926-2.605 5.314-.321.335-.653.661-.975.978l-.042.041c-.338.332-.664.655-.973.98-.619.652-1.133 1.284-1.468 1.955a.6.6 0 0 1-1.074 0c-.335-.67-.85-1.303-1.469-1.956a40.359 40.359 0 0 0-.972-.979l-.042-.04a47.782 47.782 0 0 1-.975-.979C6.67 11.926 5.4 10.278 5.4 8Zm5 0a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Zm-4.851 6.044a.6.6 0 0 1-.307.791c-.88.388-1.555.837-2.002 1.306-.445.467-.64.925-.64 1.359 0 .86.803 1.837 2.575 2.635C6.891 20.907 9.303 21.4 12 21.4s5.109-.493 6.825-1.265c1.772-.798 2.575-1.776 2.575-2.635 0-.434-.196-.892-.64-1.359-.448-.469-1.123-.918-2.002-1.306a.6.6 0 0 1 .484-1.098c.972.43 1.797.958 2.386 1.576.593.622.972 1.362.972 2.187 0 1.626-1.436 2.898-3.283 3.729-1.903.857-4.49 1.37-7.317 1.37-2.826 0-5.414-.513-7.317-1.37-1.848-.831-3.283-2.103-3.283-3.73 0-.824.379-1.564.971-2.186.59-.618 1.415-1.147 2.387-1.576a.6.6 0 0 1 .79.307Z" clip-rule="evenodd"/>
</svg>`;
  const Pin = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M8.337 1.4h7.327c.373 0 .693 0 .95.023.264.024.544.078.793.243a1.6 1.6 0 0 1 .683 1.008c.06.293.007.573-.07.828-.073.247-.192.544-.33.89l-1.018 2.545a1.812 1.812 0 0 0-.058.15.404.404 0 0 0-.011.06 1.774 1.774 0 0 0-.003.161v2.13c0 .233.003.266.008.292.008.035.02.07.036.101.012.024.03.051.176.232l1.588 1.986c.317.396.58.726.762 1 .18.271.35.588.35.95a1.6 1.6 0 0 1-.602 1.252c-.282.225-.636.29-.96.32-.327.029-.75.029-1.257.029h-4.1V22a.6.6 0 1 1-1.2 0v-6.4H7.3c-.508 0-.93 0-1.258-.03-.323-.03-.677-.095-.96-.32a1.6 1.6 0 0 1-.601-1.252c0-.36.17-.678.35-.948.181-.275.445-.605.762-1.001l1.588-1.986c.145-.18.163-.208.176-.232a.4.4 0 0 0 .035-.101 1.83 1.83 0 0 0 .008-.291v-2.13c0-.129 0-.147-.002-.162a.4.4 0 0 0-.012-.06 1.77 1.77 0 0 0-.057-.15L6.31 4.392a11.29 11.29 0 0 1-.331-.89c-.076-.255-.13-.535-.07-.828a1.6 1.6 0 0 1 .683-1.008c.25-.165.53-.219.794-.243.257-.023.577-.023.95-.023Zm8.334 13c.545 0 .912 0 1.18-.025.259-.023.319-.063.32-.063a.4.4 0 0 0 .149-.311s-.007-.072-.15-.29c-.149-.223-.378-.51-.718-.936l-1.57-1.962-.023-.03a2.427 2.427 0 0 1-.284-.406 1.599 1.599 0 0 1-.142-.406 2.43 2.43 0 0 1-.033-.494v-2.19c0-.094 0-.185.01-.277.01-.08.025-.16.047-.239.024-.089.058-.173.093-.26l.008-.02 1.008-2.52c.15-.378.249-.624.305-.812.055-.186.045-.238.044-.24a.4.4 0 0 0-.17-.252c-.003-.002-.047-.031-.24-.049-.196-.017-.46-.018-.868-.018H8.364c-.408 0-.672 0-.868.018-.193.018-.237.047-.24.049a.4.4 0 0 0-.17.252c0 .002-.012.054.044.24.056.188.154.434.305.812l1.008 2.52.008.02c.035.087.069.171.093.26a1.6 1.6 0 0 1 .046.24c.01.091.01.182.01.276v2.19c0 .17 0 .333-.032.494a1.599 1.599 0 0 1-.143.406 2.429 2.429 0 0 1-.283.406l-.024.03-1.57 1.962c-.34.426-.569.713-.717.936-.143.218-.15.29-.15.29a.4.4 0 0 0 .15.311s.06.04.32.063c.266.024.634.025 1.178.025h9.342Z" clip-rule="evenodd"/>
</svg>`;
  const Placeholder = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 20.8a8.8 8.8 0 1 0 0-17.6 8.8 8.8 0 0 0 0 17.6ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const Plane = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M16.91 2.787a2.997 2.997 0 0 1 4.321 4.155l-2.654 2.78c-.235.245-.258.278-.27.303a.33.33 0 0 0-.034.125c-.002.027 0 .066.077.398L20 17.701l.014.057c.056.243.113.485.094.729a1.58 1.58 0 0 1-.175.61c-.114.218-.29.393-.466.57l-.042.04-.374.375c-.272.272-.507.507-.71.676-.209.174-.458.344-.768.398a1.58 1.58 0 0 1-1.217-.287c-.253-.188-.4-.451-.509-.7-.106-.242-.21-.556-.333-.922l-1.609-4.827-2.48 2.48c-.216.216-.237.244-.249.266a.332.332 0 0 0-.039.11c-.004.025-.005.06.028.363l.176 1.58.006.05c.024.217.049.433.014.647a1.58 1.58 0 0 1-.186.531c-.107.189-.261.342-.415.496l-.037.036-.206.207c-.21.21-.397.396-.562.535a1.621 1.621 0 0 1-.633.353 1.58 1.58 0 0 1-1.09-.108 1.623 1.623 0 0 1-.551-.47 9.556 9.556 0 0 1-.447-.635l-1.512-2.269a1.687 1.687 0 0 0-.087-.126.326.326 0 0 0-.037-.037 1.72 1.72 0 0 0-.126-.087L3.203 16.83a9.606 9.606 0 0 1-.635-.446 1.623 1.623 0 0 1-.47-.552 1.58 1.58 0 0 1-.108-1.09c.067-.255.207-.459.353-.633.139-.165.325-.351.535-.562l.207-.207.036-.036c.154-.154.307-.308.496-.415a1.58 1.58 0 0 1 .531-.186c.214-.034.43-.01.647.014l.05.006 1.58.175c.302.034.338.033.362.029a.33.33 0 0 0 .111-.04c.022-.011.05-.032.265-.248l2.481-2.48-4.827-1.61a11.71 11.71 0 0 1-.923-.332c-.248-.11-.511-.256-.699-.509a1.58 1.58 0 0 1-.287-1.217c.054-.31.224-.56.398-.767.17-.204.404-.439.676-.71l.374-.375.042-.042c.176-.176.35-.352.568-.466a1.58 1.58 0 0 1 .61-.175c.245-.019.487.038.73.094l.057.013 7.126 1.645c.334.077.375.08.402.078a.33.33 0 0 0 .136-.04c.024-.014.056-.038.295-.285l2.589-2.674Zm3.39.85a1.747 1.747 0 0 0-2.491.02L15.22 6.33a14.22 14.22 0 0 0-.04.041c-.17.177-.34.352-.55.468-.2.11-.422.176-.65.192-.24.017-.478-.038-.716-.093l-.056-.013L6.081 5.28c-.34-.078-.381-.08-.41-.079a.33.33 0 0 0-.127.037c-.024.013-.058.037-.305.284l-.354.354c-.298.298-.49.492-.62.646a.713.713 0 0 0-.128.187.33.33 0 0 0 .06.252.713.713 0 0 0 .198.11c.184.08.443.167.843.3L11 9.293a.625.625 0 0 1 .244 1.036l-3.196 3.195-.036.036c-.154.155-.307.309-.495.416a1.58 1.58 0 0 1-.532.186c-.214.034-.43.01-.646-.014l-.051-.006-1.58-.176c-.302-.033-.337-.032-.362-.028a.33.33 0 0 0-.111.039c-.022.012-.05.033-.265.248l-.189.189a9.07 9.07 0 0 0-.48.5.55.55 0 0 0-.1.145.33.33 0 0 0 .022.227.55.55 0 0 0 .127.123c.121.097.294.212.569.396l2.247 1.498.018.012a1.579 1.579 0 0 1 .403.34c.061.073.113.15.164.227l.012.018 1.498 2.247c.184.276.3.448.396.569a.55.55 0 0 0 .123.127.33.33 0 0 0 .227.022.544.544 0 0 0 .145-.1c.119-.1.266-.246.5-.48l.189-.189c.215-.215.236-.243.248-.265a.328.328 0 0 0 .039-.111c.004-.025.005-.06-.028-.362l-.176-1.58a29.217 29.217 0 0 0-.006-.05c-.024-.217-.048-.433-.014-.647a1.58 1.58 0 0 1 .186-.532c.107-.188.261-.341.415-.495l.037-.036 3.195-3.196a.625.625 0 0 1 1.035.244l1.92 5.76c.134.4.22.659.301.843a.71.71 0 0 0 .11.198.33.33 0 0 0 .253.06c-.014.002.03 0 .186-.128.154-.13.348-.322.646-.62l.354-.354c.247-.247.271-.28.284-.305a.33.33 0 0 0 .037-.128c.002-.028 0-.068-.08-.41l-1.65-7.152-.013-.056c-.055-.236-.11-.472-.093-.71a1.58 1.58 0 0 1 .164-.6c.108-.214.275-.388.443-.564l.04-.041 2.654-2.78a1.747 1.747 0 0 0-.028-2.441Z" clip-rule="evenodd"/>
</svg>`;
  const PlusCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 7.4a.6.6 0 0 1 .6.6v3.4H16a.6.6 0 1 1 0 1.2h-3.4V16a.6.6 0 1 1-1.2 0v-3.4H8a.6.6 0 1 1 0-1.2h3.4V8a.6.6 0 0 1 .6-.6Zm0 13.4a8.8 8.8 0 1 0 0-17.6 8.8 8.8 0 0 0 0 17.6ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const PlusSquare = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 7.4a.6.6 0 0 1 .6.6v3.4H16a.6.6 0 1 1 0 1.2h-3.4V16a.6.6 0 1 1-1.2 0v-3.4H8a.6.6 0 1 1 0-1.2h3.4V8a.6.6 0 0 1 .6-.6Zm4.2-3.2H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v8.4c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h8.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V7.8c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036Zm-12.873.438C3 5.28 3 6.12 3 7.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 21 6.12 21 7.8 21h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 18.72 21 17.88 21 16.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C18.72 3 17.88 3 16.2 3H7.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311Z" clip-rule="evenodd"/>
</svg>`;
  const Plus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M12 4.4a.6.6 0 0 1 .6.6v6.4H19a.6.6 0 1 1 0 1.2h-6.4V19a.6.6 0 1 1-1.2 0v-6.4H5a.6.6 0 1 1 0-1.2h6.4V5a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Printer = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M9.175 1.4h5.65c.539 0 .98 0 1.337.03.371.03.706.094 1.018.253a2.6 2.6 0 0 1 1.137 1.137c.159.312.223.647.254 1.018.029.358.029.798.029 1.337V6.41c.224.007.43.016.62.032.537.044.995.136 1.414.35a3.6 3.6 0 0 1 1.574 1.573c.213.42.305.877.35 1.415.042.524.042 1.175.042 1.993V14.1c0 .834 0 1.373-.123 1.832a3.6 3.6 0 0 1-2.545 2.545c-.36.097-.77.117-1.332.122v.226c0 .539 0 .98-.03 1.338-.03.37-.094.705-.253 1.017a2.6 2.6 0 0 1-1.137 1.137c-.312.159-.647.224-1.018.254-.358.029-.798.029-1.337.029h-5.65c-.539 0-.98 0-1.338-.03-.37-.03-.705-.094-1.017-.253a2.6 2.6 0 0 1-1.137-1.137c-.159-.312-.224-.647-.254-1.017a17.79 17.79 0 0 1-.03-1.338V18.6c-.561-.005-.97-.025-1.33-.122a3.6 3.6 0 0 1-2.546-2.545c-.123-.46-.123-.998-.123-1.832v-2.326c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35.19-.015.395-.024.619-.03V5.174c0-.539 0-.98.03-1.337.03-.371.094-.706.253-1.018A2.6 2.6 0 0 1 6.82 1.683c.312-.159.647-.223 1.017-.254.359-.029.8-.029 1.338-.029ZM6.6 6.4h10.8V5.2c0-.57 0-.961-.025-1.265-.024-.296-.069-.455-.128-.57a1.4 1.4 0 0 0-.611-.612c-.116-.06-.275-.104-.571-.128C15.76 2.6 15.37 2.6 14.8 2.6H9.2c-.57 0-.961 0-1.265.025-.296.024-.455.069-.57.128a1.4 1.4 0 0 0-.612.611c-.06.116-.104.275-.128.571C6.6 4.24 6.6 4.63 6.6 5.2v1.2Zm0 12.4c0 .57 0 .961.025 1.265.024.296.069.455.128.57a1.4 1.4 0 0 0 .611.612c.116.06.275.104.571.128.304.024.695.025 1.265.025h5.6c.57 0 .961 0 1.265-.025.296-.024.455-.069.57-.128a1.4 1.4 0 0 0 .612-.611c.06-.116.104-.275.128-.571.024-.304.025-.695.025-1.265v-1.6c0-.57 0-.961-.025-1.265-.024-.296-.069-.455-.128-.57a1.4 1.4 0 0 0-.611-.612c-.116-.06-.275-.104-.571-.128A17.797 17.797 0 0 0 14.8 14.6H9.2c-.57 0-.961 0-1.265.025-.296.024-.455.069-.57.128a1.4 1.4 0 0 0-.612.611c-.06.116-.104.275-.128.571-.025.304-.025.695-.025 1.265v1.6Zm12-1.402v-.223c0-.539 0-.98-.03-1.338-.03-.37-.094-.705-.253-1.017a2.6 2.6 0 0 0-1.137-1.137c-.312-.159-.647-.223-1.018-.254-.358-.029-.798-.029-1.337-.029h-5.65c-.539 0-.98 0-1.338.03-.37.03-.705.094-1.017.253a2.6 2.6 0 0 0-1.137 1.137c-.159.312-.224.647-.254 1.018-.03.358-.03.798-.03 1.337v.223c-.539-.005-.803-.021-1.02-.08a2.4 2.4 0 0 1-1.697-1.697C2.605 15.335 2.6 14.97 2.6 14v-2.2c0-.85 0-1.451.039-1.922.038-.463.11-.745.223-.968A2.4 2.4 0 0 1 3.91 7.862c.223-.114.505-.185.968-.223C5.348 7.6 5.95 7.6 6.8 7.6h10.4c.85 0 1.451 0 1.922.039.463.038.745.11.968.223a2.4 2.4 0 0 1 1.048 1.048c.114.223.185.505.223.968.038.47.039 1.072.039 1.922V14c0 .969-.005 1.335-.082 1.621a2.4 2.4 0 0 1-1.697 1.697c-.217.058-.481.075-1.021.08ZM14.4 10.5a.6.6 0 0 1 .6-.6h3a.6.6 0 1 1 0 1.2h-3a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const QuestionCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M10.704 7.926A2.4 2.4 0 0 1 14.32 10c0 .681-.52 1.275-1.233 1.75a6.449 6.449 0 0 1-1.334.673l-.02.007-.004.001a.6.6 0 0 0-.41.569v1a.6.6 0 1 0 1.2 0v-.59a7.654 7.654 0 0 0 1.233-.66c.787-.525 1.768-1.431 1.768-2.75a3.6 3.6 0 0 0-6.996-1.2.6.6 0 0 0 1.132.4 2.4 2.4 0 0 1 1.048-1.274ZM11.15 17c0-.47.38-.85.85-.85h.01a.85.85 0 0 1 0 1.7H12a.85.85 0 0 1-.85-.85Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M12 1.4C6.146 1.4 1.4 6.146 1.4 12c0 5.854 4.746 10.6 10.6 10.6 5.854 0 10.6-4.746 10.6-10.6 0-5.854-4.746-10.6-10.6-10.6ZM2.6 12a9.4 9.4 0 1 1 18.8 0 9.4 9.4 0 0 1-18.8 0Z" clip-rule="evenodd"/>
</svg>`;
  const Rocket = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.868 20.653a.625.625 0 0 1-.737-.614v-4.614L8.574 12.87H3.961a.625.625 0 0 1-.615-.737v-.002l.001-.002.002-.008.005-.03.022-.104a11.948 11.948 0 0 1 .443-1.55c.314-.866.856-2.016 1.744-2.61.513-.342 1.13-.492 1.716-.546a8.03 8.03 0 0 1 1.739.052 12.509 12.509 0 0 1 1.519.296 13.175 13.175 0 0 1 10.967-5.753.625.625 0 0 1 .62.625c0 2.707-.764 7.437-5.748 10.979l.032.129c.087.349.19.834.26 1.374a8.03 8.03 0 0 1 .052 1.738c-.054.587-.204 1.203-.546 1.716-.594.888-1.744 1.431-2.61 1.745a11.957 11.957 0 0 1-1.655.464l-.029.006-.008.002h-.004Zm3.808-16.052a11.925 11.925 0 0 1 5.184-1.463c-.125 2.584-1.087 6.562-5.547 9.556a21.152 21.152 0 0 1-3.404 1.742l-2.343-2.344a20.805 20.805 0 0 1 1.743-3.36l.003-.006a11.925 11.925 0 0 1 4.364-4.125Zm-3.294 10.992c.992-.4 1.954-.87 2.879-1.406.06.275.123.603.168.955.062.483.09.993.047 1.463-.045.474-.158.862-.342 1.138-.351.525-1.15.957-1.996 1.263a9.84 9.84 0 0 1-.756.241v-3.654ZM9.834 8.744c-.28-.062-.615-.126-.976-.173a6.795 6.795 0 0 0-1.463-.046c-.474.044-.862.157-1.137.34-.525.352-.957 1.151-1.264 1.997-.099.272-.178.531-.241.757h3.656c.405-.992.881-1.953 1.425-2.875Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M4.046 16.15a2.75 2.75 0 0 1 3.67.114l.007.007c1.019 1.006 1.013 2.633.127 3.683-.387.46-.932.81-1.483 1.08a10.57 10.57 0 0 1-1.72.64 16.562 16.562 0 0 1-2.016.439l-.034.005h-.01l-.003.001h-.001a.626.626 0 0 1-.702-.702v-.004l.001-.01.005-.034c.005-.03.01-.072.02-.126a16.55 16.55 0 0 1 .419-1.89 10.57 10.57 0 0 1 .64-1.72c.27-.551.62-1.096 1.08-1.483Zm.258 4.323c-.375.107-.73.19-1.03.254.063-.3.146-.656.253-1.03a9.424 9.424 0 0 1 .562-1.515c.234-.478.492-.848.762-1.075a1.499 1.499 0 0 1 1.998.057c.517.515.541 1.397.046 1.984l-.002.001c-.227.27-.597.529-1.074.762a9.42 9.42 0 0 1-1.515.562Z" clip-rule="evenodd"/>
</svg>`;
  const Save = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M15.498 3.639c-.145-.035-.306-.039-.824-.039H7.6v2.8c0 .29 0 .471.012.608.01.13.027.165.032.174a.4.4 0 0 0 .174.174.493.493 0 0 0 .174.032c.137.012.318.012.608.012h6.8c.29 0 .471 0 .608-.012a.493.493 0 0 0 .174-.032.4.4 0 0 0 .174-.174.494.494 0 0 0 .032-.174c.011-.137.012-.318.012-.608V4.249c-.28-.278-.384-.373-.497-.443a1.401 1.401 0 0 0-.405-.167Zm1.926-.063-.063-.063-.045-.045c-.302-.303-.522-.523-.786-.685a2.6 2.6 0 0 0-.752-.311c-.3-.072-.612-.072-1.04-.072H7.774l-.733.001a.608.608 0 0 0-.09.001 16.91 16.91 0 0 0-1.17.04c-.538.045-.996.137-1.415.35a3.6 3.6 0 0 0-1.574 1.574c-.213.42-.305.877-.35 1.415C2.4 6.306 2.4 6.956 2.4 7.774v8.452c0 .818 0 1.469.043 1.993.044.538.136.996.35 1.415a3.6 3.6 0 0 0 1.573 1.574c.42.213.877.305 1.415.35a16.376 16.376 0 0 0 1.26.04c.228.002.472.002.733.002h8.452l.733-.001a.622.622 0 0 0 .09-.001c.449-.004.835-.014 1.17-.04.537-.045.996-.137 1.415-.35a3.6 3.6 0 0 0 1.573-1.574c.214-.42.306-.877.35-1.415.043-.524.043-1.175.043-1.993V9.262c0-.428 0-.74-.072-1.04a2.602 2.602 0 0 0-.311-.752c-.162-.264-.383-.484-.685-.786l-.045-.046-3.063-3.063Zm.176 1.873v.973c0 .261 0 .492-.016.684a1.626 1.626 0 0 1-.159.62 1.6 1.6 0 0 1-.699.7 1.626 1.626 0 0 1-.62.158c-.192.016-.423.016-.684.016H8.578c-.261 0-.492 0-.684-.016a1.626 1.626 0 0 1-.62-.158 1.6 1.6 0 0 1-.7-.7 1.626 1.626 0 0 1-.158-.62C6.4 6.914 6.4 6.683 6.4 6.422v-2.81a9.325 9.325 0 0 0-.522.027c-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 3.861 4.91c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v8.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.158.013.33.022.522.027v-5.81c0-.261 0-.492.016-.684a1.62 1.62 0 0 1 .158-.62 1.6 1.6 0 0 1 .7-.7 1.62 1.62 0 0 1 .62-.158c.192-.016.423-.016.684-.016h6.844c.261 0 .492 0 .684.016.203.016.415.054.62.158a1.6 1.6 0 0 1 .7.7c.104.205.142.417.158.62.016.192.016.423.016.684v5.81c.191-.005.364-.014.521-.027.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V9.325c0-.517-.004-.678-.039-.823a1.399 1.399 0 0 0-.167-.405c-.078-.127-.19-.244-.556-.61L17.6 5.449ZM16.4 20.4v-5.8c0-.29 0-.471-.012-.608a.494.494 0 0 0-.032-.174.4.4 0 0 0-.175-.174.494.494 0 0 0-.173-.032 8.477 8.477 0 0 0-.608-.012H8.6c-.29 0-.471 0-.608.012a.493.493 0 0 0-.174.032.4.4 0 0 0-.174.174.494.494 0 0 0-.032.174 8.437 8.437 0 0 0-.012.608v5.8h8.8Z" clip-rule="evenodd"/>
</svg>`;
  const Search = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10.2 3.8a6.4 6.4 0 1 0 0 12.8 6.4 6.4 0 0 0 0-12.8Zm-7.6 6.4a7.6 7.6 0 1 1 13.382 4.933l4.842 4.843a.6.6 0 1 1-.848.848l-4.843-4.842A7.6 7.6 0 0 1 2.6 10.2Z" clip-rule="evenodd"/>
</svg>`;
  const Send = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M19.686 2.941c.163-.047.428-.11.702-.02.326.11.581.365.69.691.092.274.028.539-.019.702-.05.173-.133.383-.222.614l-6.188 15.855c-.1.257-.19.487-.276.662-.078.157-.218.416-.49.557a1.093 1.093 0 0 1-1.01 0c-.271-.142-.411-.401-.489-.559-.086-.174-.175-.405-.276-.662l-2.469-6.35-.02-.05a6.937 6.937 0 0 0-.05-.02l-6.35-2.47c-.258-.1-.488-.19-.662-.275-.158-.078-.417-.218-.558-.49a1.093 1.093 0 0 1 0-1.009c.14-.272.4-.412.557-.49a8.91 8.91 0 0 1 .661-.276l15.855-6.188c.23-.09.441-.172.614-.222ZM19.2 5.684l-5.705 14.62-.116.293-.115-.294-2.431-6.252L19.2 5.684Zm-9.251 7.484L18.316 4.8l-14.62 5.704-.293.116.294.115 6.252 2.431Z" clip-rule="evenodd"/>
</svg>`;
  const SgCrest = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="#DB0000" d="M5.174 8.413s-.632.925.196 2.12c0 0 .13-.609 1.437-.609h1.569c1.481 0 2.591-1.465 1.895-2.977 0 0 1.045.113 1.394-.564.349-.676-.022-.947-.544-.947H8.485c0 .485-.893.552-.893 0H6.111s-1.111 0-1.133.97c0 0 .251-.158.5-.18v.258s-.304.057-.446.136c-.141.079-.348.293-.152.846.196.552.273.744.273.744s.316-.283.828-.283h.6c1.066 0 .87 1.071-.197 1.071-1.068 0-1.209-.586-1.209-.586l-.001.001Z"/>
  <path fill="#DB0000" d="M10.74 7.297s.359.023.62-.214c0 0 2.363 1.906-1.143 5.74-3.508 3.834-.796 6.316-.796 6.316S8.79 19.77 9.149 21c0 0-1.46-.853-2.575-2.301-1.612-2.093-2.598-5.295 1.83-7.85 0 0 2.923-1.522 2.335-3.552ZM7.127 5.075s.472-.872 1.568-.872c.864 0 1.06-.46 1.06-.46S10.134 3 12.036 3c1.744 0 2.92.602 3.87 1.406 0 0-2.563-1.647-5.09.67H7.127Z"/>
  <path fill="#DB0000" d="M17.786 10.594c-.073-2.722-2.106-5.639-6.477-5.473 4.27-3.745 11.676 4.615 5.576 9.007 0 0 1.02-1.508.9-3.534Z"/>
  <path fill="#DB0000" d="M11.963 5.421c5.33-.165 7.232 6.45 3.79 9.428l-3.456 1.73s-.45-1.504 1.22-3.264c1.671-1.758 3.282-5.051-1.335-7.217 0 0 .087-.45-.218-.676h-.001Z"/>
  <path fill="#DB0000" d="M11.687 6.91s.261-.256.349-.466c3.964 1.713 3.34 4.616.972 7.052-1.452 1.548-1.002 3.218-1.002 3.218s-1.77 1.142-2.381 2.135c0 0-2.565-2.261.987-6.014 3.485-3.684 1.075-5.925 1.075-5.925Z"/>
</svg>`;
  const Share = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M18 2.6a2.4 2.4 0 1 0 0 4.8 2.4 2.4 0 0 0 0-4.8Zm-2.764 4.706a3.6 3.6 0 1 0-.605-1.036L8.763 9.694a3.6 3.6 0 1 0 0 4.613l5.868 3.418a3.6 3.6 0 1 0 .607-1.035l-5.87-3.42c.15-.395.23-.823.23-1.27 0-.447-.08-.875-.23-1.27l5.867-3.424ZM8.049 10.75a.6.6 0 0 0 .049.083c.192.345.302.743.302 1.167a2.389 2.389 0 0 1-.35 1.25 2.4 2.4 0 1 1 0-2.5Zm7.829 7.128a.607.607 0 0 0 .104-.178 2.4 2.4 0 1 1-.104.178Z" clip-rule="evenodd"/>
</svg>`;
  const SlashCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M4.942 5.79A9.364 9.364 0 0 0 2.6 12a9.4 9.4 0 0 0 9.4 9.4c2.38 0 4.553-.884 6.209-2.342L4.942 5.79Zm.849-.848L19.058 18.21A9.364 9.364 0 0 0 21.4 12 9.4 9.4 0 0 0 12 2.6c-2.38 0-4.553.884-6.21 2.342ZM1.4 12C1.4 6.146 6.146 1.4 12 1.4c5.854 0 10.6 4.746 10.6 10.6 0 5.854-4.746 10.6-10.6 10.6-5.854 0-10.6-4.746-10.6-10.6Z" clip-rule="evenodd"/>
</svg>`;
  const Sliders = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M18 5.6a2.4 2.4 0 1 0 0 4.8 2.4 2.4 0 0 0 0-4.8Zm-3.55 1.8a3.6 3.6 0 1 1 0 1.2H3a.6.6 0 0 1 0-1.2h11.45ZM6 13.6a2.4 2.4 0 1 0 0 4.8 2.4 2.4 0 0 0 0-4.8ZM2.4 16a3.6 3.6 0 0 1 7.15-.6H21a.6.6 0 1 1 0 1.2H9.55A3.601 3.601 0 0 1 2.4 16Z" clip-rule="evenodd"/>
</svg>`;
  const Speedometer = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M2.619 11.4H4.5a.6.6 0 1 1 0 1.2H2.619a9.361 9.361 0 0 0 2.323 5.61l1.33-1.331a.6.6 0 0 1 .85.848l-1.331 1.33a9.361 9.361 0 0 0 5.609 2.324V19.5a.6.6 0 0 1 1.2 0v1.881a9.362 9.362 0 0 0 5.61-2.323l-1.33-1.329a.6.6 0 0 1 .849-.849l1.329 1.33a9.361 9.361 0 0 0 2.323-5.61H19.5a.6.6 0 0 1 0-1.2h1.881a9.36 9.36 0 0 0-2.29-5.57l-4.876 4.808a2.6 2.6 0 1 1-.848-.85l4.88-4.811A9.361 9.361 0 0 0 12.6 2.619V4.5a.6.6 0 1 1-1.2 0V2.619a9.362 9.362 0 0 0-5.65 2.36l1.332 1.333a.6.6 0 0 1-.848.849L4.906 5.833A9.36 9.36 0 0 0 2.619 11.4Zm16.957 8.013A10.566 10.566 0 0 0 22.6 12c0-5.854-4.746-10.6-10.6-10.6C6.146 1.4 1.4 6.146 1.4 12c0 2.886 1.153 5.502 3.024 7.414a.604.604 0 0 0 .162.162A10.566 10.566 0 0 0 12 22.6c2.886 0 5.502-1.153 7.413-3.024a.6.6 0 0 0 .163-.163ZM12 10.6a1.4 1.4 0 1 0 0 2.8 1.4 1.4 0 0 0 0-2.8Z" clip-rule="evenodd"/>
</svg>`;
  const StarFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.527 2.137a1.1 1.1 0 0 1 .946 0c.243.116.387.322.477.469.092.15.189.345.294.56l2.198 4.452c.017.035.03.062.043.085l.004.009.009.001.094.014 4.917.719c.236.034.452.066.622.107.168.04.408.113.593.309a1.1 1.1 0 0 1 .292.9c-.035.267-.187.468-.298.598a7.53 7.53 0 0 1-.442.453l-3.556 3.463-.068.067-.007.007.002.01.015.094.84 4.892c.04.235.077.45.09.625.014.172.019.423-.11.66a1.1 1.1 0 0 1-.766.557c-.265.049-.502-.034-.661-.1a7.468 7.468 0 0 1-.567-.28l-4.395-2.311-.085-.044-.008-.005a14.009 14.009 0 0 0-.093.049l-4.395 2.311a7.468 7.468 0 0 1-.567.28c-.159.066-.397.149-.661.1a1.1 1.1 0 0 1-.767-.557c-.128-.237-.123-.488-.11-.66.014-.174.051-.39.091-.625l.84-4.893.015-.094.002-.01-.007-.006-.068-.067-3.556-3.463c-.171-.167-.328-.32-.442-.453-.112-.13-.263-.33-.298-.598a1.1 1.1 0 0 1 .292-.9c.185-.196.425-.269.592-.31.17-.04.387-.072.623-.106l4.916-.719.095-.014.01-.001.003-.009.043-.085 2.198-4.453c.105-.214.202-.41.294-.56.09-.146.233-.352.476-.468Z" clip-rule="evenodd"/>
</svg>`;
  const Star = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.527 2.137a1.1 1.1 0 0 1 .946 0c.243.116.387.322.477.468.092.15.189.346.294.56l2.198 4.453c.017.035.03.062.043.085l.004.009.009.001.094.014 4.917.719c.236.034.452.066.622.107.168.04.408.113.593.309a1.1 1.1 0 0 1 .292.9c-.035.267-.187.468-.298.598-.114.134-.271.286-.442.453l-3.556 3.463-.068.067-.007.007.002.01.015.093.84 4.893c.04.235.077.45.09.625.014.172.019.423-.11.66a1.1 1.1 0 0 1-.766.556c-.265.05-.502-.033-.661-.099a7.468 7.468 0 0 1-.567-.28l-4.395-2.311a6.864 6.864 0 0 0-.085-.044L12 18.448l-.008.005-.085.044-4.395 2.311a7.571 7.571 0 0 1-.567.28c-.159.066-.397.148-.661.1a1.1 1.1 0 0 1-.767-.557c-.128-.237-.123-.488-.11-.66.014-.175.051-.39.091-.625l.84-4.893a9.161 9.161 0 0 0 .017-.103l-.007-.007-.068-.067-3.556-3.463c-.171-.167-.328-.32-.442-.453-.112-.13-.263-.33-.298-.598a1.1 1.1 0 0 1 .292-.9c.185-.196.425-.269.592-.31.17-.04.387-.072.623-.106l4.916-.719a9.093 9.093 0 0 0 .104-.015l.004-.009.043-.085 2.198-4.453c.105-.214.202-.41.294-.56.09-.146.233-.352.476-.468ZM12 3.362a16.06 16.06 0 0 0-.18.357l-2.186 4.43c-.005.01-.01.019-.014.03a1.507 1.507 0 0 1-.236.373 1.1 1.1 0 0 1-.342.249c-.15.07-.313.092-.429.109l-.032.004-4.891.715c-.17.025-.296.044-.395.061.07.072.161.16.284.28l3.538 3.447.024.022c.084.082.202.196.283.34a1.1 1.1 0 0 1 .13.403c.02.165-.008.327-.028.442l-.006.032-.835 4.867c-.029.17-.05.296-.064.395.09-.044.203-.104.355-.184l4.372-2.3.03-.015c.102-.054.248-.132.41-.163a1.1 1.1 0 0 1 .424 0c.162.031.308.109.41.163l.03.016 4.372 2.3c.152.08.266.139.355.183a15.737 15.737 0 0 0-.065-.395l-.834-4.867-.006-.032a1.505 1.505 0 0 1-.029-.442 1.1 1.1 0 0 1 .131-.402c.08-.145.2-.26.283-.34l.024-.023L20.42 9.97c.123-.12.214-.21.283-.28a15.706 15.706 0 0 0-.394-.062l-4.891-.715-.033-.004a1.507 1.507 0 0 1-.428-.11 1.1 1.1 0 0 1-.342-.248c-.112-.121-.184-.269-.236-.374l-.014-.03-2.187-4.43a15.985 15.985 0 0 0-.18-.356Z" clip-rule="evenodd"/>
</svg>`;
  const Stoplights = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M9.4 8a2.6 2.6 0 1 1 5.2 0 2.6 2.6 0 0 1-5.2 0ZM12 6.6a1.4 1.4 0 1 0 0 2.8 1.4 1.4 0 0 0 0-2.8Zm0 6.8a2.6 2.6 0 1 0 0 5.2 2.6 2.6 0 0 0 0-5.2ZM10.6 16a1.4 1.4 0 1 1 2.8 0 1.4 1.4 0 0 1-2.8 0Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M9.774 1.4h4.452c.818 0 1.468 0 1.993.043.537.044.996.136 1.415.35a3.6 3.6 0 0 1 1.573 1.573c.214.42.306.877.35 1.415.043.525.043 1.175.043 1.993v10.452c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V6.774c0-.818 0-1.468.043-1.993.044-.538.136-.996.35-1.415a3.6 3.6 0 0 1 1.573-1.574c.42-.213.877-.305 1.415-.35C8.305 1.4 8.956 1.4 9.774 1.4ZM7.878 2.639c-.463.038-.745.11-.968.223A2.4 2.4 0 0 0 5.861 3.91c-.113.223-.184.505-.222.968-.039.47-.04 1.072-.04 1.922v10.4c0 .85.001 1.451.04 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.039 1.072.039 1.922.039h4.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V6.8c0-.85 0-1.451-.039-1.922-.038-.463-.11-.745-.223-.968a2.4 2.4 0 0 0-1.049-1.048c-.222-.114-.504-.185-.968-.223C15.651 2.6 15.05 2.6 14.2 2.6H9.8c-.85 0-1.451 0-1.922.039Z" clip-rule="evenodd"/>
</svg>`;
  const SwitchHorizontal = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M16.058 3.058a.625.625 0 0 1 .884 0l4 4a.625.625 0 0 1 0 .884l-4 4a.625.625 0 1 1-.884-.884l2.933-2.933H3.5a.625.625 0 1 1 0-1.25h15.491l-2.933-2.933a.625.625 0 0 1 0-.884Zm-8.116 9a.625.625 0 0 1 0 .884l-2.933 2.933H20.5a.625.625 0 1 1 0 1.25H5.009l2.933 2.933a.625.625 0 1 1-.884.884l-4-4a.625.625 0 0 1 0-.884l4-4a.625.625 0 0 1 .884 0Z"/>
</svg>`;
  const SwitchVertical = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M7.058 3.058a.625.625 0 0 1 .884 0l4 4a.625.625 0 1 1-.884.884L8.125 5.009V20.5a.625.625 0 1 1-1.25 0V5.009L3.942 7.942a.625.625 0 1 1-.884-.884l4-4Zm8.817.442a.625.625 0 1 1 1.25 0v15.491l2.933-2.933a.625.625 0 1 1 .884.884l-4 4a.625.625 0 0 1-.884 0l-4-4a.625.625 0 1 1 .884-.884l2.933 2.933V3.5Z"/>
</svg>`;
  const Tablet = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M10.5 16.875a.625.625 0 1 0 0 1.25h3a.625.625 0 1 0 0-1.25h-3Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M16.526 1.875H7.474c-.503 0-.918 0-1.257.028-.352.03-.676.092-.98.249-.471.243-.852.63-1.091 1.105-.154.305-.215.63-.243.985-.028.342-.028.762-.028 1.272v12.972c0 .51 0 .93.028 1.272.028.355.09.68.243.985.239.475.62.862 1.091 1.105.304.157.628.22.98.249a16.5 16.5 0 0 0 1.257.028h9.052c.503 0 .919 0 1.257-.028.352-.03.676-.092.98-.249.471-.243.852-.63 1.091-1.105.154-.305.215-.63.243-.985.028-.342.028-.762.028-1.272V5.514c0-.51 0-.93-.028-1.272-.028-.355-.09-.68-.243-.985a2.513 2.513 0 0 0-1.091-1.105c-.304-.157-.628-.22-.98-.249a16.473 16.473 0 0 0-1.257-.028ZM5.811 3.262c.097-.05.236-.09.51-.113.28-.023.644-.024 1.179-.024h9c.535 0 .899 0 1.18.024.273.022.413.063.51.113.234.122.426.316.547.556.051.101.092.245.115.524.023.286.023.656.023 1.198v12.92c0 .542 0 .912-.023 1.198-.023.278-.064.423-.115.524-.12.24-.313.434-.547.556-.098.05-.237.09-.51.113-.281.024-.645.024-1.18.024h-9c-.535 0-.899 0-1.18-.024-.273-.022-.412-.063-.51-.113a1.263 1.263 0 0 1-.547-.556c-.051-.101-.092-.245-.114-.524a16.605 16.605 0 0 1-.024-1.198V5.54c0-.542 0-.912.024-1.198.022-.279.063-.423.114-.524.12-.24.313-.434.548-.556Z" clip-rule="evenodd"/>
</svg>`;
  const Telephone = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.012 3.744a1.335 1.335 0 0 0-1.205 0c-.17.085-.347.252-.894.8l-.153.152c-.53.53-.718.725-.865.986A2.68 2.68 0 0 0 3.6 6.817c0 .304.053.5.21 1.057a17.818 17.818 0 0 0 4.563 7.753 17.818 17.818 0 0 0 7.753 4.562c.557.158.753.21 1.057.211a2.68 2.68 0 0 0 1.134-.295c.262-.147.456-.335.987-.865l.152-.153c.548-.547.715-.725.8-.894a1.335 1.335 0 0 0 0-1.205c-.085-.169-.252-.346-.8-.894l-.188-.188c-.36-.36-.476-.472-.58-.54a1.335 1.335 0 0 0-1.455 0c-.105.068-.22.18-.58.54l-.02.02a2.3 2.3 0 0 1-.286.256c-.38.271-.903.36-1.351.23a2.07 2.07 0 0 1-.33-.135l-.02-.01a14.729 14.729 0 0 1-4.043-2.87 14.726 14.726 0 0 1-2.87-4.044l-.01-.02a1.946 1.946 0 0 1-.135-.329 1.611 1.611 0 0 1 .23-1.35c.076-.107.165-.196.256-.286l.02-.02c.36-.36.472-.476.54-.58a1.335 1.335 0 0 0 0-1.456c-.068-.104-.18-.22-.54-.58l-.188-.189c-.548-.547-.725-.714-.894-.8ZM5.265 2.673a2.535 2.535 0 0 1 2.288 0c.364.184.686.506 1.128.949l.073.073.189.188.048.048c.291.292.503.503.648.727.547.84.547 1.923 0 2.764-.145.224-.357.435-.648.726l-.048.048c-.124.124-.138.14-.149.156a.416.416 0 0 0-.054.317c.006.02.01.033.074.165a13.527 13.527 0 0 0 2.637 3.715 13.529 13.529 0 0 0 3.715 2.637c.132.063.146.068.165.074a.416.416 0 0 0 .317-.054c.016-.011.032-.025.156-.149l.048-.048c.291-.291.502-.503.726-.648a2.535 2.535 0 0 1 2.764 0c.224.145.435.357.726.648l.048.048.189.189.073.073c.443.442.765.764.949 1.128a2.533 2.533 0 0 1 0 2.288c-.184.364-.506.685-.949 1.128a49.66 49.66 0 0 0-.073.073l-.152.152-.048.048c-.468.467-.779.779-1.2 1.015a3.86 3.86 0 0 1-1.726.449c-.482-.001-.828-.1-1.341-.245l-.04-.012a19.019 19.019 0 0 1-8.274-4.867A19.02 19.02 0 0 1 2.656 8.2l-.01-.039C2.498 7.648 2.4 7.303 2.4 6.82a3.86 3.86 0 0 1 .449-1.725c.236-.421.548-.733 1.015-1.2l.048-.048.152-.152.073-.073c.443-.443.764-.765 1.128-.95Z" clip-rule="evenodd"/>
</svg>`;
  const ThreeDotsVertical = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M10.4 5a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Zm0 7a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Zm0 7a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Z" clip-rule="evenodd"/>
</svg>`;
  const ThreeDots = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M3.4 12a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Zm7 0a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Zm7 0a1.6 1.6 0 1 1 3.2 0 1.6 1.6 0 0 1-3.2 0Z" clip-rule="evenodd"/>
</svg>`;
  const Ticket = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M10.1 6.925c.345 0 .625.28.625.625v.95a.625.625 0 1 1-1.25 0v-.95c0-.345.28-.625.625-.625Zm0 3.975c.345 0 .625.28.625.625v.95a.625.625 0 1 1-1.25 0v-.95c0-.345.28-.625.625-.625Zm0 3.975c.345 0 .625.28.625.625v.95a.625.625 0 1 1-1.25 0v-.95c0-.345.28-.625.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M5.514 3.975h12.972c.51 0 .93 0 1.273.028.355.029.681.091.987.247.475.242.862.629 1.104 1.104.156.306.218.632.247.987.028.343.028.763.028 1.273v1.161c0 .345-.28.625-.625.625a2.7 2.7 0 1 0 0 5.4c.345 0 .625.28.625.625v1.16c0 .51 0 .931-.028 1.274-.029.355-.091.681-.247.987a2.525 2.525 0 0 1-1.104 1.104c-.306.156-.632.218-.987.247-.343.028-.763.028-1.273.028H5.514c-.51 0-.93 0-1.273-.028-.355-.029-.681-.091-.987-.247a2.525 2.525 0 0 1-1.104-1.104c-.156-.306-.218-.632-.247-.987a16.913 16.913 0 0 1-.028-1.273v-1.161c0-.345.28-.625.625-.625a2.7 2.7 0 0 0 0-5.4.625.625 0 0 1-.625-.625v-1.16c0-.511 0-.931.028-1.274.029-.355.091-.681.247-.987A2.525 2.525 0 0 1 3.254 4.25c.306-.156.632-.218.987-.247.343-.028.763-.028 1.273-.028ZM4.343 5.249c-.278.023-.421.064-.522.115a1.27 1.27 0 0 0-.557.557c-.051.1-.092.244-.115.522-.024.285-.024.655-.024 1.197v.56a3.951 3.951 0 0 1 0 7.8v.56c0 .542 0 .912.024 1.197.023.278.064.421.115.522.122.24.317.435.557.557.1.051.244.092.522.115.285.023.655.024 1.197.024h12.92c.542 0 .912 0 1.197-.024.278-.023.421-.064.522-.115a1.27 1.27 0 0 0 .557-.557c.051-.1.092-.244.115-.522.024-.286.024-.655.024-1.197V16a3.951 3.951 0 0 1 0-7.8v-.56c0-.542 0-.912-.024-1.197-.023-.278-.064-.421-.115-.522a1.275 1.275 0 0 0-.557-.557c-.1-.051-.244-.092-.522-.115a16.375 16.375 0 0 0-1.197-.024H5.54c-.542 0-.912 0-1.197.024Z" clip-rule="evenodd"/>
</svg>`;
  const ToggleOff = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M1.4 12A5.6 5.6 0 0 1 7 6.4h10a5.6 5.6 0 1 1 0 11.2H7A5.6 5.6 0 0 1 1.4 12Zm9.064 4.4H17a4.4 4.4 0 1 0 0-8.8h-6.536A5.59 5.59 0 0 1 12.6 12a5.59 5.59 0 0 1-2.136 4.4ZM7 7.6a4.4 4.4 0 1 0 0 8.8 4.4 4.4 0 0 0 0-8.8Z" clip-rule="evenodd"/>
</svg>`;
  const ToggleOn = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M1.4 12A5.6 5.6 0 0 1 7 6.4h10a5.6 5.6 0 1 1 0 11.2H7A5.6 5.6 0 0 1 1.4 12ZM17 16.4a4.4 4.4 0 1 0 0-8.8 4.4 4.4 0 0 0 0 8.8Zm-3.465-8.8A5.59 5.59 0 0 0 11.4 12a5.59 5.59 0 0 0 2.135 4.4H7a4.4 4.4 0 1 1 0-8.8h6.535Z" clip-rule="evenodd"/>
</svg>`;
  const Train = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M7.125 14.616a1.155 1.155 0 1 1 2.31.002 1.155 1.155 0 0 1-2.31-.002Zm7.438 0a1.155 1.155 0 1 1 2.31.002 1.155 1.155 0 0 1-2.31-.002Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M8.573 1.875h6.854c.87 0 1.56 0 2.117.045.57.047 1.055.144 1.499.369a3.81 3.81 0 0 1 1.666 1.661c.226.443.324.927.37 1.496.046.555.046 1.243.046 2.11v5.711c0 .867 0 1.555-.046 2.11-.046.569-.144 1.053-.37 1.496a3.807 3.807 0 0 1-1.666 1.66 3.16 3.16 0 0 1-.79.272l1.212 2.415a.625.625 0 1 1-1.117.56l-1.428-2.845c-.429.013-.922.013-1.493.013H8.573c-.57 0-1.064 0-1.493-.013L5.652 21.78a.625.625 0 1 1-1.117-.56l1.212-2.415a3.16 3.16 0 0 1-.79-.271 3.807 3.807 0 0 1-1.666-1.661c-.226-.443-.324-.927-.37-1.496-.046-.555-.046-1.244-.046-2.11V7.556c0-.867 0-1.555.046-2.11.046-.569.144-1.053.37-1.496a3.807 3.807 0 0 1 1.666-1.66c.444-.225.929-.322 1.499-.369.557-.045 1.247-.045 2.117-.045Zm-4.448 8.663v2.702c0 .9 0 1.537.041 2.035.04.491.117.792.238 1.029.245.48.637.87 1.12 1.115.238.121.54.198 1.033.238.5.04 1.14.041 2.043.041h6.8c.903 0 1.542 0 2.043-.041.493-.04.795-.117 1.034-.238a2.557 2.557 0 0 0 1.12-1.115c.12-.237.196-.538.237-1.029.04-.498.041-1.135.041-2.035v-2.702H4.125Zm15.75-1.25H4.125V7.583c0-.9 0-1.537.041-2.035.04-.491.117-.792.238-1.029.245-.48.637-.87 1.12-1.115.238-.121.54-.198 1.033-.238.5-.04 1.14-.041 2.043-.041h6.8c.903 0 1.542 0 2.043.041.493.04.795.117 1.034.238.482.244.874.635 1.12 1.115.12.237.196.538.237 1.029.04.498.041 1.135.041 2.035v1.705Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M8.719 21.5c0-.345.28-.625.625-.625h5.312a.625.625 0 1 1 0 1.25H9.344a.625.625 0 0 1-.625-.625Z"/>
</svg>`;
  const Translate = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M8.2 2.875c.345 0 .625.28.625.625v1.275H13.9a.625.625 0 1 1 0 1.25h-1.854c-.487 2.48-1.45 4.753-2.816 6.723.377.253.757.466 1.126.632a.625.625 0 1 1-.512 1.14 9.047 9.047 0 0 1-1.364-.77 17.074 17.074 0 0 1-5.702 4.56.625.625 0 1 1-.556-1.12 15.824 15.824 0 0 0 5.265-4.201C6.337 12 5.322 10.74 4.774 9.443a.625.625 0 0 1 1.152-.486c.448 1.06 1.303 2.149 2.312 3.028a16.49 16.49 0 0 0 2.533-5.96H2.5a.625.625 0 0 1 0-1.25h5.075V3.5c0-.345.28-.625.625-.625Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="m13.261 17.325-1.647 3.445a.625.625 0 1 1-1.128-.54l4.55-9.514a7.1 7.1 0 0 1 .282-.552c.085-.144.229-.358.479-.479a1.1 1.1 0 0 1 .956 0c.25.121.394.335.48.479.087.149.18.342.28.552l4.55 9.514a.625.625 0 0 1-1.127.54l-1.647-3.445H13.26Zm3.014-6.3.122.253 2.294 4.797h-4.832l2.294-4.797.122-.252Z" clip-rule="evenodd"/>
</svg>`;
  const Trash = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.175 1.4h1.65c.539 0 .98 0 1.337.03.371.03.706.094 1.018.253a2.6 2.6 0 0 1 1.137 1.137c.159.312.223.647.254 1.018.029.358.029.798.029 1.337V5.4H21a.6.6 0 1 1 0 1.2h-1.4v10.626c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H9.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V6.6H3a.6.6 0 0 1 0-1.2h4.4v-.225c0-.539 0-.98.03-1.337.03-.371.094-.706.253-1.018A2.6 2.6 0 0 1 8.82 1.683c.312-.159.647-.223 1.017-.254.358-.029.8-.029 1.338-.029ZM5.6 6.6v10.6c0 .85 0 1.451.039 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h4.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V6.6H5.6Zm9.8-1.2H8.6v-.2c0-.57 0-.961.025-1.265.024-.296.069-.455.127-.57a1.4 1.4 0 0 1 .612-.612c.116-.06.275-.104.571-.128.304-.025.695-.025 1.265-.025h1.6c.57 0 .961 0 1.265.025.296.024.455.069.57.128a1.4 1.4 0 0 1 .612.611c.059.116.103.275.128.571.024.304.025.695.025 1.265v.2ZM10 10.9a.6.6 0 0 1 .6.6v5a.6.6 0 1 1-1.2 0v-5a.6.6 0 0 1 .6-.6Zm4 0a.6.6 0 0 1 .6.6v5a.6.6 0 1 1-1.2 0v-5a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const Truck = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M5.514 2.875h7.272c.51 0 .93 0 1.273.028.355.029.681.091.987.247.475.242.862.629 1.104 1.104.156.306.218.632.247.987.028.343.028.763.028 1.273v1.011h1.639c.188 0 .377 0 .56.044.16.038.315.102.455.188.162.099.294.232.427.365l.031.031 1.96 1.96.03.03c.134.134.267.266.366.428.086.14.15.294.188.455.045.184.044.372.044.56v2.667c0 .246 0 .468-.015.652a1.598 1.598 0 0 1-.157.61 1.575 1.575 0 0 1-.688.688c-.204.105-.413.14-.61.157-.184.015-.406.015-.652.015h-.341a3 3 0 1 1-4.874 0H9.212a3 3 0 1 1-4.86-.02 5.726 5.726 0 0 1-.11-.008c-.356-.029-.682-.091-.988-.247a2.525 2.525 0 0 1-1.104-1.104c-.156-.306-.218-.632-.247-.987a16.912 16.912 0 0 1-.028-1.273V6.514c0-.51 0-.93.028-1.273.029-.355.091-.681.247-.987A2.525 2.525 0 0 1 3.254 3.15c.306-.156.632-.218.987-.247.343-.028.763-.028 1.273-.028Zm1.261 13.5a1.75 1.75 0 1 0 0 3.5 1.75 1.75 0 0 0 0-3.5Zm8.4-1.25V6.54c0-.542 0-.912-.024-1.197-.022-.278-.064-.421-.115-.522a1.275 1.275 0 0 0-.557-.557c-.1-.051-.244-.092-.522-.115a16.381 16.381 0 0 0-1.197-.024H5.54c-.542 0-.912 0-1.197.024-.278.023-.421.064-.522.115a1.27 1.27 0 0 0-.557.557c-.051.1-.092.244-.115.522-.024.285-.024.655-.024 1.197v6.17c0 .542 0 .911.024 1.197.023.278.064.421.115.522.122.24.317.435.557.557.1.051.244.092.522.115.285.023.655.024 1.197.024h9.635Zm1.25-6.35v6.35h3.555c.276 0 .446 0 .573-.01a.822.822 0 0 0 .145-.025.325.325 0 0 0 .142-.143s.003-.006.008-.026a.822.822 0 0 0 .016-.118c.01-.127.011-.297.011-.573v-2.6c0-.263-.004-.292-.009-.312a.325.325 0 0 0-.039-.094c-.011-.018-.029-.042-.214-.227l-1.96-1.96c-.185-.185-.209-.203-.227-.214a.326.326 0 0 0-.094-.039c-.02-.005-.05-.009-.312-.009h-1.595Zm.8 7.6a1.75 1.75 0 1 0 0 3.5 1.75 1.75 0 0 0 0-3.5Z" clip-rule="evenodd"/>
</svg>`;
  const TwitterX = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M17.176 3.844h2.76l-6.03 6.91L21 20.156h-5.554l-4.35-5.702-4.979 5.702H3.355l6.45-7.39L3 3.843h5.695l3.933 5.212 4.548-5.212ZM16.207 18.5h1.53L7.864 5.413h-1.64L16.206 18.5Z"/>
</svg>`;
  const Unlock = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7 7v3h-.5A2.5 2.5 0 0 0 4 12.5v7A2.5 2.5 0 0 0 6.5 22h11a2.5 2.5 0 0 0 2.5-2.5v-7a2.5 2.5 0 0 0-2.5-2.5H8.2V7a3.8 3.8 0 0 1 7.553-.598c.052.328.316.598.647.598s.604-.27.565-.599A5 5 0 0 0 7 7Zm-1.8 5.5a1.3 1.3 0 0 1 1.3-1.3h11a1.3 1.3 0 0 1 1.3 1.3v7a1.3 1.3 0 0 1-1.3 1.3h-11a1.3 1.3 0 0 1-1.3-1.3v-7Z" clip-rule="evenodd"/>
</svg>`;
  const Upload = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.576 2.576a.6.6 0 0 1 .848 0l5 5a.6.6 0 0 1-.848.848L12.6 4.45V15a.6.6 0 1 1-1.2 0V4.449L7.424 8.424a.6.6 0 0 1-.848-.848l5-5ZM3 14.4a.6.6 0 0 1 .6.6v1.2c0 .85 0 1.451.039 1.922.038.463.11.745.222.968a2.4 2.4 0 0 0 1.05 1.048c.222.114.504.185.967.223.47.038 1.072.039 1.922.039h8.4c.85 0 1.451 0 1.921-.039.464-.038.746-.11.969-.223a2.4 2.4 0 0 0 1.048-1.048c.113-.223.185-.505.223-.968.038-.47.039-1.072.039-1.922V15a.6.6 0 1 1 1.2 0v1.226c0 .818 0 1.469-.043 1.993-.044.538-.136.996-.35 1.415a3.6 3.6 0 0 1-1.573 1.574c-.42.213-.878.305-1.415.35-.525.042-1.175.042-1.993.042H7.774c-.818 0-1.469 0-1.993-.043-.538-.044-.996-.136-1.415-.35a3.6 3.6 0 0 1-1.574-1.573c-.213-.42-.305-.877-.35-1.415-.042-.524-.042-1.175-.042-1.993V15a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const UserCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.975 9.875a4.025 4.025 0 1 1 8.05 0 4.025 4.025 0 0 1-8.05 0ZM12 7.1a2.775 2.775 0 1 0 0 5.55 2.775 2.775 0 0 0 0-5.55Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M1.875 12C1.875 6.408 6.408 1.875 12 1.875S22.125 6.408 22.125 12 17.592 22.125 12 22.125 1.875 17.592 1.875 12ZM12 3.125a8.875 8.875 0 0 0-6.873 14.49 4.025 4.025 0 0 1 2.688-1.913c.39-.077.842-.077 1.555-.077h5.26c.713 0 1.166 0 1.555.077a4.025 4.025 0 0 1 2.688 1.913A8.875 8.875 0 0 0 12 3.125Zm5.96 15.452a2.775 2.775 0 0 0-2.019-1.649c-.252-.05-.571-.053-1.39-.053H9.45c-.82 0-1.138.003-1.391.053a2.776 2.776 0 0 0-2.018 1.649A8.843 8.843 0 0 0 12 20.875c2.294 0 4.384-.87 5.96-2.298Z" clip-rule="evenodd"/>
</svg>`;
  const UserSquare = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.975 9.875a4.025 4.025 0 1 1 8.05 0 4.025 4.025 0 0 1-8.05 0ZM12 7.1a2.775 2.775 0 1 0 0 5.55 2.775 2.775 0 0 0 0-5.55Z" clip-rule="evenodd"/>
  <path fill="currentColor" fill-rule="evenodd" d="M7.553 2.875h8.894c.691 0 1.248 0 1.699.037.464.038.87.118 1.245.31.598.303 1.084.79 1.388 1.387.191.375.271.781.31 1.245.036.451.036 1.008.036 1.7v8.893c0 .691 0 1.248-.037 1.699-.038.464-.118.87-.31 1.245a3.175 3.175 0 0 1-1.387 1.388c-.131.067-.267.12-.41.164-.602.182-1.377.182-2.447.182H7.466c-1.07 0-1.845 0-2.447-.182a2.49 2.49 0 0 1-.41-.164A3.175 3.175 0 0 1 3.22 19.39c-.191-.375-.271-.781-.31-1.245-.036-.451-.036-1.008-.036-1.7V7.554c0-.691 0-1.248.037-1.699.038-.464.118-.87.31-1.245a3.175 3.175 0 0 1 1.387-1.39c.375-.191.781-.271 1.245-.31.451-.036 1.008-.036 1.7-.036ZM5.956 4.158c-.387.031-.61.09-.78.177a1.925 1.925 0 0 0-.841.841c-.087.17-.146.393-.177.78-.033.394-.033.9-.033 1.624v8.84c0 .724 0 1.23.033 1.624.031.386.09.61.177.78.073.143.163.276.268.395a3.33 3.33 0 0 1 .05-.354 4.025 4.025 0 0 1 3.162-3.163c.39-.077.842-.077 1.555-.077h5.26c.713 0 1.165 0 1.555.077a4.025 4.025 0 0 1 3.163 3.163c.022.112.038.229.05.355.104-.12.194-.253.267-.396.087-.17.146-.394.177-.78.033-.394.033-.9.033-1.624V7.58c0-.724 0-1.23-.033-1.624-.031-.387-.09-.61-.177-.78a1.925 1.925 0 0 0-.841-.841c-.17-.087-.394-.146-.78-.177-.394-.033-.9-.033-1.624-.033H7.58c-.724 0-1.23 0-1.624.033ZM18.172 19.83c-.004-.359-.017-.556-.05-.722a2.775 2.775 0 0 0-2.18-2.18c-.254-.051-.572-.054-1.392-.054h-5.1c-.82 0-1.139.003-1.391.053a2.775 2.775 0 0 0-2.18 2.18c-.034.167-.047.364-.051.723.382.04.915.044 1.752.044h8.84c.837 0 1.37-.003 1.752-.044Z" clip-rule="evenodd"/>
</svg>`;
  const Users = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M4.875 7a4.625 4.625 0 1 1 9.25 0 4.625 4.625 0 0 1-9.25 0ZM9.5 3.625a3.375 3.375 0 1 0 0 6.75 3.375 3.375 0 0 0 0-6.75Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M14.92 3.056a.625.625 0 0 1 .815-.345 4.626 4.626 0 0 1 0 8.578.625.625 0 0 1-.47-1.16 3.376 3.376 0 0 0 0-6.259.625.625 0 0 1-.344-.814ZM7.977 14.375h3.046c.912 0 1.629 0 2.208.04.59.04 1.082.123 1.539.312a4.625 4.625 0 0 1 2.503 2.503c.189.456.272.95.313 1.539.039.579.039 1.296.039 2.208V21a.625.625 0 1 1-1.25 0c0-.94 0-1.614-.037-2.146-.036-.526-.105-.867-.22-1.146a3.375 3.375 0 0 0-1.826-1.826c-.28-.115-.62-.184-1.146-.22-.532-.037-1.206-.037-2.146-.037H8c-.94 0-1.614 0-2.146.037-.526.035-.867.104-1.146.22-.827.342-1.484 1-1.826 1.826-.116.28-.185.62-.22 1.146-.037.532-.037 1.206-.037 2.146a.625.625 0 1 1-1.25 0v-.023c0-.912 0-1.629.04-2.208.04-.59.123-1.082.312-1.539a4.625 4.625 0 0 1 2.503-2.503c.456-.189.95-.272 1.539-.313.579-.039 1.296-.039 2.208-.039Zm10.418.595a.625.625 0 0 1 .76-.45 4.627 4.627 0 0 1 3.47 4.48v2a.625.625 0 1 1-1.25 0v-2a3.377 3.377 0 0 0-2.53-3.269.625.625 0 0 1-.45-.76Z"/>
</svg>`;
  const VideoRecorder = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M7.273 3.875h4.454c.817 0 1.468 0 1.994.043.54.044 1.001.136 1.425.352a3.625 3.625 0 0 1 1.584 1.584c.216.424.308.886.352 1.425.042.517.043 1.157.043 1.956l2.578-1.45a1.625 1.625 0 0 1 2.422 1.416v5.58a1.625 1.625 0 0 1-2.422 1.417l-2.578-1.45c0 .807 0 1.452-.043 1.973-.044.54-.136 1.001-.352 1.425a3.625 3.625 0 0 1-1.584 1.584c-.424.216-.886.308-1.425.352-.526.043-1.177.043-1.994.043H7.273c-.817 0-1.469 0-1.994-.043-.54-.044-1.001-.136-1.425-.352a3.625 3.625 0 0 1-1.584-1.584c-.216-.424-.308-.886-.352-1.425-.043-.526-.043-1.177-.043-1.994V9.273c0-.817 0-1.469.043-1.994.044-.54.136-1.001.352-1.425A3.625 3.625 0 0 1 3.854 4.27c.424-.216.886-.308 1.425-.352.525-.043 1.177-.043 1.994-.043ZM15.875 9.3c0-.85 0-1.45-.039-1.92-.037-.461-.109-.74-.22-.958a2.375 2.375 0 0 0-1.038-1.038c-.218-.111-.497-.182-.958-.22-.47-.039-1.07-.039-1.92-.039H7.3c-.85 0-1.45 0-1.92.039-.461.038-.74.109-.958.22-.447.228-.81.59-1.038 1.038-.111.218-.182.497-.22.958-.039.47-.039 1.07-.039 1.92v5.4c0 .85 0 1.45.039 1.92.038.461.109.74.22.958.228.447.59.81 1.038 1.038.218.111.497.183.958.22.47.039 1.07.039 1.92.039h4.4c.85 0 1.45 0 1.92-.039.461-.037.74-.109.958-.22.447-.228.81-.59 1.038-1.038.111-.218.183-.497.22-.959.038-.468.039-1.069.039-1.919V9.3Zm1.25 4.014 3.191 1.795c.25.14.559-.04.559-.327v-5.58a.375.375 0 0 0-.559-.327l-3.191 1.795v2.644Z" clip-rule="evenodd"/>
</svg>`;
  const VolumeMax = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.912 3.086c.359-.029.71.117.943.39.197.231.236.518.253.701.017.197.017.448.017.727v14.192c0 .28 0 .53-.017.727-.017.183-.056.47-.253.7a1.12 1.12 0 0 1-.943.391c-.303-.023-.533-.2-.674-.317a8.979 8.979 0 0 1-.527-.502l-3.184-3.184c-.194-.195-.222-.217-.245-.23a.374.374 0 0 0-.109-.046c-.026-.006-.061-.01-.336-.01h-1.76c-.26 0-.492 0-.685-.016a1.649 1.649 0 0 1-.63-.161 1.625 1.625 0 0 1-.71-.71 1.65 1.65 0 0 1-.161-.63c-.016-.193-.016-.425-.016-.685V9.577c0-.26 0-.492.016-.685a1.65 1.65 0 0 1 .161-.63 1.63 1.63 0 0 1 .71-.71 1.65 1.65 0 0 1 .63-.161c.193-.016.425-.016.685-.016h1.76c.275 0 .31-.004.336-.01a.375.375 0 0 0 .109-.045c.023-.015.05-.037.245-.23l3.184-3.185a8.99 8.99 0 0 1 .527-.502c.14-.118.371-.294.674-.317Zm-.04 1.428c-.078.076-.174.172-.296.294L8.411 7.973l-.033.032c-.14.141-.277.279-.443.38-.146.09-.304.155-.47.195-.19.045-.383.045-.582.045H5.1c-.29 0-.47 0-.606.011-.127.01-.16.027-.164.03a.375.375 0 0 0-.164.164c-.002.004-.02.037-.03.164a8.42 8.42 0 0 0-.011.606v4.8c0 .29 0 .47.012.606.01.127.027.16.029.164.036.07.093.128.164.164a.483.483 0 0 0 .164.03c.136.01.316.01.606.01h1.783c.199 0 .393 0 .582.046.166.04.324.105.47.194.166.102.303.24.443.38l.033.033 3.165 3.165c.122.122.218.218.297.294.002-.11.002-.246.002-.417V4.93c0-.171 0-.307-.002-.417Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M18.366 5.993a.625.625 0 0 1 .872.142A10.011 10.011 0 0 1 21.125 12c0 2.188-.7 4.214-1.887 5.865a.625.625 0 0 1-1.014-.73A8.761 8.761 0 0 0 19.875 12a8.76 8.76 0 0 0-1.651-5.135.625.625 0 0 1 .142-.872Zm-3.138 2.351a.625.625 0 0 1 .87.156 6.1 6.1 0 0 1 1.099 3.5 6.1 6.1 0 0 1-1.098 3.5.625.625 0 1 1-1.026-.715A4.85 4.85 0 0 0 15.947 12a4.85 4.85 0 0 0-.874-2.785.625.625 0 0 1 .155-.87Z"/>
</svg>`;
  const VolumeX = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11.912 3.086c.359-.029.71.117.943.39.197.231.236.518.253.701.017.197.017.448.017.727v14.192c0 .28 0 .53-.017.727-.017.183-.056.47-.253.7a1.12 1.12 0 0 1-.943.391c-.303-.023-.533-.2-.674-.317a8.979 8.979 0 0 1-.527-.502l-3.184-3.184c-.194-.195-.222-.217-.245-.23a.374.374 0 0 0-.109-.046c-.026-.006-.061-.01-.336-.01h-1.76c-.26 0-.492 0-.685-.016a1.649 1.649 0 0 1-.63-.161 1.625 1.625 0 0 1-.71-.71 1.65 1.65 0 0 1-.161-.63c-.016-.193-.016-.425-.016-.685V9.577c0-.26 0-.492.016-.685a1.65 1.65 0 0 1 .161-.63 1.63 1.63 0 0 1 .71-.71 1.65 1.65 0 0 1 .63-.161c.193-.016.425-.016.685-.016h1.76c.275 0 .31-.004.336-.01a.375.375 0 0 0 .109-.045c.023-.015.05-.037.245-.23l3.184-3.185a8.99 8.99 0 0 1 .527-.502c.14-.118.371-.294.674-.317Zm-.04 1.428c-.078.076-.174.172-.296.294L8.411 7.973l-.033.032c-.14.141-.277.279-.443.38-.146.09-.304.155-.47.195-.19.045-.383.045-.582.045H5.1c-.29 0-.47 0-.606.011-.127.01-.16.027-.164.03a.375.375 0 0 0-.164.164c-.002.004-.02.037-.03.164a8.42 8.42 0 0 0-.011.606v4.8c0 .29 0 .47.012.606.01.127.027.16.029.164.036.07.093.128.164.164a.483.483 0 0 0 .164.03c.136.01.316.01.606.01h1.783c.199 0 .393 0 .582.046.166.04.324.105.47.194.166.102.303.24.443.38l.033.033 3.165 3.165c.122.122.218.218.297.294.002-.11.002-.246.002-.417V4.93c0-.171 0-.307-.002-.417Z" clip-rule="evenodd"/>
  <path fill="currentColor" d="M15.058 9.058a.625.625 0 0 1 .884 0L18 11.116l2.058-2.058a.625.625 0 1 1 .884.884L18.884 12l2.058 2.058a.625.625 0 0 1-.884.884L18 12.884l-2.058 2.058a.625.625 0 1 1-.884-.884L17.116 12l-2.058-2.058a.625.625 0 0 1 0-.884Z"/>
</svg>`;
  const WindowDash = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M15 14H9a.6.6 0 1 0 0 1.2h6a.6.6 0 1 0 0-1.2Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M20.673 4.638C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311ZM4.2 9.6h15.6v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm0-1.2h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6Z" clip-rule="evenodd"/>
</svg>`;
  const WindowDesktop = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M15 17H9a.6.6 0 1 0 0 1.2h6a.6.6 0 1 0 0-1.2Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M20.673 4.638C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311ZM4.2 9.6h15.6v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm0-1.2h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6Z" clip-rule="evenodd"/>
</svg>`;
  const WindowDock = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M7.5 14h1a.6.6 0 1 1 0 1.2h-1a.6.6 0 1 1 0-1.2Zm4 0h1a.6.6 0 1 1 0 1.2h-1a.6.6 0 1 1 0-1.2Zm5 0h-1a.6.6 0 1 0 0 1.2h1a.6.6 0 1 0 0-1.2Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M20.673 4.638C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311ZM4.2 9.6h15.6v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm0-1.2h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6Z" clip-rule="evenodd"/>
</svg>`;
  const WindowFullscreen = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M8.273 2.88H8.5a.62.62 0 1 1 0 1.24h-.2c-.85 0-1.45 0-1.92.039-.462.038-.742.109-.96.22a2.38 2.38 0 0 0-1.04 1.04c-.112.22-.184.5-.221.961-.039.47-.04 1.07-.04 1.92v.2a.62.62 0 1 1-1.24 0v-.227c0-.817 0-1.468.044-1.994.044-.538.136-1 .351-1.422a3.62 3.62 0 0 1 1.582-1.582c.423-.216.884-.308 1.423-.352.526-.043 1.177-.043 1.994-.043Zm9.347 1.279c-.47-.039-1.07-.039-1.92-.039h-.2a.62.62 0 0 1 0-1.24h.227c.817 0 1.468 0 1.994.043.538.044 1 .136 1.422.352a3.62 3.62 0 0 1 1.582 1.582c.216.422.308.884.352 1.422.043.526.043 1.177.043 1.994V8.5a.62.62 0 0 1-1.24 0v-.2c0-.85 0-1.45-.039-1.92-.038-.462-.109-.742-.22-.96a2.38 2.38 0 0 0-1.04-1.04c-.22-.112-.5-.183-.961-.221ZM3.5 14.88a.62.62 0 0 1 .62.62v.2c0 .85 0 1.45.039 1.92.037.462.109.742.22.96a2.38 2.38 0 0 0 1.04 1.04c.22.112.5.183.961.221.47.038 1.07.039 1.92.039h.2a.62.62 0 0 1 0 1.24h-.227c-.817 0-1.468 0-1.994-.043-.539-.044-1-.136-1.423-.352a3.62 3.62 0 0 1-1.582-1.582c-.215-.422-.307-.884-.351-1.422-.043-.526-.043-1.177-.043-1.994V15.5a.62.62 0 0 1 .62-.62Zm17 0a.62.62 0 0 1 .62.62v.227c0 .817 0 1.468-.043 1.994-.044.538-.136 1-.352 1.422a3.619 3.619 0 0 1-1.582 1.582c-.422.216-.884.308-1.422.352-.526.043-1.177.043-1.994.043H15.5a.62.62 0 0 1 0-1.24h.2c.85 0 1.45 0 1.92-.039.462-.038.741-.109.96-.22a2.38 2.38 0 0 0 1.04-1.04c.112-.22.183-.5.221-.961.038-.47.039-1.07.039-1.92v-.2a.62.62 0 0 1 .62-.62Z"/>
</svg>`;
  const WindowPlus = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12 11a.6.6 0 0 1 .6.6V14H15a.6.6 0 1 1 0 1.2h-2.4v2.4a.6.6 0 1 1-1.2 0v-2.4H9A.6.6 0 1 1 9 14h2.4v-2.4a.6.6 0 0 1 .6-.6Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M20.673 4.638C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311ZM4.2 9.6h15.6v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm0-1.2h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6Z" clip-rule="evenodd"/>
</svg>`;
  const WindowSidebar = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M19.8 8.4v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6h15.6ZM4.2 9.6h4.2v10.2h-.6c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm5.4 10.2V9.6h10.2v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H9.6ZM7.8 21c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8Z" clip-rule="evenodd"/>
</svg>`;
  const WindowSplit = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M19.8 8.4v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6h15.6ZM4.2 9.6h7.2v10.2H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm8.4 10.2V9.6h7.2v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036h-3.6ZM7.8 21c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8Z" clip-rule="evenodd"/>
</svg>`;
  const WindowStack = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M17.973 17.973c.603-.035 1.027-.116 1.39-.3a3 3 0 0 0 1.31-1.311C21 15.72 21 14.88 21 13.2V7.8c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.31-1.311C18.72 3 17.88 3 16.2 3h-5.4c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.31 1.311c-.185.362-.265.786-.3 1.39-.603.034-1.028.115-1.39.299a3 3 0 0 0-1.311 1.311C3 8.28 3 9.12 3 10.8v5.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 21 6.12 21 7.8 21h5.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311c.184-.362.265-.786.3-1.39ZM17.538 7.4a3 3 0 0 0-1.176-1.073C15.72 6 14.88 6 13.2 6H7.232l.005-.073c.035-.426.097-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.124-.063.319-.124.745-.16.44-.035 1.012-.036 1.872-.036h5.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.125.318.16.744.03.368.035.83.036 1.473h-2.262Zm.398 1.2C18 9.134 18 9.826 18 10.8v5.969l.073-.006c.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.125-.318.16-.744.035-.44.036-1.013.036-1.873V8.6h-1.864ZM4.2 11.6h12.6v4.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873v-4.6Zm0-1.2h12.6a19.706 19.706 0 0 0-.037-1.473c-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744-.03.368-.035.83-.036 1.473Z" clip-rule="evenodd"/>
</svg>`;
  const WindowX = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M14.546 12.054a.6.6 0 0 1 0 .849L12.849 14.6l1.697 1.697a.6.6 0 0 1-.849.848L12 15.448l-1.697 1.697a.6.6 0 1 1-.849-.848l1.697-1.697-1.697-1.697a.6.6 0 1 1 .849-.849L12 13.751l1.697-1.697a.6.6 0 0 1 .849 0Z"/>
  <path fill="currentColor" fill-rule="evenodd" d="M20.673 4.638C21 5.28 21 6.12 21 7.8v8.4c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311C18.72 21 17.88 21 16.2 21H7.8c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311C3 18.72 3 17.88 3 16.2V7.8c0-1.68 0-2.52.327-3.162a3 3 0 0 1 1.311-1.311C5.28 3 6.12 3 7.8 3h8.4c1.68 0 2.52 0 3.162.327a3 3 0 0 1 1.311 1.311ZM4.2 9.6h15.6v6.6c0 .86 0 1.433-.037 1.873-.035.426-.096.62-.16.744a1.8 1.8 0 0 1-.786.787c-.123.063-.318.124-.744.16-.44.035-1.013.036-1.873.036H7.8c-.86 0-1.433 0-1.873-.037-.426-.035-.62-.096-.744-.16a1.8 1.8 0 0 1-.787-.786c-.063-.123-.124-.318-.16-.744-.035-.44-.036-1.013-.036-1.873V9.6Zm0-1.2h15.6v-.6c0-.86 0-1.433-.037-1.873-.035-.426-.096-.62-.16-.744a1.8 1.8 0 0 0-.786-.787c-.123-.063-.318-.124-.744-.16-.44-.035-1.013-.036-1.873-.036H7.8c-.86 0-1.433 0-1.873.037-.426.035-.62.096-.744.16a1.8 1.8 0 0 0-.787.786c-.063.123-.124.318-.16.744C4.202 6.367 4.2 6.94 4.2 7.8v.6Z" clip-rule="evenodd"/>
</svg>`;
  const Window = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M19.8 9.6H4.2v6.6c0 .86 0 1.433.037 1.873.035.426.096.62.16.744a1.8 1.8 0 0 0 .786.787c.123.063.318.124.744.16.44.035 1.013.036 1.873.036h8.4c.86 0 1.433 0 1.873-.037.426-.035.62-.096.744-.16a1.8 1.8 0 0 0 .787-.786c.063-.123.124-.318.16-.744.035-.44.036-1.013.036-1.873V9.6Zm0-1.2H4.2v-.6c0-.86 0-1.433.037-1.873.035-.426.096-.62.16-.744a1.8 1.8 0 0 1 .786-.787c.123-.063.318-.124.744-.16C6.367 4.202 6.94 4.2 7.8 4.2h8.4c.86 0 1.433 0 1.873.037.426.035.62.096.744.16a1.8 1.8 0 0 1 .787.786c.063.123.124.318.16.744.035.44.036 1.013.036 1.873v.6Zm1.2-.6c0-1.68 0-2.52-.327-3.162a3 3 0 0 0-1.311-1.311C18.72 3 17.88 3 16.2 3H7.8c-1.68 0-2.52 0-3.162.327a3 3 0 0 0-1.311 1.311C3 5.28 3 6.12 3 7.8v8.4c0 1.68 0 2.52.327 3.162a3 3 0 0 0 1.311 1.311C5.28 21 6.12 21 7.8 21h8.4c1.68 0 2.52 0 3.162-.327a3 3 0 0 0 1.311-1.311C21 18.72 21 17.88 21 16.2V7.8Z" clip-rule="evenodd"/>
</svg>`;
  const XCircleFill = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M15.424 8.576a.6.6 0 0 1 0 .848L12.85 12l2.575 2.576a.6.6 0 0 1-.848.848L12 12.85l-2.576 2.575a.6.6 0 1 1-.848-.848L11.15 12 8.576 9.424a.6.6 0 1 1 .848-.848L12 11.15l2.576-2.575a.6.6 0 0 1 .848 0ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const XCircle = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M15.424 8.576a.6.6 0 0 1 0 .848L12.85 12l2.575 2.576a.6.6 0 0 1-.848.848L12 12.85l-2.576 2.575a.6.6 0 1 1-.848-.848L11.15 12 8.576 9.424a.6.6 0 1 1 .848-.848L12 11.15l2.576-2.575a.6.6 0 0 1 .848 0ZM12 20.8a8.8 8.8 0 1 0 0-17.6 8.8 8.8 0 0 0 0 17.6ZM22 12c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2s10 4.477 10 10Z" clip-rule="evenodd"/>
</svg>`;
  const Youtube = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" d="M12.058 5.678h.1c.925.003 5.61.037 6.874.377a2.261 2.261 0 0 1 1.592 1.597c.114.428.194.994.248 1.578l.011.117.025.292.009.117c.073 1.028.082 1.992.083 2.202v.084a36.093 36.093 0 0 1-.092 2.318l-.01.118-.01.117c-.056.644-.139 1.283-.264 1.753a2.258 2.258 0 0 1-1.592 1.598c-1.305.35-6.265.375-6.953.376h-.16c-.347 0-1.785-.006-3.293-.058l-.19-.007-.099-.004-.384-.016c-1.25-.055-2.438-.144-2.986-.293a2.258 2.258 0 0 1-1.592-1.596c-.125-.47-.208-1.11-.265-1.753l-.018-.235A35.32 35.32 0 0 1 3 12.07v-.14c.002-.241.011-1.077.072-2l.008-.115.003-.059.01-.117.024-.292.011-.117c.054-.584.134-1.151.248-1.578a2.258 2.258 0 0 1 1.592-1.597c.548-.147 1.737-.237 2.986-.293l.19-.008.291-.01.193-.008c1.07-.034 2.142-.053 3.213-.057h.217v-.001ZM10.2 9.289v5.42l4.676-2.708L10.2 9.289Z"/>
</svg>`;
  const ZoomIn = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11 3.6a7.4 7.4 0 1 0 5.159 12.706.607.607 0 0 1 .146-.147A7.4 7.4 0 0 0 11 3.6Zm6.49 13.042a8.6 8.6 0 1 0-.849.849l3.935 3.933a.6.6 0 0 0 .848-.848l-3.933-3.934ZM11 7.4a.6.6 0 0 1 .6.6v2.4H14a.6.6 0 1 1 0 1.2h-2.4V14a.6.6 0 1 1-1.2 0v-2.4H8a.6.6 0 1 1 0-1.2h2.4V8a.6.6 0 0 1 .6-.6Z" clip-rule="evenodd"/>
</svg>`;
  const ZoomOut = `
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
  <path fill="currentColor" fill-rule="evenodd" d="M11 3.6a7.4 7.4 0 1 0 5.159 12.706.607.607 0 0 1 .146-.147A7.4 7.4 0 0 0 11 3.6Zm6.49 13.042a8.6 8.6 0 1 0-.849.849l3.935 3.933a.6.6 0 0 0 .848-.848l-3.933-3.934ZM7.4 11a.6.6 0 0 1 .6-.6h6a.6.6 0 1 1 0 1.2H8a.6.6 0 0 1-.6-.6Z" clip-rule="evenodd"/>
</svg>`;

  var iconRegistry = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Archive: Archive,
    ArrowBarDown: ArrowBarDown,
    ArrowBarLeft: ArrowBarLeft,
    ArrowBarRight: ArrowBarRight,
    ArrowBarUp: ArrowBarUp,
    ArrowCircleDown: ArrowCircleDown,
    ArrowCircleLeft: ArrowCircleLeft,
    ArrowCircleRight: ArrowCircleRight,
    ArrowCircleUp: ArrowCircleUp,
    ArrowClockwise: ArrowClockwise,
    ArrowDown: ArrowDown,
    ArrowLeft: ArrowLeft,
    ArrowRepeat: ArrowRepeat,
    ArrowRight: ArrowRight,
    ArrowSquareDown: ArrowSquareDown,
    ArrowSquareLeft: ArrowSquareLeft,
    ArrowSquareRight: ArrowSquareRight,
    ArrowSquareUp: ArrowSquareUp,
    ArrowUp: ArrowUp,
    BankFill: BankFill,
    BellSlash: BellSlash,
    Bell: Bell,
    BiFunnel: BiFunnel,
    BookmarkFill: BookmarkFill,
    Bookmark: Bookmark,
    BoxArrowUpRight: BoxArrowUpRight,
    BoxSeam: BoxSeam,
    Building: Building,
    Bus: Bus,
    Calculator: Calculator,
    CalendarCheck: CalendarCheck,
    CalendarX: CalendarX,
    Calendar: Calendar,
    Camera: Camera,
    Car: Car,
    ChatDots: ChatDots,
    ChatLeftText: ChatLeftText,
    Chat: Chat,
    CheckCircleFill: CheckCircleFill,
    CheckCircle: CheckCircle,
    Check: Check,
    ChevronDown: ChevronDown,
    ChevronLeft: ChevronLeft,
    ChevronRight: ChevronRight,
    ChevronSelectorVertical: ChevronSelectorVertical,
    ChevronUp: ChevronUp,
    Clock: Clock,
    CloudCheck: CloudCheck,
    CloudDownload: CloudDownload,
    CloudUpload: CloudUpload,
    Cloud: Cloud,
    Compass: Compass,
    Cross: Cross,
    CursorFill: CursorFill,
    Cursor: Cursor,
    DashCircle: DashCircle,
    DashSquare: DashSquare,
    Dash: Dash,
    Download: Download,
    Edit: Edit,
    ExclamationCircleFill: ExclamationCircleFill,
    ExclamationCircle: ExclamationCircle,
    ExclamationTriangleFill: ExclamationTriangleFill,
    ExclamationTriangle: ExclamationTriangle,
    Exclamation: Exclamation,
    EyeFill: EyeFill,
    EyeSlashFill: EyeSlashFill,
    EyeSlash: EyeSlash,
    Eye: Eye,
    Facebook: Facebook,
    FileEarmarkText: FileEarmarkText,
    FilePdf: FilePdf,
    FilePlus: FilePlus,
    FileText: FileText,
    File: File,
    Files: Files,
    FolderCheck: FolderCheck,
    FolderMinus: FolderMinus,
    FolderPlus: FolderPlus,
    Folder: Folder,
    Gear: Gear,
    GeoAlt: GeoAlt,
    GeoFill: GeoFill,
    Geo: Geo,
    GlobeAlt: GlobeAlt,
    Globe: Globe,
    Google: Google,
    GridFill: GridFill,
    HandThumbsDown: HandThumbsDown,
    HandThumbsUp: HandThumbsUp,
    HardDrive: HardDrive,
    Heart: Heart,
    HouseDoor: HouseDoor,
    House: House,
    Image: Image,
    InBox: InBox,
    InfoCircleFill: InfoCircleFill,
    InfoCircle: InfoCircle,
    Instagram: Instagram,
    Laptop: Laptop,
    Layers: Layers,
    LayoutTextWindowReverse: LayoutTextWindowReverse,
    LayoutTextWindow: LayoutTextWindow,
    Layout: Layout,
    Lightbulb: Lightbulb,
    Link: Link,
    Linkedin: Linkedin,
    List: List,
    LockFill: LockFill,
    Lock: Lock,
    Login: Login,
    Logout: Logout,
    Luggage: Luggage,
    Mail: Mail,
    Map: Map$1,
    Menu: Menu,
    Microphone: Microphone,
    Monitor: Monitor,
    Paperclip: Paperclip,
    Passport: Passport,
    Pencil: Pencil,
    PendingCircle: PendingCircle,
    PersonDash: PersonDash,
    PersonPlus: PersonPlus,
    PersonX: PersonX,
    Person: Person,
    Phone: Phone,
    PinMapFill: PinMapFill,
    Pin: Pin,
    Placeholder: Placeholder,
    Plane: Plane,
    PlusCircle: PlusCircle,
    PlusSquare: PlusSquare,
    Plus: Plus,
    Printer: Printer,
    QuestionCircle: QuestionCircle,
    Rocket: Rocket,
    Save: Save,
    Search: Search,
    Send: Send,
    SgCrest: SgCrest,
    Share: Share,
    SlashCircle: SlashCircle,
    Sliders: Sliders,
    Speedometer: Speedometer,
    StarFill: StarFill,
    Star: Star,
    Stoplights: Stoplights,
    SwitchHorizontal: SwitchHorizontal,
    SwitchVertical: SwitchVertical,
    Tablet: Tablet,
    Telephone: Telephone,
    ThreeDotsVertical: ThreeDotsVertical,
    ThreeDots: ThreeDots,
    Ticket: Ticket,
    ToggleOff: ToggleOff,
    ToggleOn: ToggleOn,
    Train: Train,
    Translate: Translate,
    Trash: Trash,
    Truck: Truck,
    TwitterX: TwitterX,
    Unlock: Unlock,
    Upload: Upload,
    UserCircle: UserCircle,
    UserSquare: UserSquare,
    Users: Users,
    VideoRecorder: VideoRecorder,
    VolumeMax: VolumeMax,
    VolumeX: VolumeX,
    WindowDash: WindowDash,
    WindowDesktop: WindowDesktop,
    WindowDock: WindowDock,
    WindowFullscreen: WindowFullscreen,
    WindowPlus: WindowPlus,
    WindowSidebar: WindowSidebar,
    WindowSplit: WindowSplit,
    WindowStack: WindowStack,
    WindowX: WindowX,
    Window: Window,
    XCircleFill: XCircleFill,
    XCircle: XCircle,
    Youtube: Youtube,
    ZoomIn: ZoomIn,
    ZoomOut: ZoomOut
  });

}));
//# sourceMappingURL=index.umd.js.map
