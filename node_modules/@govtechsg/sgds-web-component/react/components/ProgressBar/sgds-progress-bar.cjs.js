'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var lit = require('lit');
var decorators_js = require('lit/decorators.js');
var styleMap_js = require('lit/directives/style-map.js');
var sgdsElement = require('../../base/sgds-element.cjs.js');
var progressBar = require('./progress-bar.cjs.js');

/**
 * @summary Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.
 */
class SgdsProgressBar extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        /** The background color of the progress bar. Available options: `primary`, `neutral` */
        this.variant = "primary";
        /**
         * Sets the aria label for assistive devices.
         */
        this.arialabel = "";
        /** Add label on top of progress bar */
        this.label = "";
    }
    render() {
        return lit.html `
      <div class="progress-container">
        <div class="progress">
          <div
            class="progress-bar"
            role="progressbar"
            style=${styleMap_js.styleMap({ width: `${this.value}%` })}
            aria-label=${this.arialabel}
            aria-valuenow=${this.value}
            aria-valuemin=${this.ariamin}
            aria-valuemax=${this.ariamax}
          ></div>
        </div>
        ${this.label ? lit.html `<span class="label">${this.label}</span>` : lit.nothing}
      </div>
    `;
    }
}
SgdsProgressBar.styles = [...sgdsElement["default"].styles, progressBar["default"]];
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsProgressBar.prototype, "variant", void 0);
tslib.__decorate([
    decorators_js.property({ type: Number, reflect: true })
], SgdsProgressBar.prototype, "value", void 0);
tslib.__decorate([
    decorators_js.property({ type: Number, reflect: true })
], SgdsProgressBar.prototype, "ariamin", void 0);
tslib.__decorate([
    decorators_js.property({ type: Number, reflect: true })
], SgdsProgressBar.prototype, "ariamax", void 0);
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsProgressBar.prototype, "arialabel", void 0);
tslib.__decorate([
    decorators_js.property({ type: String, reflect: true })
], SgdsProgressBar.prototype, "label", void 0);

exports.SgdsProgressBar = SgdsProgressBar;
exports["default"] = SgdsProgressBar;
//# sourceMappingURL=sgds-progress-bar.cjs.js.map
