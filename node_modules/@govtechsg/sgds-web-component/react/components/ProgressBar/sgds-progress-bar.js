'use client';
import { __decorate } from 'tslib';
import { html, nothing } from 'lit';
import { property } from 'lit/decorators.js';
import { styleMap } from 'lit/directives/style-map.js';
import SgdsElement from '../../base/sgds-element.js';
import css_248z from './progress-bar.js';

/**
 * @summary Provide up-to-date feedback on the progress of a workflow or action with simple yet flexible progress bars.
 */
class SgdsProgressBar extends SgdsElement {
    constructor() {
        super(...arguments);
        /** The background color of the progress bar. Available options: `primary`, `neutral` */
        this.variant = "primary";
        /**
         * Sets the aria label for assistive devices.
         */
        this.arialabel = "";
        /** Add label on top of progress bar */
        this.label = "";
    }
    render() {
        return html `
      <div class="progress-container">
        <div class="progress">
          <div
            class="progress-bar"
            role="progressbar"
            style=${styleMap({ width: `${this.value}%` })}
            aria-label=${this.arialabel}
            aria-valuenow=${this.value}
            aria-valuemin=${this.ariamin}
            aria-valuemax=${this.ariamax}
          ></div>
        </div>
        ${this.label ? html `<span class="label">${this.label}</span>` : nothing}
      </div>
    `;
    }
}
SgdsProgressBar.styles = [...SgdsElement.styles, css_248z];
__decorate([
    property({ type: String, reflect: true })
], SgdsProgressBar.prototype, "variant", void 0);
__decorate([
    property({ type: Number, reflect: true })
], SgdsProgressBar.prototype, "value", void 0);
__decorate([
    property({ type: Number, reflect: true })
], SgdsProgressBar.prototype, "ariamin", void 0);
__decorate([
    property({ type: Number, reflect: true })
], SgdsProgressBar.prototype, "ariamax", void 0);
__decorate([
    property({ type: String, reflect: true })
], SgdsProgressBar.prototype, "arialabel", void 0);
__decorate([
    property({ type: String, reflect: true })
], SgdsProgressBar.prototype, "label", void 0);

export { SgdsProgressBar, SgdsProgressBar as default };
//# sourceMappingURL=sgds-progress-bar.js.map
