'use client';
import { __decorate } from 'tslib';
import { property } from 'lit/decorators.js';
import css_248z from '../styles/feedback.js';
import css_248z$1 from '../styles/form-hint.js';
import css_248z$2 from '../styles/form-label.js';
import css_248z$3 from '../styles/form-placeholder.js';
import SgdsElement from './sgds-element.js';
import genId from '../utils/generateId.js';

class FormControlElement extends SgdsElement {
    constructor() {
        super(...arguments);
        /** The input's label  */
        this.label = "";
        /** The input's hint text */
        this.hintText = "";
        /** Disables the input. */
        this.disabled = false;
        /** Marks the component as invalid. Replace the pseudo :invalid selector for absent in custom elements */
        this.invalid = false;
        this._controlId = genId("input");
        this._labelId = genId("label");
    }
    /** Programatically sets the invalid state of the input. Pass in boolean value in the argument */
    setInvalid(bool) {
        this.invalid = bool;
        if (bool) {
            this.emit("sgds-invalid");
        }
        else {
            this.emit("sgds-valid");
        }
    }
}
FormControlElement.styles = [...SgdsElement.styles, css_248z, css_248z$1, css_248z$2, css_248z$3];
__decorate([
    property({ reflect: true })
], FormControlElement.prototype, "label", void 0);
__decorate([
    property({ reflect: true })
], FormControlElement.prototype, "hintText", void 0);
__decorate([
    property({ reflect: true })
], FormControlElement.prototype, "name", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], FormControlElement.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], FormControlElement.prototype, "invalid", void 0);

export { FormControlElement as default };
//# sourceMappingURL=form-control-element.js.map
