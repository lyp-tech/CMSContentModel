'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var lit = require('lit');
var decorators_js = require('lit/decorators.js');
var classMap_js = require('lit/directives/class-map.js');
var sgdsElement = require('../../base/sgds-element.cjs.js');
var badge = require('./badge.cjs.js');
var watch = require('../../utils/watch.cjs.js');
var sgdsCloseButton = require('../../internals/CloseButton/sgds-close-button.cjs.js');

/**
 * @summary Badges can be used to highlight important bits of information such as labels, notifications & status.
 *
 * @slot default - slot for badge
 * @slot icon - The slot for icon to the left of the badge text
 *
 * @event sgds-show - Emitted when the badge appears.
 * @event sgds-hide - Emitted after the badge closes.
 */
class SgdsBadge extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        /** Controls the appearance of the dismissible badge. This prop only applies when dismissible is true  */
        this.show = false;
        /** One or more button variant combinations buttons may be one of a variety of visual variants such as: `info`, `success`, `danger`, `warning`, 'neutral' */
        this.variant = "info";
        /** Manually set the outlined state to false */
        this.outlined = false;
        /** Manually set the dismissible state of the button to `false` */
        this.dismissible = false;
    }
    /** Closes the badge  */
    close() {
        this.show = false;
    }
    /**@internal */
    _handleShowChange() {
        this.show ? this.emit("sgds-show") : this.emit("sgds-hide");
    }
    render() {
        return (this.dismissible && this.show) || !this.dismissible
            ? lit.html `
          <div
            class="  
          ${classMap_js.classMap({
                [`badge-dismissible`]: this.dismissible,
                badge: true,
                outlined: this.outlined
            })}
            "
            aria-hidden=${this.show ? "false" : "true"}
          >
            ${!this.dismissible ? lit.html `<slot name="icon"></slot>` : lit.nothing}
            <span class="badge-label">
              <slot></slot>
            </span>

            ${this.dismissible
                ? lit.html `<sgds-close-button
                  size="sm"
                  aria-label="close the badge"
                  @click=${this.close}
                  variant=${this.outlined ? "dark" : "light"}
                ></sgds-close-button>`
                : lit.nothing}
          </div>
        `
            : lit.nothing;
    }
}
SgdsBadge.styles = [...sgdsElement["default"].styles, badge["default"]];
/**@internal */
SgdsBadge.dependencies = {
    "sgds-close-button": sgdsCloseButton.SgdsCloseButton
};
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsBadge.prototype, "show", void 0);
tslib.__decorate([
    decorators_js.property({ reflect: true })
], SgdsBadge.prototype, "variant", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsBadge.prototype, "outlined", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsBadge.prototype, "dismissible", void 0);
tslib.__decorate([
    watch.watch("show")
], SgdsBadge.prototype, "_handleShowChange", null);

exports.SgdsBadge = SgdsBadge;
exports["default"] = SgdsBadge;
//# sourceMappingURL=sgds-badge.cjs.js.map
