'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var lit = require('lit');
var decorators_js = require('lit/decorators.js');
var sgdsElement = require('../../base/sgds-element.cjs.js');
var tab = require('./tab.cjs.js');
var watch = require('../../utils/watch.cjs.js');

let id = 0;
/**
 * @summary Tabs are used within tab group to activate the tab panels
 *
 * @slot default - The slot for label of tab
 * @slot icon - The slot to place leading icon.
 *
 */
class SgdsTab extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        this.attrId = ++id;
        this.componentId = `sgds-tab-${this.attrId}`;
        /** The name of the tab panel this tab is associated with. The panel must be located in the same tab group. */
        this.panel = "";
        /** Draws the tab in an active state. When used with tab group, this state is already managed. Use it to set the initial active tab on first load of page */
        this.active = false;
        /** When true, sets tab to disabled state */
        this.disabled = false;
    }
    connectedCallback() {
        super.connectedCallback();
        // If the user didn't provide an ID, we'll set one so we can link tabs and tab panels with aria labels
        this.id = this.id.length > 0 ? this.id : this.componentId;
        this.setAttribute("role", "tab");
    }
    /** Sets focus to the tab. */
    focus(options) {
        var _a, _b;
        (_b = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(".tab")) === null || _b === void 0 ? void 0 : _b.focus(options);
    }
    /** Removes focus from the tab. */
    blur() {
        this.tab.blur();
    }
    /**@internal */
    handleActiveChange() {
        this.setAttribute("aria-selected", this.active ? "true" : "false");
    }
    /**@internal */
    handleDisabledChange() {
        this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
        if (this.disabled)
            this.active = false;
    }
    render() {
        return lit.html `
      <div data-testid="inner-tab" tabindex=${this.disabled ? "-1" : "0"} class="tab">
        <slot name="icon"></slot>
        <slot></slot>
      </div>
    `;
    }
}
SgdsTab.styles = [tab["default"]];
tslib.__decorate([
    decorators_js.query(".tab")
], SgdsTab.prototype, "tab", void 0);
tslib.__decorate([
    decorators_js.property({ reflect: true })
], SgdsTab.prototype, "panel", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsTab.prototype, "active", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsTab.prototype, "disabled", void 0);
tslib.__decorate([
    watch.watch("active")
], SgdsTab.prototype, "handleActiveChange", null);
tslib.__decorate([
    watch.watch("disabled")
], SgdsTab.prototype, "handleDisabledChange", null);

exports.SgdsTab = SgdsTab;
exports["default"] = SgdsTab;
//# sourceMappingURL=sgds-tab.cjs.js.map
