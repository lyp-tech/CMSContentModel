# Windsurf Rules Configuration
Always refer to README.md for guidance on typescript code, file organisation, and tasks.

## Version
1.0

## External Libraries Usage
  - Usage of external libraries is not allowed without explicit approval

## Writing code

### The smallest possible change

For example, if a task requires "Add checkbox to toggle Show/Hide", many would implement it as:

    1. Add a new field to the model
    2. Add checkbox UI and wire up events
    3. Implement the show/hide logic
    4. Add styling/animations

But that's actually too many changes at once! Instead, we should do it as:

#### Iteration 1: Just the model
    - Add boolean field to model
    - Update decoder/encoder
    - Nothing else

#### Iteration 2: Just the UI presence
    - Add checkbox element
    - Wire up event handler
    - Nothing else

#### Iteration 3: Just the logic
    - Implement show/hide logic
    - Nothing else

#### Iteration 4: Just the UX
    - Add styling/animations
    - Nothing else

Each iteration above is "the smallest possible change". Never combine them into one iteration.

### One iteration at a time

1. Make only the smallest possible change at every iteration
2. Run `make build` to confirm it didn't break anything
    - if something broke, it means the change was incomplete; make the remaining changes instead of only fixing the error
3. Only if that's successful, then ask for permission to make the next smallest change (repeat step 1 and 2)

### Preserving Existing Code
1. Never remove or modify existing code that isn't directly related to your task
2. If you accidentally remove code, restore it immediately before proceeding
3. If unsure whether code is related to your task, assume it isn't and leave it unchanged

### Keeping Git Diff Clean
1. Avoid unnecessary whitespace changes
2. Don't reformat code unless it's part of your task
3. Keep changes focused on the task at hand
4. Run `make diff` to check for unnecessary changes

### Temporary UI Elements

1. Skip styling iterations for temporary UI elements that will be replaced
2. Document temporary UI elements with a comment in the code
3. Focus on functionality first, only add styling when the UI is final
4. Keep temporary UI minimal but functional

Example:
If a task requires "Add dropdown for visibility rules":
- ❌ Don't: Implement full styling for a temporary text display
- ✅ Do: Use minimal HTML to show the current state
- ✅ Do: Skip styling iteration if the UI will be replaced

## Tasks

- All code changes should correspond to a checkbox in tasks/
- When a change is completed
    - run `make build` to confirm it doesn't break anything
    - update the checkbox in tasks/
- If all checkboxes are checked, update tasks/README.md and rename the task file from TODO to DONE.