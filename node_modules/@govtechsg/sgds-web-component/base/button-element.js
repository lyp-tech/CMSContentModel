import { __decorate } from 'tslib';
import { query, property } from 'lit/decorators.js';
import SgdsElement from './sgds-element.js';
import css_248z from './button.js';

class ButtonElement extends SgdsElement {
    constructor() {
        super(...arguments);
        /** One or more button variant combinations buttons may be one of a variety of visual variants such as: `primary`, `danger`, `outline`, `ghost` */
        this.variant = "primary";
        /** Specifies a small, medium or large button, the size is medium by default. */
        this.size = "md";
        /** Manually set the visual state of the button to `:active` */
        this.active = false;
        /** The disabled state of the button */
        this.disabled = false;
        /** Where to display the linked URL, as the name for a browsing context. Forwards to the HTMLAnchor target attribute */
        this.target = "_self";
    }
    /** Sets focus on the button. */
    focus(options) {
        this.button.focus(options);
    }
    /** Simulates a click on the button. */
    click() {
        this.button.click();
    }
    /** Removes focus from the button. */
    blur() {
        this.button.blur();
    }
    _handleBlur() {
        this.emit("sgds-blur");
    }
    _handleFocus() {
        this.emit("sgds-focus");
    }
    _handleClick(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
            return;
        }
    }
}
ButtonElement.styles = [...SgdsElement.styles, css_248z];
__decorate([
    query(".btn")
], ButtonElement.prototype, "button", void 0);
__decorate([
    property({ reflect: true })
], ButtonElement.prototype, "variant", void 0);
__decorate([
    property({ reflect: true })
], ButtonElement.prototype, "size", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], ButtonElement.prototype, "active", void 0);
__decorate([
    property({ type: Boolean, reflect: true })
], ButtonElement.prototype, "disabled", void 0);
__decorate([
    property({ type: String, reflect: true })
], ButtonElement.prototype, "href", void 0);
__decorate([
    property({ type: String, reflect: true })
], ButtonElement.prototype, "target", void 0);
__decorate([
    property({ type: String, reflect: true })
], ButtonElement.prototype, "download", void 0);
__decorate([
    property({ type: String })
], ButtonElement.prototype, "ariaLabel", void 0);

export { ButtonElement as default };
//# sourceMappingURL=button-element.js.map
