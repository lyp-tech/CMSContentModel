'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var lit = require('lit');
var decorators_js = require('lit/decorators.js');
var classMap_js = require('lit/directives/class-map.js');
var sgdsElement = require('../../base/sgds-element.cjs.js');
var defaultvalue = require('../../utils/defaultvalue.cjs.js');
var generateId = require('../../utils/generateId.cjs.js');
var watch = require('../../utils/watch.cjs.js');
var formLabel = require('../../styles/form-label.cjs.js');
var _switch = require('./switch.cjs.js');

/**
 * @summary Switch component is used to toggle on and off or yes or no action.
 *
 * @slot default - The default label of switch on the right side of the switch
 * @slot leftLabel - The label on the left side of the switch
 *
 * @event sgds-change - Emitted when the checked state changes.
 *
 */
class SgdsSwitch extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        /** The size of the switch. By default, it is small size */
        this.size = "md";
        /** When enabled, icon appears in the switch */
        this.icon = false;
        /** Draws the switch in a checked state. */
        this.checked = false;
        /** Disables the switch (so the user can't check / uncheck it). */
        this.disabled = false;
        /** @internal Gets or sets the default value used to reset this element. The initial value corresponds to the one originally specified in the HTML that created this element. */
        this.defaultChecked = false;
        /** @internal For Id/For pair of the HTML form control and label. */
        this._inputId = generateId["default"]("switch");
    }
    /** Simulates a click on the switch. */
    click() {
        this.input.click();
    }
    /** Sets focus on the switch. */
    focus(options) {
        this.input.focus(options);
    }
    /** Removes focus from the switch. */
    blur() {
        this.input.blur();
    }
    _handleChange() {
        this.checked = !this.checked;
        this.emit("sgds-change", { detail: { checked: this.checked } });
    }
    _handleKeyDown(event) {
        const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
        if (event.key === "Enter" && !hasModifier) {
            this.click();
        }
    }
    /** @internal */
    _handleDisabledChange() {
        // Disabled form controls are always valid, so we need to recheck validity when the state changes
        this.input.disabled = this.disabled;
    }
    firstUpdated() {
        var _a;
        if (this._leftIconNodes.length === 0) {
            return (_a = this.shadowRoot.querySelector(".form-check-label.left-label")) === null || _a === void 0 ? void 0 : _a.classList.add("d-none");
        }
    }
    render() {
        return lit.html `
      <div class="form-check">
        <label for="${this._inputId}" class="form-check-label left-label"><slot name="leftLabel"></slot></label>
        <input
          class=${classMap_js.classMap({
            "form-check-input": true
        })}
          type="checkbox"
          id=${this._inputId}
          ?checked=${this.checked}
          ?disabled=${this.disabled}
          aria-disabled=${this.disabled ? "true" : "false"}
          aria-checked=${this.checked ? "true" : "false"}
          @change=${this._handleChange}
          @keydown=${this._handleKeyDown}
        />
        <label for="${this._inputId}" class="form-check-label"><slot></slot></label>
      </div>
    `;
    }
}
SgdsSwitch.styles = [...sgdsElement["default"].styles, formLabel["default"], _switch["default"]];
tslib.__decorate([
    decorators_js.property({ reflect: true, type: String })
], SgdsSwitch.prototype, "size", void 0);
tslib.__decorate([
    decorators_js.property({ reflect: true, type: Boolean })
], SgdsSwitch.prototype, "icon", void 0);
tslib.__decorate([
    decorators_js.query('input[type="checkbox"]')
], SgdsSwitch.prototype, "input", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsSwitch.prototype, "checked", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], SgdsSwitch.prototype, "disabled", void 0);
tslib.__decorate([
    defaultvalue.defaultValue("checked")
], SgdsSwitch.prototype, "defaultChecked", void 0);
tslib.__decorate([
    watch.watch("disabled", { waitUntilFirstUpdate: true })
], SgdsSwitch.prototype, "_handleDisabledChange", null);
tslib.__decorate([
    decorators_js.queryAssignedNodes({ slot: "leftLabel", flatten: true })
], SgdsSwitch.prototype, "_leftIconNodes", void 0);

exports.SgdsSwitch = SgdsSwitch;
exports["default"] = SgdsSwitch;
//# sourceMappingURL=sgds-switch.cjs.js.map
