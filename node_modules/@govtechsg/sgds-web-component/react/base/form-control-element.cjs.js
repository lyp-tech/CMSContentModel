'use client';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var decorators_js = require('lit/decorators.js');
var feedback = require('../styles/feedback.cjs.js');
var formHint = require('../styles/form-hint.cjs.js');
var formLabel = require('../styles/form-label.cjs.js');
var formPlaceholder = require('../styles/form-placeholder.cjs.js');
var sgdsElement = require('./sgds-element.cjs.js');
var generateId = require('../utils/generateId.cjs.js');

class FormControlElement extends sgdsElement["default"] {
    constructor() {
        super(...arguments);
        /** The input's label  */
        this.label = "";
        /** The input's hint text */
        this.hintText = "";
        /** Disables the input. */
        this.disabled = false;
        /** Marks the component as invalid. Replace the pseudo :invalid selector for absent in custom elements */
        this.invalid = false;
        this._controlId = generateId["default"]("input");
        this._labelId = generateId["default"]("label");
    }
    /** Programatically sets the invalid state of the input. Pass in boolean value in the argument */
    setInvalid(bool) {
        this.invalid = bool;
        if (bool) {
            this.emit("sgds-invalid");
        }
        else {
            this.emit("sgds-valid");
        }
    }
}
FormControlElement.styles = [...sgdsElement["default"].styles, feedback["default"], formHint["default"], formLabel["default"], formPlaceholder["default"]];
tslib.__decorate([
    decorators_js.property({ reflect: true })
], FormControlElement.prototype, "label", void 0);
tslib.__decorate([
    decorators_js.property({ reflect: true })
], FormControlElement.prototype, "hintText", void 0);
tslib.__decorate([
    decorators_js.property({ reflect: true })
], FormControlElement.prototype, "name", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], FormControlElement.prototype, "disabled", void 0);
tslib.__decorate([
    decorators_js.property({ type: Boolean, reflect: true })
], FormControlElement.prototype, "invalid", void 0);

exports["default"] = FormControlElement;
//# sourceMappingURL=form-control-element.cjs.js.map
