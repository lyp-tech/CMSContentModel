'use client';
import { __decorate } from 'tslib';
import { property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { literal, html } from 'lit/static-html.js';
import ButtonElement from '../../base/button-element.js';
import { SgdsIcon } from '../Icon/sgds-icon.js';
import css_248z from './icon-button.js';

/**
 * @summary An icon button is a user interface element that combines an icon and a button, serving as a clickable or tabbable component.
 *
 * @event sgds-blur - Emitted when the button is blurred.
 * @event sgds-focus - Emitted when the button is focused.
 */
class SgdsIconButton extends ButtonElement {
    _assignIconSize(buttonSize) {
        if (buttonSize === "sm")
            return "md";
        if (buttonSize === "md")
            return "lg";
        if (buttonSize === "lg")
            return "xl";
    }
    render() {
        const isLink = this.href;
        const tag = isLink ? literal `a` : literal `button`;
        return html `
          <${tag}
            class="btn btn-icon${classMap({
            disabled: this.disabled,
            active: this.active,
            [`btn-${this.variant}`]: this.variant,
            [`btn-${this.size}`]: this.size
        })}"
            ?disabled=${ifDefined(isLink ? undefined : this.disabled)}
            type=${ifDefined(isLink ? undefined : "button")}
            href=${ifDefined(isLink ? this.href : undefined)}
            target=${ifDefined(isLink ? this.target : undefined)}
            download=${ifDefined(isLink ? this.download : undefined)}
            rel=${ifDefined(isLink && this.target === "_blank" ? "noreferrer noopener" : undefined)}
            role=${ifDefined(isLink ? "button" : undefined)}
            aria-disabled=${this.disabled ? "true" : "false"}
            tabindex=${this.disabled ? "-1" : "0"}
            @click=${this._handleClick}
            @focus=${this._handleFocus}
            @blur=${this._handleBlur}
            aria-label=${ifDefined(this.ariaLabel)}
          >
            <sgds-icon name=${ifDefined(this.name)} size=${ifDefined(this._assignIconSize(this.size))}></sgds-icon>
          </${tag}>
        `;
    }
}
SgdsIconButton.styles = [...ButtonElement.styles, css_248z];
/** @internal */
SgdsIconButton.dependencies = {
    "sgds-icon": SgdsIcon
};
__decorate([
    property({ type: String, reflect: true })
], SgdsIconButton.prototype, "name", void 0);

export { SgdsIconButton, SgdsIconButton as default };
//# sourceMappingURL=sgds-icon-button.js.map
