{"version":3,"file":"sgds-skeleton.js","sources":["../../../src/components/Skeleton/sgds-skeleton.ts"],"sourcesContent":["import { html, nothing } from \"lit\";\nimport { property, query } from \"lit/decorators.js\";\nimport { classMap } from \"lit/directives/class-map.js\";\nimport SgdsElement from \"../../base/sgds-element\";\nimport skeletonStyles from \"./skeleton.css\";\n/**\n * @summary A skeleton is a low-fidelity visual placeholder that represents the loading of interface elements\n * before they have displayed on the page.\n */\nexport class SgdsSkeleton extends SgdsElement {\n  static styles = [skeletonStyles];\n\n  @query(\".skeleton\") private skeleton: HTMLDivElement;\n\n  /** Sets the width of skeleton. Pass value in string with length units like pixels or percentage. */\n  @property({ type: String, reflect: true }) width = \"\";\n  /** Sets the height of skeleton. Pass value in string with length units like pixels or percentage. */\n  @property({ type: String, reflect: true }) height = \"\";\n  /** Sets the border radius of skeleton. Pass value in string with length units like pixels and percentage\n   * When `row` is defined, the borderRadius is forwarded down to the border radius of each skeleton row */\n  @property({ type: String, reflect: true }) borderRadius = \"\";\n  /**Sets the number of rows within the given height of the skeleton.\n   * By default, the height of each row is auto-sized by taking the height of the skeleton divided by the number of rows and\n   * taking into account that there is a gap set by root css variable `--sgds-gap-xs` between each rows\n   */\n  @property({ type: Number, reflect: true }) rows: number;\n  /** Adds a sheening animated effect to the skeleton  */\n  @property({ type: Boolean, reflect: true }) sheen = false;\n\n  protected firstUpdated(): void {\n    this.width ? (this.skeleton.style.width = this.width) : null;\n    this.height ? (this.skeleton.style.height = this.height) : null;\n    this.borderRadius ? (this.skeleton.style.borderRadius = this.borderRadius) : null;\n\n    if (this.rows > 0) {\n      const skeletonRows = Array.from(this.skeleton.children) as HTMLElement[];\n      skeletonRows.forEach(row => (row.style.borderRadius = this.borderRadius));\n    }\n  }\n\n  render() {\n    return html`\n      <div\n        class=${classMap({\n          skeleton: true,\n          \"skeleton-paragraph\": this.rows > 0,\n          \"auto-size-rows\": this.rows > 0,\n          sheen: this.sheen && !this.rows\n        })}\n      >\n        ${this.rows > 0\n          ? [...Array(this.rows).keys()].map(n => {\n              const classes = { [`skeleton-row-${n}`]: true, sheen: this.sheen };\n              return html`<div class=${classMap(classes)}></div>`;\n            })\n          : nothing}\n      </div>\n    `;\n  }\n}\n\nexport default SgdsSkeleton;\n\n// Accessibility to add to Documentation:\n// When user use a template of sgds-skeletons, add one visually hidden span to indicate Loading...\n// Loading labels must be unique thats why its not advisible to handle the aria labelling for users inside sgds-skeleton\n"],"names":["skeletonStyles"],"mappings":"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"}